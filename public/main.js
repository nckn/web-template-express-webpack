/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={"./app/animations/Button.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>a});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Component.js"),i=r("./app/utils/easings.js"),o=r("./app/utils/text.js");class a extends n.default{constructor({element:t}){super({element:t}),this.createText(),this.createPath()}createText(){const t=this.element.textContent;this.elements.wrapper=this.element.querySelector("span"),this.elements.text=document.createElement("div"),this.elements.text.innerHTML=t,this.elements.textSpans=(0,o.split)({append:!1,element:this.elements.text,expression:""}),this.elements.hover=document.createElement("div"),this.elements.hover.innerHTML=t,this.elements.hoverSpans=(0,o.split)({append:!1,element:this.elements.hover,expression:""}),this.elements.wrapper.innerHTML="",this.elements.wrapper.appendChild(this.elements.text),this.elements.wrapper.appendChild(this.elements.hover),s.default.set(this.elements.hover,{left:0,position:"absolute",top:0}),this.timeline=s.default.timeline({paused:!0}),this.timeline.to(this.elements.textSpans,{duration:.5,ease:i.DEFAULT,transform:"rotate3d(1, 0.1, 0, -90deg)",stagger:.01},0),this.timeline.fromTo(this.elements.hoverSpans,{transform:"rotate3d(1, 0.1, 0, 90deg)"},{duration:.5,ease:i.DEFAULT,transform:"rotate3d(0, 0, 0, 90deg)",stagger:.01},.05)}createPath(){this.path=this.element.querySelector("path:last-child"),this.pathLength=this.path.getTotalLength(),this.pathValue=this.pathLength,s.default.set(this.path,{strokeDashoffset:this.pathLength,strokeDasharray:`${this.pathLength} ${this.pathLength}`})}onMouseEnter(){this.pathValue-=this.pathLength,s.default.to(this.path,{duration:1,ease:i.DEFAULT,strokeDashoffset:this.pathValue}),this.timeline.play()}onMouseLeave(){this.pathValue-=this.pathLength,s.default.to(this.path,{duration:1,ease:i.DEFAULT,strokeDashoffset:this.pathValue}),this.timeline.reverse()}addEventListeners(){this.onMouseEnterEvent=this.onMouseEnter.bind(this),this.onMouseLeaveEvent=this.onMouseLeave.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterEvent),this.element.addEventListener("mouseleave",this.onMouseLeaveEvent)}removeEventListeners(){this.element.removeEventListener("mouseenter",this.onMouseEnterEvent),this.element.removeEventListener("mouseleave",this.onMouseLeaveEvent)}}},"./app/animations/Link.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>a});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Animation.js"),i=r("./app/utils/easings.js"),o=r("./app/utils/text.js");const a=class extends n.default{constructor({element:t,elements:e}){super({element:t,elements:{}});const{innerHTML:r}=this.element.querySelector("span");this.elements.text=document.createElement("div"),this.elements.text.innerHTML=r,this.elements.textSpans=(0,o.split)({append:!1,element:this.elements.text,expression:""}),this.elements.hover=document.createElement("div"),this.elements.hover.innerHTML=r,this.elements.hoverSpans=(0,o.split)({append:!1,element:this.elements.hover,expression:""}),this.element.innerHTML="",this.element.appendChild(this.elements.text),this.element.appendChild(this.elements.hover),"center"===this.element.getAttribute("data-animation-position")?s.default.set(this.elements.hover,{left:"50%",position:"absolute",top:"50%",x:"-50%",y:"-50%"}):s.default.set(this.elements.hover,{left:0,position:"absolute",top:0}),this.timeline=s.default.timeline({paused:!0}),this.timeline.to(this.elements.textSpans,{duration:.5,ease:i.IMAGE,transform:"rotate3d(1, 0.2, 0, -90deg)",stagger:.02},0),this.timeline.fromTo(this.elements.hoverSpans,{transform:"rotate3d(1, 0.2, 0, 90deg)"},{duration:.5,ease:i.IMAGE,transform:"rotate3d(0, 0, 0, 90deg)",stagger:.02},.05),this.animateOut(),this.addEventListener()}animateIn(){}animateOut(){}onMouseEnter(){this.timeline.play()}onMouseLeave(){this.timeline.reverse()}addEventListener(){this.element.addEventListener("mouseenter",this.onMouseEnter),this.element.addEventListener("mouseleave",this.onMouseLeave)}removeEventListener(){this.element.addEventListener("mouseenter",this.onMouseEnter),this.element.addEventListener("mouseleave",this.onMouseLeave)}}},"./app/animations/Magnetic.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>i});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Animation.js");r("./app/utils/easings.js"),r("./app/utils/text.js");const i=class extends n.default{constructor({element:t,elements:e}){super({element:t,elements:{text:t.querySelector("span")}}),this.x={current:0,target:0},this.y={current:0,target:0},this.addEventListener()}animateIn(){}animateOut(){}onResize(){this.height=this.element.clientHeight}onMouseEnter(){this.updatePosition()}onMouseMove({clientX:t,clientY:e,target:r}){const{clientHeight:s,clientWidth:n}=this.elements.text,{left:i,top:o}=r.getBoundingClientRect(),a=(t-i)/n-.5,l=(e-o)/s-.5;this.x.target=a*n*.2,this.y.target=l*s*.2}onMouseLeave(){s.default.to([this.x,this.y],{current:0,duration:.2,onComplete:t=>window.cancelAnimationFrame(this.frame),target:0})}updatePosition(){this.x.current=s.default.utils.interpolate(this.x.current,this.x.target,.1),this.y.current=s.default.utils.interpolate(this.y.current,this.y.target,.1),s.default.set(this.elements.text,{x:this.x.current,y:this.y.current}),this.frame=window.requestAnimationFrame(this.updatePosition.bind(this))}addEventListener(){this.element.addEventListener("mouseenter",this.onMouseEnter),this.element.addEventListener("mousemove",this.onMouseMove),this.element.addEventListener("mouseleave",this.onMouseLeave)}removeEventListener(){this.element.removeEventListener("mouseenter",this.onMouseEnter),this.element.removeEventListener("mousemove",this.onMouseMove),this.element.removeEventListener("mouseleave",this.onMouseLeave)}}},"./app/animations/Paragraph.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>u});var s=r("./node_modules/lodash/each.js"),n=r.n(s),i=r("./app/classes/Animation.js"),o=r("./node_modules/gsap/index.js"),a=r("./app/utils/easings.js"),l=r("./app/utils/text.js");const u=class extends i.default{constructor({element:t}){const e=[],r=t.querySelectorAll("h1, h2, p");0!==r.length?n()(r,(t=>{(0,l.split)({element:t}),(0,l.split)({element:t}),e.push(...t.querySelectorAll("span span"))})):((0,l.split)({element:t}),(0,l.split)({element:t}),e.push(...t.querySelectorAll("span span"))),super({element:t,elements:{lines:e}}),this.onResize(),"IntersectionObserver"in window&&this.animateOut()}animateIn(){super.animateIn(),n()(this.lines,((t,e)=>{n()(t,(t=>{t.style.transition=`transform 1.5s ${.1*e}s ${a.CSS}`,t.style[this.transformPrefix]="translateY(0)"}))}))}animateOut(){super.animateOut(),n()(this.lines,(t=>{n()(t,(t=>{t.style[this.transformPrefix]="translateY(100%)"}))}))}setToZero(){super.animateOut(),console.log("setToZero"),n()(this.lines,((t,e)=>{n()(t,(e=>{o.default.set(t,{transform:"translateY(100%)"})}))}))}onResize(){this.lines=(0,l.calculate)(this.elements.lines)}}},"./app/animations/Parallax.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var s=r("./node_modules/prefix/index.js"),n=r.n(s),i=r("./app/utils/breakpoints.js"),o=r("./app/utils/dom.js"),a=r("./app/utils/math.js");const l=class{constructor({element:t}){this.transform=n()("transform"),this.element=t,this.media=t.querySelector("img"),this.media.onload=t=>{this.onResize()},this.isVisible=!1,this.parallax={current:-this.amount,target:-this.amount},this.onResize()}onResize(){console.log("onResize"),this.amount=window.innerWidth<i.BREAKPOINT_TABLET?10:150,this.offset=(0,o.getOffset)(this.element)}update(t){if(!this.offset)return;const{innerHeight:e}=window;t.current+e>=this.offset.top?(this.parallax=(0,a.clamp)(-this.amount,this.amount,(0,a.map)(this.offset.top-t.current,-this.offset.height,e,this.amount,-this.amount)),this.scale=(0,a.clamp)(1,1.15,(0,a.map)(this.offset.top-t.current,-this.offset.height,e,1,1.15)),this.media.style[this.transform]=`translate3d(0, ${this.parallax}px, 0)`):this.media.style[this.transform]=`translate3d(0, -${this.amount}px, 0)`}}},"./app/animations/Rotation.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>n});var s=r("./app/classes/Animation.js");const n=class extends s.default{constructor({element:t}){super({element:t})}update(t){this.element.style[this.transformPrefix]=`rotate(${.25*t.current}deg)`}}},"./app/animations/Seperator.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>o});r("./node_modules/lodash/each.js");var s=r("./app/classes/Animation.js"),n=r("./node_modules/gsap/index.js"),i=r("./app/utils/dom.js");r("./app/utils/easings.js");const o=class extends s.default{constructor({element:t}){super({element:t}),this.onResize(),console.log("this is the element:"),console.log(this.element),"IntersectionObserver"in window&&this.animateOut()}animateIn(){super.animateIn(),console.log("should animate in"),n.default.to(this.element,1,{width:"100%",ease:"expo.out",delay:1})}animateOut(){super.animateOut(),n.default.to(this.element,1,{width:"0%",ease:"expo.out",delay:1})}onResize(){this.offset=(0,i.getOffset)(this.element),console.log("the offset:"),console.log(this.offset)}}},"./app/animations/Translate.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var s=r("./node_modules/prefix/index.js"),n=r.n(s),i=r("./app/utils/breakpoints.js"),o=r("./app/utils/dom.js"),a=r("./app/utils/math.js");const l=class{constructor({element:t}){this.transform=n()("transform"),this.element=t,this.targetElement=this.element.getAttribute("data-animation-target"),this.target=this.targetElement?t.parentNode.querySelector(this.targetElement):t,this.direction=this.element.getAttribute("data-animation-direction"),this.isVisible=!1,this.onResize(),this.parallax={current:-this.amount,target:-this.amount}}onResize(){this.amount=window.innerWidth<i.BREAKPOINT_TABLET?10:150,this.offset=(0,o.getOffset)(this.target)}update(t){if(this.isVideo)return;const{innerHeight:e}=window;t.current+e>=this.offset.top?(this.parallax=(0,a.map)(this.offset.top-t.current,-this.offset.height,e,this.amount,-this.amount),"left"===this.direction?(this.parallax*=-1,this.parallax=Math.min(this.parallax,0)):this.parallax=Math.max(this.parallax,0),this.element.style[this.transform]=`translate3d(0, ${this.parallax}px, 0)`):this.element.style[this.transform]=`translate3d(0, ${this.amount}px, 0)`}}},"./app/classes/Animation.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>a});var s=r("./node_modules/auto-bind/index.js"),n=r.n(s),i=r("./node_modules/prefix/index.js"),o=r.n(i);const a=class{constructor({element:t,elements:e}){n()(this);const{animationDelay:r,animationTarget:s}=t.dataset;this.delay=r,this.element=t,this.elements=e,this.target=s?t.closest(s):t,this.transformPrefix=o()("transform"),this.isVisible=!1,"IntersectionObserver"in window?(this.createObserver(),this.animateOut()):this.animateIn()}createObserver(){this.observer=new window.IntersectionObserver((t=>{t.forEach((t=>{!this.isVisible&&t.isIntersecting?this.animateIn():this.animateOut()}))}),{rootMargin:"lineStd"===this.element.id?"-20% 0px -20% 0px":""}).observe(this.target)}animateIn(){this.isVisible=!0}animateOut(){this.isVisible=!1}}},"./app/classes/AsyncLoad.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>n});var s=r("./app/classes/Component.js");class n extends s.default{constructor({element:t}){super({element:t}),this.createObserver()}createObserver(){this.observer=new window.IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting&&(this.element.src||(this.element.src=this.element.getAttribute("data-src"),this.element.onload=t=>{this.element.classList.add("loaded")}))}))})),this.observer.observe(this.element)}}},"./app/classes/Component.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>u});var s=r("./node_modules/auto-bind/index.js"),n=r.n(s),i=r("./node_modules/events/events.js"),o=r.n(i),a=r("./node_modules/lodash/each.js"),l=r.n(a);class u extends(o()){constructor({classes:t,element:e,elements:r}){super(),n()(this),this.classes=t,this.selector=e,this.selectorChildren={...r},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},l()(this.selectorChildren,((t,e)=>{t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=this.element.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=this.element.querySelector(t)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/classes/Detection.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>s});const s=new class{isPhone(){return this.isPhoneChecked||(this.isPhoneChecked=!0,this.isPhoneCheck=document.documentElement.classList.contains("phone")),this.isPhoneCheck}isTablet(){return this.isTabletChecked||(this.isTabletChecked=!0,this.isTabletCheck=document.documentElement.classList.contains("phone")),this.isTabletCheck}isDesktop(){return!this.isPhone()}isWebPSupported(){if(!this.isWebPChecked){this.isWebPChecked=!0;const t=document.createElement("canvas");t.getContext&&t.getContext("2d")&&(this.isWebPCheck=0===t.toDataURL("image/webp").indexOf("data:image/webp"))}return this.isWebPCheck}}},"./app/classes/Page.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>E});var s=r("./node_modules/auto-bind/index.js"),n=r.n(s),i=r("./node_modules/events/events.js"),o=r.n(i),a=r("./node_modules/gsap/index.js"),l=r("./node_modules/prefix/index.js"),u=r.n(l),h=r("./app/animations/Button.js"),c=r("./app/animations/Link.js"),d=r("./app/animations/Magnetic.js"),p=r("./app/animations/Parallax.js"),f=r("./app/animations/Paragraph.js"),m=r("./app/animations/Rotation.js"),g=r("./app/animations/Translate.js"),v=r("./app/animations/Seperator.js"),_=r("./app/classes/AsyncLoad.js"),y=r("./app/classes/Detection.js"),b=r("./node_modules/lodash/each.js"),w=r.n(b),x=r("./app/utils/dom.js"),j=r("./app/utils/math.js");r("./app/utils/text.js");const E=class extends(o()){constructor({classes:t,element:e,elements:r,isScrollable:s=!0}){super(),n()(this),this.classes={...t},this.selectors={element:e,elements:{preloaders:"[data-src]",animationsButtons:'[data-animation="button"]',animationsLinks:'[data-animation="link"]',animationsMagnetics:'[data-animation="magnetic"]',animationsParallaxes:'[data-animation="parallax"]',animationsParagraphs:'[data-animation="paragraph"]',animationsRotations:'[data-animation="rotation"]',animationsTranslates:'[data-animation="translate"]',animationsSeperators:'[data-animation="seperator"]',footer:".footer",footerCredits:".footer__credits",...r}},this.scroll={ease:.07,position:0,current:0,target:0,limit:0},this.isScrollable=s,this.transformPrefix=u()("transform"),this.create()}create(){this.animations=[],this.element=document.querySelector(this.selectors.element),this.elements={},w()(this.selectors.elements,((t,e)=>{t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=this.element.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=this.element.querySelector(t)))})),this.isScrollable&&(this.scroll={ease:.07,position:0,current:0,target:0,limit:this.elements.wrapper.clientHeight-window.innerHeight}),this.createAnimations(),this.createObserver(),this.createPreloaders()}createAnimations(){this.animationsButtons=(0,x.mapEach)(this.elements.animationsButtons,((t,e)=>new h.default({element:t}))),this.animations.push(...this.animationsButtons),this.animationsLinks=(0,x.mapEach)(this.elements.animationsLinks,((t,e)=>new c.default({element:t}))),this.animations.push(...this.animationsLinks),this.animationsMagnetics=(0,x.mapEach)(this.elements.animationsMagnetics,((t,e)=>new d.default({element:t}))),this.animations.push(...this.animationsMagnetics),this.animationsParallaxes=(0,x.mapEach)(this.elements.animationsParallaxes,(t=>new p.default({element:t}))),this.animations.push(...this.animationsParallaxes),this.animationsParagraphs=(0,x.mapEach)(this.elements.animationsParagraphs,(t=>new f.default({element:t}))),this.animations.push(...this.animationsParagraphs),this.animationsSeperators=(0,x.mapEach)(this.elements.animationsSeperators,(t=>new v.default({element:t}))),this.animations.push(...this.animationsSeperators),this.animationsRotations=(0,x.mapEach)(this.elements.animationsRotations,(t=>new m.default({element:t}))),this.animations.push(...this.animationsRotations),this.animationsTranslates=(0,x.mapEach)(this.elements.animationsTranslates,(t=>new g.default({element:t}))),this.animations.push(...this.animationsTranslates)}createObserver(){this.observer=new window.ResizeObserver((t=>{for(const e of t)window.requestAnimationFrame((t=>{this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight}))})),this.observer.observe(this.elements.wrapper)}createPreloaders(){this.preloaders=(0,x.mapEach)(this.elements.preloaders,(t=>new _.default({element:t})))}reset(){this.scroll={ease:.07,position:0,current:0,target:0,limit:0}}set(t){this.scroll.current=this.scroll.target=this.scroll.last=t,this.transform(this.elements.wrapper,this.scroll.current)}show(t){return this.reset(),this.isVisible=!0,this.addEventListeners(),a.default.set(document.documentElement,{backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),Promise.resolve()}hide(t){return this.isVisible=!1,this.removeEventListeners(),Promise.resolve()}transform(t,e){t.style[this.transformPrefix]=`translate3d(0, ${-Math.round(e)}px, 0)`}onResize(){this.elements.wrapper&&window.requestAnimationFrame((t=>{this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight,w()(this.animations,(t=>{t.onResize&&t.onResize()}))}))}onTouchDown(t){y.default.isPhone()&&(this.isDown=!0,this.scroll.position=this.scroll.current,this.start=t.touches?t.touches[0].clientY:t.clientY)}onTouchMove(t){if(!y.default.isPhone()||!this.isDown)return;const e=t.touches?t.touches[0].clientY:t.clientY,r=3*(this.start-e);this.scroll.target=this.scroll.position+r}onTouchUp(t){y.default.isPhone()&&(this.isDown=!1)}onWheel(t){const e=t.pixelY;return this.scroll.target+=e,e}addEventListeners(){}removeEventListeners(){}update(){this.scroll.target=(0,j.clamp)(0,this.scroll.limit,this.scroll.target),this.scroll.current=(0,j.lerp)(this.scroll.current,this.scroll.target,this.scroll.ease),this.scroll.current=Math.floor(this.scroll.current),this.scroll.current<.1&&(this.scroll.current=0),this.elements.wrapper&&this.transform(this.elements.wrapper,this.scroll.current),w()(this.animations,(t=>{t.update&&t.update(this.scroll)})),this.scroll.last=this.scroll.current}}},"./app/components/Canvas/About/Gallery.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/gsap/index.js"),i=r("./node_modules/lodash/map.js"),o=r.n(i),a=r("./app/components/Canvas/About/Media.js");class l{constructor({element:t,geometry:e,index:r,gl:n,scene:i,sizes:o}){this.element=t,this.elementWrapper=t.querySelector(".about__gallery__wrapper"),this.geometry=e,this.index=r,this.gl=n,this.scene=i,this.sizes=o,this.group=new s.Transform,this.scroll={current:0,start:0,target:0,lerp:.1,velocity:1},this.createMedias(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene)}createMedias(){this.mediasElements=this.element.querySelectorAll(".about__gallery__media"),this.medias=o()(this.mediasElements,((t,e)=>new a.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){o()(this.medias,(t=>t.show()))}hide(){o()(this.medias,(t=>t.hide()))}onResize(t){this.bounds=this.elementWrapper.getBoundingClientRect(),this.sizes=t.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.current=this.scroll.target=0,o()(this.medias,(e=>e.onResize(t,this.scroll.current,this.width)))}onTouchDown({x:t,y:e}){this.scroll.start=this.scroll.current}onTouchMove({x:t,y:e}){const r=t.start-t.end;this.scroll.target=this.scroll.start-r}onTouchUp({x:t,y:e}){}update(t){const e=.1*(t.current-t.target),r=t.current/window.innerHeight;this.scroll.current<this.scroll.target?(this.direction="right",this.scroll.velocity=-1):this.scroll.current>this.scroll.target&&(this.direction="left",this.scroll.velocity=1),this.scroll.target-=this.scroll.velocity,this.scroll.target+=e,this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),o()(this.medias,((t,e)=>{const r=t.mesh.scale.x/2+.25;if("left"===this.direction){t.mesh.position.x+r<-this.sizes.width/2&&(t.extra+=this.width)}else if("right"===this.direction){t.mesh.position.x-r>this.sizes.width/2&&(t.extra-=this.width)}t.update(this.scroll.current)})),this.group.position.y=r*this.sizes.height}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/About/Media.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>u});var s=r("./node_modules/gsap/index.js"),n=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),o=r("./app/classes/Detection.js"),a=r("./app/shaders/plane-fragment.glsl"),l=r("./app/shaders/plane-vertex.glsl");const u=class{constructor({element:t,geometry:e,gl:r,index:s,scene:n,sizes:i}){this.element=t,this.geometry=e,this.gl=r,this.index=s,this.scene=n,this.sizes=i,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element.querySelector("img");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{fragment:a.default,vertex:l.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){s.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){s.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e,r){this.extra=0,this.widthTotal=r,this.createBounds(t),this.updateX(e),this.updateY(0)}updateRotation(){this.mesh.rotation.z=s.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.1*Math.PI,.1*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight;const e=o.default.isPhone()?15:60;this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)*e-e}update(t){this.updateRotation(),this.updateScale(),this.updateX(t),this.updateY(0)}}},"./app/components/Canvas/About/index.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/extras/Plane.js"),i=r("./node_modules/lodash/map.js"),o=r.n(i),a=r("./app/components/Canvas/About/Gallery.js");const l=class{constructor({gl:t,scene:e,sizes:r}){this.gl=t,this.scene=e,this.sizes=r,this.group=new s.Transform,this.createGeometry(),this.onResize({sizes:this.sizes})}createGeometry(){this.geometry=new n.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about__gallery"),this.galleries=o()(this.galleriesElements,((t,e)=>new a.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){this.group.setParent(this.scene),o()(this.galleries,(t=>t.show()))}hide(){this.group.setParent(null),o()(this.galleries,(t=>t.hide()))}onResize(t){o()(this.galleries,(e=>e.onResize(t)))}onTouchDown(t){o()(this.galleries,(e=>e.onTouchDown(t)))}onTouchMove(t){o()(this.galleries,(e=>e.onTouchMove(t)))}onTouchUp(t){o()(this.galleries,(e=>e.onTouchUp(t)))}onWheel({pixelX:t,pixelY:e}){}update(t){o()(this.galleries,(e=>e.update(t)))}destroy(){o()(this.galleries,(t=>t.destroy()))}}},"./app/components/Canvas/Home/Media.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var s=r("./node_modules/gsap/index.js"),n=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),o=r("./app/shaders/home-fragment.glsl"),a=r("./app/shaders/home-vertex.glsl");const l=class{constructor({element:t,geometry:e,gl:r,index:s,scene:n,sizes:i}){this.element=t,this.geometry=e,this.gl=r,this.index=s,this.scene=n,this.sizes=i,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element;this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{fragment:o.default,vertex:a.default,uniforms:{uAlpha:{value:0},uSpeed:{value:0},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},tMap:{value:this.texture}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(t){const e=t?2.5:0;this.timelineIn=s.default.timeline({delay:s.default.utils.random(e,e+1.5)}),this.timelineIn.fromTo(this.program.uniforms.uAlpha,{value:0},{duration:2,ease:"expo.inOut",value:.4},"start"),this.timelineIn.fromTo(this.mesh.position,{z:s.default.utils.random(2,6)},{duration:2,ease:"expo.inOut",z:0},"start")}hide(){}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e&&e.x),this.updateY(e&&e.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t,e){this.updateX(t.x),this.updateY(t.y),this.program.uniforms.uSpeed.value=e}}},"./app/components/Canvas/Home/index.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>u});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/extras/Plane.js"),i=r("./node_modules/gsap/index.js"),o=r("./node_modules/lodash/map.js"),a=r.n(o),l=r("./app/components/Canvas/Home/Media.js");const u=class{constructor({gl:t,scene:e,sizes:r}){this.gl=t,this.scene=e,this.sizes=r,this.group=new s.Transform,this.galleryElement=document.querySelector(".home__gallery"),this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0},this.speed={current:0,target:0,lerp:.1},this.velocity=0,this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes})}createGeometry(){this.geometry=new n.Plane(this.gl,{heightSegments:20,widthSegments:20})}createGallery(){this.medias=a()(this.mediasElements,((t,e)=>new l.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(t){this.group.setParent(this.scene),a()(this.medias,(e=>e.show(t)))}hide(){this.group.setParent(null),a()(this.medias,(t=>t.hide()))}onResize(t){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=t.sizes,this.gallerySizes={height:this.galleryBounds.height/window.innerHeight*this.sizes.height,width:this.galleryBounds.width/window.innerWidth*this.sizes.width},this.scroll.y=this.y.target=0,a()(this.medias,(e=>e.onResize(t,this.scroll)))}onTouchDown({x:t,y:e}){this.scrollCurrent.y=this.scroll.y}onTouchMove({x:t,y:e}){const r=e.start-e.end;this.y.target=this.scrollCurrent.y-r}onTouchUp({x:t,y:e}){}onWheel({pixelX:t,pixelY:e}){this.y.target+=e}update(){this.y.target+=this.velocity,this.speed.target=.003*(this.y.target-this.y.current),this.speed.current=i.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.x.current=i.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=i.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.y=this.y.current,a()(this.medias,((t,e)=>{const r=.5*this.sizes.height,s=t.mesh.scale.y/2;if("top"===this.y.direction){t.mesh.position.y+s<-r&&(t.extra.y+=this.gallerySizes.height)}else if("bottom"===this.y.direction){t.mesh.position.y-s>r&&(t.extra.y-=this.gallerySizes.height)}t.update(this.scroll,this.speed.current)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/index.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var s=r("./node_modules/ogl/src/core/Renderer.js"),n=r("./node_modules/ogl/src/core/Camera.js"),i=r("./node_modules/ogl/src/core/Transform.js"),o=r("./app/components/Canvas/About/index.js"),a=r("./app/components/Canvas/Home/index.js");class l{constructor({template:t}){this.template=t,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize()}createRenderer(){this.renderer=new s.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new n.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new i.Transform}createHome(){this.home=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}createAbout(){this.about=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}onPreloaded(){this.createAbout(),this.createDomains(),this.createHome(),this.onChange(this.template,!0)}onChange(t,e){"/about"===t?this.about.show(e):this.about.hide(),"/domains"===t?this.domains.show(e):this.domains.hide(),"/"===t?this.home.show(e):this.home.hide(),this.template=t}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const t=this.camera.fov*(Math.PI/180),e=2*Math.tan(t/2)*this.camera.position.z,r=e*this.camera.aspect;this.sizes={height:e,width:r};const s={sizes:this.sizes};this.about&&this.about.onResize(s),this.domains&&this.domains.onResize(s),this.home&&this.home.onResize(s)}onTouchDown(t){this.isDown=!0,this.x.start=t.touches?t.touches[0].clientX:t.clientX,this.y.start=t.touches?t.touches[0].clientY:t.clientY;const e={x:this.x,y:this.y};this.about&&this.about.onTouchDown(e),this.domains&&this.domains.onTouchDown(e),this.home&&this.home.onTouchDown(e)}onTouchMove(t){const e=t.touches?t.touches[0].clientX:t.clientX,r=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=r;const s={x:this.x,y:this.y};this.domains&&this.domains.onTouchMove(s),this.isDown&&(this.about&&this.about.onTouchMove(s),this.home&&this.home.onTouchMove(s))}onTouchUp(t){this.isDown=!1;const e=t.changedTouches?t.changedTouches[0].clientX:t.clientX,r=t.changedTouches?t.changedTouches[0].clientY:t.clientY;this.x.end=e,this.y.end=r;const s={x:this.x,y:this.y};this.about&&this.about.onTouchUp(s),this.domains&&this.domains.onTouchUp(s),this.home&&this.home.onTouchUp(s)}onWheel(t){this.domains&&this.domains.onWheel(t),this.home&&this.home.onWheel(t)}update(t){this.about&&this.about.update(t),this.domains&&this.domains.update(),this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Navigation.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var s=r("./node_modules/gsap/index.js"),n=r("./app/animations/Link.js"),i=r("./app/classes/Component.js"),o=r("./app/utils/colors.js"),a=r("./app/utils/dom.js");class l extends i.default{constructor({template:t}){super({element:".navigation",elements:{items:".navigation__list__item",links:".navigation__list__link"}}),this.links=(0,a.mapEach)(this.elements.links,(t=>new n.default({element:t}))),this.onChange(t)}onChange(t){"/about"===t?(s.default.set(this.element,{color:o.COLOR_BRIGHT_GRAY}),s.default.set(this.elements.items[0],{autoAlpha:1}),s.default.set(this.elements.items[1],{autoAlpha:.25})):(s.default.set(this.element,{color:o.COLOR_QUARTER_SPANISH_WHITE}),s.default.set(this.elements.items[0],{autoAlpha:.25}),s.default.set(this.elements.items[1],{autoAlpha:1}))}}},"./app/components/Preloader.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>h});var s=r("./node_modules/ogl/src/core/Texture.js"),n=r("./node_modules/gsap/index.js"),i=r("./node_modules/lodash/each.js"),o=r.n(i),a=r("./app/classes/Component.js"),l=r("./app/utils/easings.js"),u=r("./app/utils/text.js");class h extends a.default{constructor({canvas:t}){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text"}}),this.canvas=t,this.hasDataToLoad=!1,window.TEXTURES={},this.elements.titleSpans=(0,u.split)({append:!0,element:this.elements.title,expression:"<br>"}),o()(this.elements.titleSpans,(t=>{(0,u.split)({append:!1,element:t,expression:""})})),this.length=0,this.hasDataToLoad?(this.createLoader(),console.log("has data")):(console.log("no data"),this.onLoaded())}createLoader(){this.animateIn=n.default.timeline(),this.animateIn.set(this.elements.title,{autoAlpha:1}),o()(this.elements.titleSpans,((t,e)=>{const r=t.querySelectorAll("span");this.animateIn.fromTo(t,{autoAlpha:0,y:"100%"},{autoAlpha:1,delay:.2*e,duration:1.5,onStart:t=>{n.default.fromTo(r,{autoAlpha:0,display:"inline-block",y:"100%"},{autoAlpha:1,delay:.2,display:"inline-block",duration:1,ease:"back.inOut",stagger:.015,y:"0%"})},ease:"expo.inOut",y:"0%"},"start")})),this.animateIn.call((t=>{window.ASSETS.forEach((t=>{const e=new s.Texture(this.canvas.gl,{generateMipmaps:!1}),r=new window.Image;r.crossOrigin="anonymous",r.src=t,r.onload=t=>{e.image=r,this.onAssetLoaded()},window.TEXTURES[t]=e}))}))}onAssetLoaded(t){this.length+=1;const e=this.length/window.ASSETS.length;this.elements.numberText.innerHTML=`${Math.round(100*e)}%`,1===e&&this.onLoaded()}onLoaded(){return new Promise((t=>{this.emit("completed"),this.animateOut=n.default.timeline({delay:1}),o()(this.elements.titleSpans,((t,e)=>{const r=t.querySelectorAll("span");this.animateOut.to(t,{autoAlpha:0,delay:.2*e,duration:1.5,onStart:t=>{n.default.to(r,{autoAlpha:0,delay:.2,display:"inline-block",duration:1,ease:"back.inOut",stagger:.015,y:"-100%"})},ease:"expo.inOut",y:"-100%"},"start")})),this.animateOut.to(this.elements.numberText,{autoAlpha:0,duration:1,ease:l.DEFAULT},"start"),this.animateOut.to(this.element,{autoAlpha:0,duration:1}),this.animateOut.call((t=>{this.destroy()}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/components/Transition.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>n});var s=r("./node_modules/gsap/index.js");const n=class{constructor(){this.element=document.createElement("canvas"),this.element.className="transition",this.element.height=window.innerHeight*window.devicePixelRatio,this.element.width=window.innerWidth*window.devicePixelRatio,this.context=this.element.getContext("2d"),this.progress=0,document.body.appendChild(this.element)}show({color:t}){return this.color=t,new Promise((t=>{s.default.set(this.element,{rotation:0}),s.default.to(this,{duration:1.5,ease:"expo.inOut",onComplete:t,onUpdate:this.onUpdate.bind(this),progress:1})}))}hide(){return new Promise((t=>{s.default.set(this.element,{rotation:0}),s.default.to(this,{duration:1.5,ease:"expo.inOut",onComplete:t,onUpdate:this.onUpdate.bind(this),progress:0})}))}onUpdate(){this.context.clearRect(0,0,this.element.width,this.element.height),this.context.save(),this.context.beginPath(),this.widthSegments=Math.ceil(this.element.width/40),this.context.moveTo(this.element.width,this.element.height),this.context.lineTo(0,this.element.height);const t=(1-this.progress)*this.element.height,e=250*Math.sin(this.progress*Math.PI);this.context.lineTo(0,t);for(let r=0;r<=this.widthSegments;r++){const s=40*r,n=t-Math.sin(s/this.element.width*Math.PI)*e;this.context.lineTo(s,n)}this.context.fillStyle=this.color,this.context.fill(),this.context.restore()}}},"./app/pages/About/index.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>n});var s=r("./app/classes/Page.js");const n=class extends s.default{constructor(){super({id:"about",classes:{active:"about--active"},element:".about",elements:{wrapper:".about__wrapper__inner",navigation:document.querySelector(".navigation"),title:".about__title"}})}async show(t){return this.element.classList.add(this.classes.active),super.show(t)}async hide(t){return this.element.classList.remove(this.classes.active),super.hide(t)}}},"./app/pages/Home/Titles.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>c});var s=r("./node_modules/prefix/index.js"),n=r.n(s),i=r("./node_modules/lodash/each.js"),o=r.n(i),a=r("./app/classes/Component.js"),l=r("./app/utils/dom.js"),u=r("./app/utils/math.js"),h=r("./node_modules/gsap/index.js");const c=class extends a.default{constructor({element:t,elements:e}){super({element:t,elements:e}),this.transformPrefix=n()("transform"),this.speed=0,this.scroll={ease:.1,position:0,current:0,target:0,last:0,clamp:0},o()(this.elements.items,(t=>{const e=(0,l.getOffset)(t);t.extra=0,t.height=e.height,t.offset=e.top,t.position=0})),this.length=this.elements.items.length,this.height=this.elements.items[0].height,this.heightTotal=this.elements.list.getBoundingClientRect().height,this.addEventListeners()}addEventListeners(){o()(this.elements.items,((t,e)=>{t.addEventListener("mouseenter",this.onMouseEnterOrLeave.bind(this)),t.addEventListener("mouseleave",this.onMouseEnterOrLeave.bind(this))}))}onMouseEnterOrLeave(t){const e=t.target;"mouseenter"===t.type?h.default.to(e,.45,{"font-variation-settings":'"wght" 900',easing:"expo.out"}):"mouseleave"===t.type&&h.default.to(e,.45,{"font-variation-settings":'"wght" 100',easing:"expo.out"})}enable(){this.isEnabled=!0,this.update()}disable(){this.isEnabled=!1}onTouchDown(t){this.isEnabled&&(this.isDown=!0,this.scroll.position=this.scroll.current,this.start=t.touches?t.touches[0].clientY:t.clientY)}onTouchMove(t){if(!this.isDown||!this.isEnabled)return;const e=t.touches?t.touches[0].clientY:t.clientY,r=2*(this.start-e);this.scroll.target=this.scroll.position+r}onTouchUp(t){this.isEnabled&&(this.isDown=!1)}onWheel(t){if(!this.isEnabled)return;const e=.5*t.pixelY;this.scroll.target+=e}transform(t,e){t.style[this.transformPrefix]=`translate3d(0, ${Math.floor(e)}px, 0)`}update(){if(!this.isEnabled)return;this.scroll.target+=this.speed,this.scroll.current=(0,u.lerp)(this.scroll.current,this.scroll.target,this.scroll.ease);const t=Math.round(this.scroll.current%this.heightTotal);this.scroll.current<this.scroll.last?this.direction="down":this.direction="up",o()(this.elements.items,((e,r)=>{e.position=-this.scroll.current-e.extra;const s=e.position+e.offset+e.height;e.isBefore=s<0,e.isAfter=s>this.heightTotal,"up"===this.direction&&e.isBefore&&(e.extra=e.extra-this.heightTotal,e.isBefore=!1,e.isAfter=!1),"down"===this.direction&&e.isAfter&&(e.extra=e.extra+this.heightTotal,e.isBefore=!1,e.isAfter=!1),e.clamp=e.extra%t,this.transform(e,e.position)})),this.scroll.last=this.scroll.current,this.scroll.clamp=t}onResize(){o()(this.elements.items,(t=>{this.transform(t,0);const e=(0,l.getOffset)(t);t.extra=0,t.height=e.height,t.offset=e.top,t.position=0})),this.height=this.elements.items[0].getBoundingClientRect().height,this.heightTotal=this.elements.list.getBoundingClientRect().height,this.scroll={ease:.1,position:0,current:0,target:0,last:0}}}},"./app/pages/Home/index.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>i});var s=r("./app/classes/Page.js"),n=r("./app/pages/Home/Titles.js");r("./app/animations/Link.js"),r("./app/utils/dom.js");const i=class extends s.default{constructor(){super({id:"home",classes:{active:"home--active"},element:".home",elements:{wrapper:".home__wrapper",navigation:document.querySelector(".navigation"),link:".home__link",list:".home__titles",items:".home__titles__text__pair",titles:".home__titles__title__text"}})}create(){super.create(),this.titles=new n.default({element:document.body,elements:{list:this.elements.list,items:this.elements.items,titles:this.elements.titles}}),this.titles.enable()}async show(t){return this.element.classList.add(this.classes.active),super.show(t)}async hide(t){return this.element.classList.remove(this.classes.active),super.hide(t)}onResize(){super.onResize(),this.titles.onResize()}onTouchDown(t){this.titles.onTouchDown(t)}onTouchMove(t){this.titles.onTouchMove(t)}onTouchUp(t){this.titles.onTouchUp(t)}onWheel(t){this.titles.onWheel(t)}update(){super.update(),this.titles.update()}destroy(){super.destroy()}}},"./app/utils/CustomEase.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{CustomEase:()=>d,default:()=>d});var s=r("./node_modules/gsap/utils/paths.js");let n,i,o=()=>n||"undefined"!=typeof window&&(n=window.gsap)&&n.registerPlugin&&n,a=()=>{n=o(),n?(n.registerEase("_CE",d.create),i=1):console.warn("Please gsap.registerPlugin(CustomEase)")},l=t=>~~(1e3*t+(t<0?-.5:.5))/1e3,u=/[-+=\.]*\d+[\.e\-\+]*\d*[e\-\+]*\d*/gi,h=/[cLlsSaAhHvVtTqQ]/g,c=function(t,e,r,s,n,i,o,a,l,u,h){let d,p=(t+r)/2,f=(e+s)/2,m=(r+n)/2,g=(s+i)/2,v=(n+o)/2,_=(i+a)/2,y=(p+m)/2,b=(f+g)/2,w=(m+v)/2,x=(g+_)/2,j=(y+w)/2,E=(b+x)/2,T=o-t,C=a-e,A=Math.abs((r-o)*C-(s-a)*T),S=Math.abs((n-o)*C-(i-a)*T);return u||(u=[{x:t,y:e},{x:o,y:a}],h=1),u.splice(h||u.length-1,0,{x:j,y:E}),(A+S)*(A+S)>l*(T*T+C*C)&&(d=u.length,c(t,e,p,f,y,b,j,E,l,u,h),c(j,E,w,x,v,_,o,a,l,u,h+1+(u.length-d))),u};class d{constructor(t,e,r){i||a(),this.id=t,this.setData(e,r)}setData(t,e){e=e||{};let r,i,o,a,l,d,p,f,m,g=(t=t||"0,0,1,1").match(u),v=1,_=[],y=[],b=e.precision||1,w=b<=1;if(this.data=t,(h.test(t)||~t.indexOf("M")&&t.indexOf("C")<0)&&(g=(0,s.stringToRawPath)(t)[0]),r=g.length,4===r)g.unshift(0,0),g.push(1,1),r=8;else if((r-2)%6)throw"Invalid CustomEase";for(0==+g[0]&&1==+g[r-2]||((t,e,r)=>{r||0===r||(r=Math.max(+t[t.length-1],+t[1]));let s,n=-1*+t[0],i=-r,o=t.length,a=1/(+t[o-2]+n),l=-e||(Math.abs(+t[o-1]-+t[1])<.01*(+t[o-2]-+t[0])?(t=>{let e,r=t.length,s=1e20;for(e=1;e<r;e+=6)+t[e]<s&&(s=+t[e]);return s})(t)+i:+t[o-1]+i);for(l=l?1/l:-a,s=0;s<o;s+=2)t[s]=(+t[s]+n)*a,t[s+1]=(+t[s+1]+i)*l})(g,e.height,e.originY),this.segment=g,a=2;a<r;a+=6)i={x:+g[a-2],y:+g[a-1]},o={x:+g[a+4],y:+g[a+5]},_.push(i,o),c(i.x,i.y,+g[a],+g[a+1],+g[a+2],+g[a+3],o.x,o.y,1/(2e5*b),_,_.length-1);for(r=_.length,a=0;a<r;a++)p=_[a],f=_[a-1]||p,(p.x>f.x||f.y!==p.y&&f.x===p.x||p===f)&&p.x<=1?(f.cx=p.x-f.x,f.cy=p.y-f.y,f.n=p,f.nx=p.x,w&&a>1&&Math.abs(f.cy/f.cx-_[a-2].cy/_[a-2].cx)>2&&(w=0),f.cx<v&&(f.cx?v=f.cx:(f.cx=.001,a===r-1&&(f.x-=.001,v=Math.min(v,.001),w=0)))):(_.splice(a--,1),r--);if(r=1/v+1|0,l=1/r,d=0,p=_[0],w){for(a=0;a<r;a++)m=a*l,p.nx<m&&(p=_[++d]),i=p.y+(m-p.x)/p.cx*p.cy,y[a]={x:m,cx:l,y:i,cy:0,nx:9},a&&(y[a-1].cy=i-y[a-1].y);y[r-1].cy=_[_.length-1].y-i}else{for(a=0;a<r;a++)p.nx<a*l&&(p=_[++d]),y[a]=p;d<_.length-1&&(y[a-1]=_[_.length-2])}return this.ease=t=>{let e=y[t*r|0]||y[r-1];return e.nx<t&&(e=e.n),e.y+(t-e.x)/e.cx*e.cy},this.ease.custom=this,this.id&&n.registerEase(this.id,this.ease),this}getSVGData(t){return d.getSVGData(this,t)}static create(t,e,r){return new d(t,e,r).ease}static register(t){n=t,a()}static get(t){return n.parseEase(t)}static getSVGData(t,e){let r,i,o,a,u,h,c,p,f,m,g=(e=e||{}).width||100,v=e.height||100,_=e.x||0,y=(e.y||0)+v,b=n.utils.toArray(e.path)[0];if(e.invert&&(v=-v,y=0),"string"==typeof t&&(t=n.parseEase(t)),t.custom&&(t=t.custom),t instanceof d)r=(0,s.rawPathToString)((0,s.transformRawPath)([t.segment],g,0,0,-v,_,y));else{for(r=[_,y],c=Math.max(5,200*(e.precision||1)),a=1/c,c+=2,p=5/c,f=l(_+a*g),m=l(y+t(a)*-v),i=(m-y)/(f-_),o=2;o<c;o++)u=l(_+o*a*g),h=l(y+t(o*a)*-v),(Math.abs((h-m)/(u-f)-i)>p||o===c-1)&&(r.push(f,m),i=(h-m)/(u-f)),f=u,m=h;r="M"+r.join(",")}return b&&b.setAttribute("d",r),r}}o()&&n.registerPlugin(d),d.version="3.5.1"},"./app/utils/breakpoints.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{BREAKPOINT_TABLET:()=>s,BREAKPOINT_PHONE:()=>n});const s=1024,n=768},"./app/utils/colors.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{COLOR_BRIGHT_GRAY:()=>s,COLOR_QUARTER_SPANISH_WHITE:()=>n});const s="#37384C",n="#F9F1E7"},"./app/utils/dom.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{findAncestor:()=>i,getOffset:()=>o,getIndex:()=>a,mapEach:()=>l,easing:()=>u});var s=r("./node_modules/lodash/map.js"),n=r.n(s);const i=(t,e)=>{for(;(t=t.parentElement)&&!(t.matches||t.matchesSelector).call(t,e);)return t},o=(t,e=0)=>{const r=t.getBoundingClientRect();return{bottom:r.bottom,height:r.height,left:r.left,top:r.top+e,width:r.width}};function a(t){let e=0;for(;t=t.previousElementSibling;)e++;return e}function l(t,e){return t instanceof window.HTMLElement?[e(t)]:n()(t,e)}const u="cubic-bezier(0.19, 1, 0.22, 1)"},"./app/utils/easings.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{DEFAULT:()=>i,CSS:()=>o});var s=r("./node_modules/gsap/index.js"),n=r("./app/utils/CustomEase.js");s.default.registerPlugin(n.default);const i=n.default.create("default","0.77, 0, 0.175, 1"),o="cubic-bezier(0.77, 0, 0.175, 1)"},"./app/utils/math.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{lerp:()=>n,clamp:()=>i,random:()=>o,map:()=>a});var s=r("./node_modules/gsap/index.js");function n(t,e,r){return s.default.utils.interpolate(t,e,r)}function i(t,e,r){return s.default.utils.clamp(t,e,r)}function o(t,e){return s.default.utils.random(t,e)}function a(t,e,r,n,i){return s.default.utils.mapRange(e,r,n,i,t)}},"./app/utils/text.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{split:()=>i,calculate:()=>o});var s=r("./node_modules/lodash/each.js"),n=r.n(s);function i({element:t,expression:e=" ",append:r=!0}){const s=function(t,e){const r=t.split("<br>");let s=[];return n()(r,((t,r)=>{r>0&&s.push("<br>"),s=s.concat(t.split(e));let i=!1,o="";const a=[];n()(s,(t=>{i||!t.includes("<a")&&!t.includes("<strong")||(o="",i=!0),i&&(o+=` ${t}`),i&&(t.includes("/a>")||t.includes("/strong>"))&&(a.push(o),o=""),i||""!==o||a.push(t),i&&(t.includes("/a>")||t.includes("/strong>"))&&(i=!1)})),s=a})),s}(t.innerHTML.toString().trim(),e);let i="";n()(s,(t=>{if(t.indexOf("<br>")>-1){const e=t.split("<br>");n()(e,((t,e)=>{i+=e>0?"<br>"+a(t):a(t)}))}else i+=a(t)})),t.innerHTML=i;const o=t.querySelectorAll("span");return r&&n()(o,(t=>{const e=1===t.textContent.length,r=""!==t.innerHTML.trim(),s="&"!==t.textContent,n="-"!==t.textContent;e&&r&&s&&n&&(t.innerHTML=`${t.textContent}&nbsp;`)})),o}function o(t){const e=[];let r=[],s=t[0].offsetTop;return n()(t,((n,i)=>{n.offsetTop===s&&r.push(n),n.offsetTop!==s&&(e.push(r),r=[],r.push(n),s=n.offsetTop),i+1===t.length&&e.push(r)})),e}function a(t){return""===t?t:" "===t?"&nbsp;":"<br>"===(t=t.trim())?"<br>":`<span>${t}</span>`+(t.length>1?" ":"")}},"./node_modules/ansi-html/index.js":t=>{"use strict";t.exports=o;var e=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,r={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},s={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},n={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},i={23:"</i>",24:"</u>",29:"</del>"};function o(t){if(!e.test(t))return t;var r=[],s=t.replace(/\033\[(\d+)*m/g,(function(t,e){var s=n[e];if(s)return~r.indexOf(e)?(r.pop(),"</span>"):(r.push(e),"<"===s[0]?s:'<span style="'+s+';">');var o=i[e];return o?(r.pop(),o):""})),o=r.length;return o>0&&(s+=Array(o+1).join("</span>")),s}function a(t){for(var e in n[0]="font-weight:normal;opacity:1;color:#"+t.reset[0]+";background:#"+t.reset[1],n[7]="color:#"+t.reset[1]+";background:#"+t.reset[0],n[90]="color:#"+t.darkgrey,s){var r=t[s[e]]||"000";n[e]="color:#"+r,e=parseInt(e),n[(e+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(t){i[t]="</span>"})),o.setColors=function(t){if("object"!=typeof t)throw new Error("`colors` parameter must be an Object.");var e={};for(var s in r){var n=t.hasOwnProperty(s)?t[s]:null;if(n){if("reset"===s){if("string"==typeof n&&(n=[n]),!Array.isArray(n)||0===n.length||n.some((function(t){return"string"!=typeof t})))throw new Error("The value of `"+s+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var i=r[s];n[0]||(n[0]=i[0]),1!==n.length&&n[1]||(n=[n[0]]).push(i[1]),n=n.slice(0,2)}else if("string"!=typeof n)throw new Error("The value of `"+s+"` property must be a hex string, e.g.: FF0000");e[s]=n}else e[s]=r[s]}a(e)},o.reset=function(){a(r)},o.tags={},Object.defineProperty?(Object.defineProperty(o.tags,"open",{get:function(){return n}}),Object.defineProperty(o.tags,"close",{get:function(){return i}})):(o.tags.open=n,o.tags.close=i),o.reset()},"./node_modules/auto-bind/index.js":t=>{"use strict";t.exports=(t,{include:e,exclude:r}={})=>{const s=t=>{const s=e=>"string"==typeof e?t===e:e.test(t);return e?e.some(s):!r||!r.some(s)};for(const[e,r]of(t=>{const e=new Set;do{for(const r of Reflect.ownKeys(t))e.add([t,r])}while((t=Reflect.getPrototypeOf(t))&&t!==Object.prototype);return e})(t.constructor.prototype)){if("constructor"===r||!s(r))continue;const n=Reflect.getOwnPropertyDescriptor(e,r);n&&"function"==typeof n.value&&(t[r]=t[r].bind(t))}return t}},"./node_modules/events/events.js":t=>{"use strict";var e,r="object"==typeof Reflect?Reflect:null,s=r&&"function"==typeof r.apply?r.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};e=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var n=Number.isNaN||function(t){return t!=t};function i(){i.init.call(this)}t.exports=i,t.exports.once=function(t,e){return new Promise((function(r,s){function n(r){t.removeListener(e,i),s(r)}function i(){"function"==typeof t.removeListener&&t.removeListener("error",n),r([].slice.call(arguments))}m(t,e,i,{once:!0}),"error"!==e&&function(t,e,r){"function"==typeof t.on&&m(t,"error",e,r)}(t,n,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function a(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function l(t){return void 0===t._maxListeners?i.defaultMaxListeners:t._maxListeners}function u(t,e,r,s){var n,i,o,u;if(a(r),void 0===(i=t._events)?(i=t._events=Object.create(null),t._eventsCount=0):(void 0!==i.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),i=t._events),o=i[e]),void 0===o)o=i[e]=r,++t._eventsCount;else if("function"==typeof o?o=i[e]=s?[r,o]:[o,r]:s?o.unshift(r):o.push(r),(n=l(t))>0&&o.length>n&&!o.warned){o.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=t,h.type=e,h.count=o.length,u=h,console&&console.warn&&console.warn(u)}return t}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function c(t,e,r){var s={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},n=h.bind(s);return n.listener=r,s.wrapFn=n,n}function d(t,e,r){var s=t._events;if(void 0===s)return[];var n=s[e];return void 0===n?[]:"function"==typeof n?r?[n.listener||n]:[n]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(n):f(n,n.length)}function p(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(t,e){for(var r=new Array(e),s=0;s<e;++s)r[s]=t[s];return r}function m(t,e,r,s){if("function"==typeof t.on)s.once?t.once(e,r):t.on(e,r);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function n(i){s.once&&t.removeEventListener(e,n),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(t){if("number"!=typeof t||t<0||n(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");o=t}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||n(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var n="error"===t,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=i[t];if(void 0===l)return!1;if("function"==typeof l)s(l,this,e);else{var u=l.length,h=f(l,u);for(r=0;r<u;++r)s(h[r],this,e)}return!0},i.prototype.addListener=function(t,e){return u(this,t,e,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(t,e){return u(this,t,e,!0)},i.prototype.once=function(t,e){return a(e),this.on(t,c(this,t,e)),this},i.prototype.prependOnceListener=function(t,e){return a(e),this.prependListener(t,c(this,t,e)),this},i.prototype.removeListener=function(t,e){var r,s,n,i,o;if(a(e),void 0===(s=this._events))return this;if(void 0===(r=s[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete s[t],s.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(n=-1,i=r.length-1;i>=0;i--)if(r[i]===e||r[i].listener===e){o=r[i].listener,n=i;break}if(n<0)return this;0===n?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,n),1===r.length&&(s[t]=r[0]),void 0!==s.removeListener&&this.emit("removeListener",t,o||e)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(t){var e,r,s;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var n,i=Object.keys(r);for(s=0;s<i.length;++s)"removeListener"!==(n=i[s])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(s=e.length-1;s>=0;s--)this.removeListener(t,e[s]);return this},i.prototype.listeners=function(t){return d(this,t,!0)},i.prototype.rawListeners=function(t){return d(this,t,!1)},i.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):p.call(t,e)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{CSSPlugin:()=>_t,default:()=>_t,_getBBox:()=>z,_createElement:()=>P,checkPrefix:()=>N});var s,n,i,o,a,l,u,h=r("./node_modules/gsap/gsap-core.js"),c={},d=180/Math.PI,p=Math.PI/180,f=Math.atan2,m=/([A-Z])/g,g=/(?:left|right|width|margin|padding|x)/i,v=/[\s,\(]\S/,_={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},y=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},b=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},w=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},x=function(t,e){var r=e.s+e.c*t;e.set(e.t,e.p,~~(r+(r<0?-.5:.5))+e.u,e)},j=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},E=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},T=function(t,e,r){return t.style[e]=r},C=function(t,e,r){return t.style.setProperty(e,r)},A=function(t,e,r){return t._gsap[e]=r},S=function(t,e,r){return t._gsap.scaleX=t._gsap.scaleY=r},M=function(t,e,r,s,n){var i=t._gsap;i.scaleX=i.scaleY=r,i.renderTransform(n,i)},O=function(t,e,r,s,n){var i=t._gsap;i[e]=r,i.renderTransform(n,i)},L="transform",k=L+"Origin",P=function(t,e){var r=n.createElementNS?n.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):n.createElement(t);return r.style?r:n.createElement(t)},R=function t(e,r,s){var n=getComputedStyle(e);return n[r]||n.getPropertyValue(r.replace(m,"-$1").toLowerCase())||n.getPropertyValue(r)||!s&&t(e,N(r)||r,1)||""},D="O,Moz,ms,Ms,Webkit".split(","),N=function(t,e,r){var s=(e||a).style,n=5;if(t in s&&!r)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);n--&&!(D[n]+t in s););return n<0?null:(3===n?"ms":n>=0?D[n]:"")+t},F=function(){"undefined"!=typeof window&&window.document&&(s=window,n=s.document,i=n.documentElement,a=P("div")||{style:{}},P("div"),L=N(L),k=L+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",u=!!N("perspective"),o=1)},q=function t(e){var r,s=P("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(i.appendChild(s),s.appendChild(this),this.style.display="block",e)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(r=this._gsapBBox());return n&&(o?n.insertBefore(this,o):n.appendChild(this)),i.removeChild(s),this.style.cssText=a,r},I=function(t,e){for(var r=e.length;r--;)if(t.hasAttribute(e[r]))return t.getAttribute(e[r])},z=function(t){var e;try{e=t.getBBox()}catch(r){e=q.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===q||(e=q.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+I(t,["x","cx","x1"])||0,y:+I(t,["y","cy","y1"])||0,width:0,height:0}},U=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!z(t))},B=function(t,e){if(e){var r=t.style;e in c&&e!==k&&(e=L),r.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty(e.replace(m,"-$1").toLowerCase())):r.removeAttribute(e)}},V=function(t,e,r,s,n,i){var o=new h.PropTween(t._pt,e,r,0,1,i?E:j);return t._pt=o,o.b=s,o.e=n,t._props.push(r),o},G={deg:1,rad:1,turn:1},H=function t(e,r,s,i){var o,l,u,d,p=parseFloat(s)||0,f=(s+"").trim().substr((p+"").length)||"px",m=a.style,v=g.test(r),_="svg"===e.tagName.toLowerCase(),y=(_?"client":"offset")+(v?"Width":"Height"),b=100,w="px"===i,x="%"===i;return i===f||!p||G[i]||G[f]?p:("px"!==f&&!w&&(p=t(e,r,s,"px")),d=e.getCTM&&U(e),!x&&"%"!==f||!c[r]&&!~r.indexOf("adius")?(m[v?"width":"height"]=b+(w?f:i),l=~r.indexOf("adius")||"em"===i&&e.appendChild&&!_?e:e.parentNode,d&&(l=(e.ownerSVGElement||{}).parentNode),l&&l!==n&&l.appendChild||(l=n.body),(u=l._gsap)&&x&&u.width&&v&&u.time===h._ticker.time?(0,h._round)(p/u.width*b):((x||"%"===f)&&(m.position=R(e,"position")),l===e&&(m.position="static"),l.appendChild(a),o=a[y],l.removeChild(a),m.position="absolute",v&&x&&((u=(0,h._getCache)(l)).time=h._ticker.time,u.width=l[y]),(0,h._round)(w?o*p/b:o&&p?b/o*p:0))):(o=d?e.getBBox()[v?"width":"height"]:e[y],(0,h._round)(x?p/o*b:p/100*o)))},W=function(t,e,r,s){var n;return o||F(),e in _&&"transform"!==e&&~(e=_[e]).indexOf(",")&&(e=e.split(",")[0]),c[e]&&"transform"!==e?(n=st(t,s),n="transformOrigin"!==e?n[e]:n.svg?n.origin:nt(R(t,k))+" "+n.zOrigin+"px"):(!(n=t.style[e])||"auto"===n||s||~(n+"").indexOf("calc("))&&(n=Z[e]&&Z[e](t,e,r)||R(t,e)||(0,h._getProperty)(t,e)||("opacity"===e?1:0)),r&&!~(n+"").trim().indexOf(" ")?H(t,e,n,r)+r:n},Y=function(t,e,r,s){if(!r||"none"===r){var n=N(e,t,1),i=n&&R(t,n,1);i&&i!==r?(e=n,r=i):"borderColor"===e&&(r=R(t,"borderTopColor"))}var o,a,l,u,c,d,p,f,m,g,v,_,y=new h.PropTween(this._pt,t.style,e,0,1,h._renderComplexString),b=0,w=0;if(y.b=r,y.e=s,r+="","auto"===(s+="")&&(t.style[e]=s,s=R(t,e)||s,t.style[e]=r),o=[r,s],(0,h._colorStringFilter)(o),s=o[1],l=(r=o[0]).match(h._numWithUnitExp)||[],(s.match(h._numWithUnitExp)||[]).length){for(;a=h._numWithUnitExp.exec(s);)p=a[0],m=s.substring(b,a.index),c?c=(c+1)%5:"rgba("!==m.substr(-5)&&"hsla("!==m.substr(-5)||(c=1),p!==(d=l[w++]||"")&&(u=parseFloat(d)||0,v=d.substr((u+"").length),(_="="===p.charAt(1)?+(p.charAt(0)+"1"):0)&&(p=p.substr(2)),f=parseFloat(p),g=p.substr((f+"").length),b=h._numWithUnitExp.lastIndex-g.length,g||(g=g||h._config.units[e]||v,b===s.length&&(s+=g,y.e+=g)),v!==g&&(u=H(t,e,d,g)||0),y._pt={_next:y._pt,p:m||1===w?m:",",s:u,c:_?_*f:f-u,m:c&&c<4||"zIndex"===e?Math.round:0});y.c=b<s.length?s.substring(b,s.length):""}else y.r="display"===e&&"none"===s?E:j;return h._relExp.test(s)&&(y.e=0),this._pt=y,y},X={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},$=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var r,s,n,i=e.t,o=i.style,a=e.u,l=i._gsap;if("all"===a||!0===a)o.cssText="",s=1;else for(n=(a=a.split(",")).length;--n>-1;)r=a[n],c[r]&&(s=1,r="transformOrigin"===r?k:L),B(i,r);s&&(B(i,L),l&&(l.svg&&i.removeAttribute("transform"),st(i,1),l.uncache=1))}},Z={clearProps:function(t,e,r,s,n){if("isFromStart"!==n.data){var i=t._pt=new h.PropTween(t._pt,e,r,0,0,$);return i.u=s,i.pr=-10,i.tween=n,t._props.push(r),1}}},Q=[1,0,0,1,0,0],J={},K=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},tt=function(t){var e=R(t,L);return K(e)?Q:e.substr(7).match(h._numExp).map(h._round)},et=function(t,e){var r,s,n,o,a=t._gsap||(0,h._getCache)(t),l=t.style,u=tt(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(n=t.transform.baseVal.consolidate().matrix).a,n.b,n.c,n.d,n.e,n.f]).join(",")?Q:u:(u!==Q||t.offsetParent||t===i||a.svg||(n=l.display,l.display="block",(r=t.parentNode)&&t.offsetParent||(o=1,s=t.nextSibling,i.appendChild(t)),u=tt(t),n?l.display=n:B(t,"display"),o&&(s?r.insertBefore(t,s):r?r.appendChild(t):i.removeChild(t))),e&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},rt=function(t,e,r,s,n,i){var o,a,l,u=t._gsap,h=n||et(t,!0),c=u.xOrigin||0,d=u.yOrigin||0,p=u.xOffset||0,f=u.yOffset||0,m=h[0],g=h[1],v=h[2],_=h[3],y=h[4],b=h[5],w=e.split(" "),x=parseFloat(w[0])||0,j=parseFloat(w[1])||0;r?h!==Q&&(a=m*_-g*v)&&(l=x*(-g/a)+j*(m/a)-(m*b-g*y)/a,x=x*(_/a)+j*(-v/a)+(v*b-_*y)/a,j=l):(x=(o=z(t)).x+(~w[0].indexOf("%")?x/100*o.width:x),j=o.y+(~(w[1]||w[0]).indexOf("%")?j/100*o.height:j)),s||!1!==s&&u.smooth?(y=x-c,b=j-d,u.xOffset=p+(y*m+b*v)-y,u.yOffset=f+(y*g+b*_)-b):u.xOffset=u.yOffset=0,u.xOrigin=x,u.yOrigin=j,u.smooth=!!s,u.origin=e,u.originIsAbsolute=!!r,t.style[k]="0px 0px",i&&(V(i,u,"xOrigin",c,x),V(i,u,"yOrigin",d,j),V(i,u,"xOffset",p,u.xOffset),V(i,u,"yOffset",f,u.yOffset)),t.setAttribute("data-svg-origin",x+" "+j)},st=function(t,e){var r=t._gsap||new h.GSCache(t);if("x"in r&&!e&&!r.uncache)return r;var s,n,i,o,a,l,c,m,g,v,_,y,b,w,x,j,E,T,C,A,S,M,O,P,D,N,F,q,I,z,B,V,G=t.style,H=r.scaleX<0,W="px",Y="deg",X=R(t,k)||"0";return s=n=i=l=c=m=g=v=_=0,o=a=1,r.svg=!(!t.getCTM||!U(t)),w=et(t,r.svg),r.svg&&(P=(!r.uncache||"0px 0px"===X)&&!e&&t.getAttribute("data-svg-origin"),rt(t,P||X,!!P||r.originIsAbsolute,!1!==r.smooth,w)),y=r.xOrigin||0,b=r.yOrigin||0,w!==Q&&(T=w[0],C=w[1],A=w[2],S=w[3],s=M=w[4],n=O=w[5],6===w.length?(o=Math.sqrt(T*T+C*C),a=Math.sqrt(S*S+A*A),l=T||C?f(C,T)*d:0,(g=A||S?f(A,S)*d+l:0)&&(a*=Math.abs(Math.cos(g*p))),r.svg&&(s-=y-(y*T+b*A),n-=b-(y*C+b*S))):(V=w[6],z=w[7],F=w[8],q=w[9],I=w[10],B=w[11],s=w[12],n=w[13],i=w[14],c=(x=f(V,I))*d,x&&(P=M*(j=Math.cos(-x))+F*(E=Math.sin(-x)),D=O*j+q*E,N=V*j+I*E,F=M*-E+F*j,q=O*-E+q*j,I=V*-E+I*j,B=z*-E+B*j,M=P,O=D,V=N),m=(x=f(-A,I))*d,x&&(j=Math.cos(-x),B=S*(E=Math.sin(-x))+B*j,T=P=T*j-F*E,C=D=C*j-q*E,A=N=A*j-I*E),l=(x=f(C,T))*d,x&&(P=T*(j=Math.cos(x))+C*(E=Math.sin(x)),D=M*j+O*E,C=C*j-T*E,O=O*j-M*E,T=P,M=D),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,m=180-m),o=(0,h._round)(Math.sqrt(T*T+C*C+A*A)),a=(0,h._round)(Math.sqrt(O*O+V*V)),x=f(M,O),g=Math.abs(x)>2e-4?x*d:0,_=B?1/(B<0?-B:B):0),r.svg&&(P=t.getAttribute("transform"),r.forceCSS=t.setAttribute("transform","")||!K(R(t,L)),P&&t.setAttribute("transform",P))),Math.abs(g)>90&&Math.abs(g)<270&&(H?(o*=-1,g+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,g+=g<=0?180:-180)),r.x=s-((r.xPercent=s&&(r.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-s)?-50:0)))?t.offsetWidth*r.xPercent/100:0)+W,r.y=n-((r.yPercent=n&&(r.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-n)?-50:0)))?t.offsetHeight*r.yPercent/100:0)+W,r.z=i+W,r.scaleX=(0,h._round)(o),r.scaleY=(0,h._round)(a),r.rotation=(0,h._round)(l)+Y,r.rotationX=(0,h._round)(c)+Y,r.rotationY=(0,h._round)(m)+Y,r.skewX=g+Y,r.skewY=v+Y,r.transformPerspective=_+W,(r.zOrigin=parseFloat(X.split(" ")[2])||0)&&(G[k]=nt(X)),r.xOffset=r.yOffset=0,r.force3D=h._config.force3D,r.renderTransform=r.svg?ct:u?ht:ot,r.uncache=0,r},nt=function(t){return(t=t.split(" "))[0]+" "+t[1]},it=function(t,e,r){var s=(0,h.getUnit)(e);return(0,h._round)(parseFloat(e)+parseFloat(H(t,"x",r+"px",s)))+s},ot=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,ht(t,e)},at="0deg",lt="0px",ut=") ",ht=function(t,e){var r=e||this,s=r.xPercent,n=r.yPercent,i=r.x,o=r.y,a=r.z,l=r.rotation,u=r.rotationY,h=r.rotationX,c=r.skewX,d=r.skewY,f=r.scaleX,m=r.scaleY,g=r.transformPerspective,v=r.force3D,_=r.target,y=r.zOrigin,b="",w="auto"===v&&t&&1!==t||!0===v;if(y&&(h!==at||u!==at)){var x,j=parseFloat(u)*p,E=Math.sin(j),T=Math.cos(j);j=parseFloat(h)*p,x=Math.cos(j),i=it(_,i,E*x*-y),o=it(_,o,-Math.sin(j)*-y),a=it(_,a,T*x*-y+y)}g!==lt&&(b+="perspective("+g+ut),(s||n)&&(b+="translate("+s+"%, "+n+"%) "),(w||i!==lt||o!==lt||a!==lt)&&(b+=a!==lt||w?"translate3d("+i+", "+o+", "+a+") ":"translate("+i+", "+o+ut),l!==at&&(b+="rotate("+l+ut),u!==at&&(b+="rotateY("+u+ut),h!==at&&(b+="rotateX("+h+ut),c===at&&d===at||(b+="skew("+c+", "+d+ut),1===f&&1===m||(b+="scale("+f+", "+m+ut),_.style[L]=b||"translate(0, 0)"},ct=function(t,e){var r,s,n,i,o,a=e||this,l=a.xPercent,u=a.yPercent,c=a.x,d=a.y,f=a.rotation,m=a.skewX,g=a.skewY,v=a.scaleX,_=a.scaleY,y=a.target,b=a.xOrigin,w=a.yOrigin,x=a.xOffset,j=a.yOffset,E=a.forceCSS,T=parseFloat(c),C=parseFloat(d);f=parseFloat(f),m=parseFloat(m),(g=parseFloat(g))&&(m+=g=parseFloat(g),f+=g),f||m?(f*=p,m*=p,r=Math.cos(f)*v,s=Math.sin(f)*v,n=Math.sin(f-m)*-_,i=Math.cos(f-m)*_,m&&(g*=p,o=Math.tan(m-g),n*=o=Math.sqrt(1+o*o),i*=o,g&&(o=Math.tan(g),r*=o=Math.sqrt(1+o*o),s*=o)),r=(0,h._round)(r),s=(0,h._round)(s),n=(0,h._round)(n),i=(0,h._round)(i)):(r=v,i=_,s=n=0),(T&&!~(c+"").indexOf("px")||C&&!~(d+"").indexOf("px"))&&(T=H(y,"x",c,"px"),C=H(y,"y",d,"px")),(b||w||x||j)&&(T=(0,h._round)(T+b-(b*r+w*n)+x),C=(0,h._round)(C+w-(b*s+w*i)+j)),(l||u)&&(o=y.getBBox(),T=(0,h._round)(T+l/100*o.width),C=(0,h._round)(C+u/100*o.height)),o="matrix("+r+","+s+","+n+","+i+","+T+","+C+")",y.setAttribute("transform",o),E&&(y.style[L]=o)},dt=function(t,e,r,s,n,i){var o,a,l=360,u=(0,h._isString)(n),c=parseFloat(n)*(u&&~n.indexOf("rad")?d:1),p=i?c*i:c-s,f=s+p+"deg";return u&&("short"===(o=n.split("_")[1])&&(p%=l)!==p%180&&(p+=p<0?l:-360),"cw"===o&&p<0?p=(p+36e9)%l-~~(p/l)*l:"ccw"===o&&p>0&&(p=(p-36e9)%l-~~(p/l)*l)),t._pt=a=new h.PropTween(t._pt,e,r,s,p,b),a.e=f,a.u="deg",t._props.push(r),a},pt=function(t,e){for(var r in e)t[r]=e[r];return t},ft=function(t,e,r){var s,n,i,o,a,l,u,d=pt({},r._gsap),p=r.style;for(n in d.svg?(i=r.getAttribute("transform"),r.setAttribute("transform",""),p[L]=e,s=st(r,1),B(r,L),r.setAttribute("transform",i)):(i=getComputedStyle(r)[L],p[L]=e,s=st(r,1),p[L]=i),c)(i=d[n])!==(o=s[n])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(n)<0&&(a=(0,h.getUnit)(i)!==(u=(0,h.getUnit)(o))?H(r,n,i,u):parseFloat(i),l=parseFloat(o),t._pt=new h.PropTween(t._pt,s,n,a,l-a,y),t._pt.u=u||0,t._props.push(n));pt(s,d)};(0,h._forEachName)("padding,margin,Width,Radius",(function(t,e){var r="Top",s="Right",n="Bottom",i="Left",o=(e<3?[r,s,n,i]:[r+i,r+s,n+s,n+i]).map((function(r){return e<2?t+r:"border"+r+t}));Z[e>1?"border"+t:t]=function(t,e,r,s,n){var i,a;if(arguments.length<4)return i=o.map((function(e){return W(t,e,r)})),5===(a=i.join(" ")).split(i[0]).length?i[0]:a;i=(s+"").split(" "),a={},o.forEach((function(t,e){return a[t]=i[e]=i[e]||i[(e-1)/2|0]})),t.init(e,a,n)}}));var mt,gt,vt,_t={name:"css",register:F,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,r,s,n){var i,a,l,u,d,p,f,m,g,b,j,E,T,C,A,S,M,O,k,P=this._props,R=t.style,D=r.vars.startAt;for(f in o||F(),e)if("autoRound"!==f&&(a=e[f],!h._plugins[f]||!(0,h._checkPlugin)(f,e,r,s,t,n)))if(d=typeof a,p=Z[f],"function"===d&&(d=typeof(a=a.call(r,s,t,n))),"string"===d&&~a.indexOf("random(")&&(a=(0,h._replaceRandom)(a)),p)p(this,t,f,a,r)&&(A=1);else if("--"===f.substr(0,2))i=(getComputedStyle(t).getPropertyValue(f)+"").trim(),a+="",h._colorExp.lastIndex=0,h._colorExp.test(i)||(m=(0,h.getUnit)(i),g=(0,h.getUnit)(a)),g?m!==g&&(i=H(t,f,i,g)+g):m&&(a+=m),this.add(R,"setProperty",i,a,s,n,0,0,f),P.push(f);else if("undefined"!==d){if(D&&f in D?(i="function"==typeof D[f]?D[f].call(r,s,t,n):D[f],f in h._config.units&&!(0,h.getUnit)(i)&&(i+=h._config.units[f]),"="===(i+"").charAt(1)&&(i=W(t,f))):i=W(t,f),u=parseFloat(i),(b="string"===d&&"="===a.charAt(1)?+(a.charAt(0)+"1"):0)&&(a=a.substr(2)),l=parseFloat(a),f in _&&("autoAlpha"===f&&(1===u&&"hidden"===W(t,"visibility")&&l&&(u=0),V(this,R,"visibility",u?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=_[f]).indexOf(",")&&(f=f.split(",")[0])),j=f in c)if(E||((T=t._gsap).renderTransform&&!e.parseTransform||st(t,e.parseTransform),C=!1!==e.smoothOrigin&&T.smooth,(E=this._pt=new h.PropTween(this._pt,R,L,0,1,T.renderTransform,T,0,-1)).dep=1),"scale"===f)this._pt=new h.PropTween(this._pt,T,"scaleY",T.scaleY,(b?b*l:l-T.scaleY)||0),P.push("scaleY",f),f+="X";else{if("transformOrigin"===f){M=void 0,O=void 0,k=void 0,M=(S=a).split(" "),O=M[0],k=M[1]||"50%","top"!==O&&"bottom"!==O&&"left"!==k&&"right"!==k||(S=O,O=k,k=S),M[0]=X[O]||O,M[1]=X[k]||k,a=M.join(" "),T.svg?rt(t,a,0,C,0,this):((g=parseFloat(a.split(" ")[2])||0)!==T.zOrigin&&V(this,T,"zOrigin",T.zOrigin,g),V(this,R,f,nt(i),nt(a)));continue}if("svgOrigin"===f){rt(t,a,1,C,0,this);continue}if(f in J){dt(this,T,f,u,a,b);continue}if("smoothOrigin"===f){V(this,T,"smooth",T.smooth,a);continue}if("force3D"===f){T[f]=a;continue}if("transform"===f){ft(this,a,t);continue}}else f in R||(f=N(f)||f);if(j||(l||0===l)&&(u||0===u)&&!v.test(a)&&f in R)l||(l=0),(m=(i+"").substr((u+"").length))!==(g=(0,h.getUnit)(a)||(f in h._config.units?h._config.units[f]:m))&&(u=H(t,f,i,g)),this._pt=new h.PropTween(this._pt,j?T:R,f,u,b?b*l:l-u,j||"px"!==g&&"zIndex"!==f||!1===e.autoRound?y:x),this._pt.u=g||0,m!==g&&(this._pt.b=i,this._pt.r=w);else if(f in R)Y.call(this,t,f,i,a);else{if(!(f in t)){(0,h._missingPlugin)(f,a);continue}this.add(t,f,i||t[f],a,s,n)}P.push(f)}A&&(0,h._sortPropTweensByPriority)(this)},get:W,aliases:_,getSetter:function(t,e,r){var s=_[e];return s&&s.indexOf(",")<0&&(e=s),e in c&&e!==k&&(t._gsap.x||W(t,"x"))?r&&l===r?"scale"===e?S:A:(l=r||{})&&("scale"===e?M:O):t.style&&!(0,h._isUndefined)(t.style[e])?T:~e.indexOf("-")?C:(0,h._getSetter)(t,e)},core:{_removeProperty:B,_getMatrix:et}};h.gsap.utils.checkPrefix=N,mt="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",gt="rotation,rotationX,rotationY,skewX,skewY",vt=(0,h._forEachName)(mt+","+gt+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){c[t]=1})),(0,h._forEachName)(gt,(function(t){h._config.units[t]="deg",J[t]=1})),_[vt[13]]=mt+","+gt,(0,h._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");_[e[1]]=vt[e[0]]})),(0,h._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){h._config.units[t]="px"})),h.gsap.registerPlugin(_t)},"./node_modules/gsap/gsap-core.js":(t,e,r)=>{"use strict";function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function n(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}r.r(e),r.d(e,{GSCache:()=>Ke,Animation:()=>tr,Timeline:()=>er,Tween:()=>hr,PropTween:()=>Er,gsap:()=>Sr,Power0:()=>Mr,Power1:()=>Or,Power2:()=>Lr,Power3:()=>kr,Power4:()=>Pr,Linear:()=>Rr,Quad:()=>Dr,Cubic:()=>Nr,Quart:()=>Fr,Quint:()=>qr,Strong:()=>Ir,Elastic:()=>zr,Back:()=>Ur,SteppedEase:()=>Br,Bounce:()=>Vr,Sine:()=>Gr,Expo:()=>Hr,Circ:()=>Wr,TweenMax:()=>hr,TweenLite:()=>hr,TimelineMax:()=>er,TimelineLite:()=>er,default:()=>Sr,wrap:()=>xe,wrapYoyo:()=>je,distribute:()=>fe,random:()=>ve,snap:()=>ge,normalize:()=>be,getUnit:()=>oe,clamp:()=>ae,splitColor:()=>Re,toArray:()=>ce,selector:()=>de,mapRange:()=>Te,pipe:()=>_e,unitize:()=>ye,interpolate:()=>Ce,shuffle:()=>pe,_getProperty:()=>jt,_numExp:()=>tt,_numWithUnitExp:()=>et,_isString:()=>V,_isUndefined:()=>W,_renderComplexString:()=>_r,_relExp:()=>st,_setDefaults:()=>Lt,_removeLinkedListItem:()=>Ft,_forEachName:()=>Et,_sortPropTweensByPriority:()=>jr,_colorStringFilter:()=>Ie,_replaceRandom:()=>Ee,_checkPlugin:()=>ir,_plugins:()=>gt,_ticker:()=>ze,_config:()=>P,_roundModifier:()=>me,_round:()=>Tt,_missingPlugin:()=>ut,_getSetter:()=>mr,_getCache:()=>xt,_colorExp:()=>Fe});var i,o,a,l,u,h,c,d,p,f,m,g,v,_,y,b,w,x,j,E,T,C,A,S,M,O,L,k,P={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},R={duration:.5,overwrite:!1,delay:0},D=1e8,N=1e-8,F=2*Math.PI,q=F/4,I=0,z=Math.sqrt,U=Math.cos,B=Math.sin,V=function(t){return"string"==typeof t},G=function(t){return"function"==typeof t},H=function(t){return"number"==typeof t},W=function(t){return void 0===t},Y=function(t){return"object"==typeof t},X=function(t){return!1!==t},$=function(){return"undefined"!=typeof window},Z=function(t){return G(t)||V(t)},Q="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},J=Array.isArray,K=/(?:-?\.?\d|\.)+/gi,tt=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,et=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,rt=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,st=/[+-]=-?[.\d]+/,nt=/[^,'"\[\]\s]+/gi,it=/[\d.+\-=]+(?:e[-+]\d*)*/i,ot={},at={},lt=function(t){return(at=Pt(t,ot))&&Sr},ut=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},ht=function(t,e){return!e&&console.warn(t)},ct=function(t,e){return t&&(ot[t]=e)&&at&&(at[t]=e)||ot},dt=function(){return 0},pt={},ft=[],mt={},gt={},vt={},_t=30,yt=[],bt="",wt=function(t){var e,r,s=t[0];if(Y(s)||G(s)||(t=[t]),!(e=(s._gsap||{}).harness)){for(r=yt.length;r--&&!yt[r].targetTest(s););e=yt[r]}for(r=t.length;r--;)t[r]&&(t[r]._gsap||(t[r]._gsap=new Ke(t[r],e)))||t.splice(r,1);return t},xt=function(t){return t._gsap||wt(ce(t))[0]._gsap},jt=function(t,e,r){return(r=t[e])&&G(r)?t[e]():W(r)&&t.getAttribute&&t.getAttribute(e)||r},Et=function(t,e){return(t=t.split(",")).forEach(e)||t},Tt=function(t){return Math.round(1e5*t)/1e5||0},Ct=function(t,e){for(var r=e.length,s=0;t.indexOf(e[s])<0&&++s<r;);return s<r},At=function(){var t,e,r=ft.length,s=ft.slice(0);for(mt={},ft.length=0,t=0;t<r;t++)(e=s[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},St=function(t,e,r,s){ft.length&&At(),t.render(e,r,s),ft.length&&At()},Mt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(nt).length<2?e:V(t)?t.trim():t},Ot=function(t){return t},Lt=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},kt=function(t,e){for(var r in e)r in t||"duration"===r||"ease"===r||(t[r]=e[r])},Pt=function(t,e){for(var r in e)t[r]=e[r];return t},Rt=function t(e,r){for(var s in r)"__proto__"!==s&&"constructor"!==s&&"prototype"!==s&&(e[s]=Y(r[s])?t(e[s]||(e[s]={}),r[s]):r[s]);return e},Dt=function(t,e){var r,s={};for(r in t)r in e||(s[r]=t[r]);return s},Nt=function(t){var e=t.parent||o,r=t.keyframes?kt:Lt;if(X(t.inherit))for(;e;)r(t,e.vars.defaults),e=e.parent||e._dp;return t},Ft=function(t,e,r,s){void 0===r&&(r="_first"),void 0===s&&(s="_last");var n=e._prev,i=e._next;n?n._next=i:t[r]===e&&(t[r]=i),i?i._prev=n:t[s]===e&&(t[s]=n),e._next=e._prev=e.parent=null},qt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},It=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var r=t;r;)r._dirty=1,r=r.parent;return t},zt=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},Ut=function t(e){return!e||e._ts&&t(e.parent)},Bt=function(t){return t._repeat?Vt(t._tTime,t=t.duration()+t._rDelay)*t:0},Vt=function(t,e){var r=Math.floor(t/=e);return t&&r===t?r-1:r},Gt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},Ht=function(t){return t._end=Tt(t._start+(t._tDur/Math.abs(t._ts||t._rts||N)||0))},Wt=function(t,e){var r=t._dp;return r&&r.smoothChildTiming&&t._ts&&(t._start=Tt(r._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),Ht(t),r._dirty||It(r,t)),t},Yt=function(t,e){var r;if((e._time||e._initted&&!e._dur)&&(r=Gt(t.rawTime(),e),(!e._dur||ie(0,e.totalDuration(),r)-e._tTime>N)&&e.render(r,!0)),It(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(r=t;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;t._zTime=-1e-8}},Xt=function(t,e,r,s){return e.parent&&qt(e),e._start=Tt((H(r)?r:r||t!==o?re(t,r,e):t._time)+e._delay),e._end=Tt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),function(t,e,r,s,n){void 0===r&&(r="_first"),void 0===s&&(s="_last");var i,o=t[s];if(n)for(i=e[n];o&&o[n]>i;)o=o._prev;o?(e._next=o._next,o._next=e):(e._next=t[r],t[r]=e),e._next?e._next._prev=e:t[s]=e,e._prev=o,e.parent=e._dp=t}(t,e,"_first","_last",t._sort?"_start":0),Jt(e)||(t._recent=e),s||Yt(t,e),t},$t=function(t,e){return(ot.ScrollTrigger||ut("scrollTrigger",e))&&ot.ScrollTrigger.create(e,t)},Zt=function(t,e,r,s){return or(t,e),t._initted?!r&&t._pt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&c!==ze.frame?(ft.push(t),t._lazy=[e,s],1):void 0:1},Qt=function t(e){var r=e.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||t(r))},Jt=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Kt=function(t,e,r,s){var n=t._repeat,i=Tt(e)||0,o=t._tTime/t._tDur;return o&&!s&&(t._time*=i/t._dur),t._dur=i,t._tDur=n?n<0?1e10:Tt(i*(n+1)+t._rDelay*n):i,o&&!s?Wt(t,t._tTime=t._tDur*o):t.parent&&Ht(t),r||It(t.parent,t),t},te=function(t){return t instanceof er?It(t):Kt(t,t._dur)},ee={_start:0,endTime:dt,totalDuration:dt},re=function t(e,r,s){var n,i,o,a=e.labels,l=e._recent||ee,u=e.duration()>=D?l.endTime(!1):e._dur;return V(r)&&(isNaN(r)||r in a)?(i=r.charAt(0),o="%"===r.substr(-1),n=r.indexOf("="),"<"===i||">"===i?(n>=0&&(r=r.replace(/=/,"")),("<"===i?l._start:l.endTime(l._repeat>=0))+(parseFloat(r.substr(1))||0)*(o?(n<0?l:s).totalDuration()/100:1)):n<0?(r in a||(a[r]=u),a[r]):(i=parseFloat(r.charAt(n-1)+r.substr(n+1)),o&&s&&(i=i/100*(J(s)?s[0]:s).totalDuration()),n>1?t(e,r.substr(0,n-1),s)+i:u+i)):null==r?u:+r},se=function(t,e,r){var s,n,i=H(e[1]),o=(i?2:1)+(t<2?0:1),a=e[o];if(i&&(a.duration=e[1]),a.parent=r,t){for(s=a,n=r;n&&!("immediateRender"in s);)s=n.vars.defaults||{},n=X(n.vars.inherit)&&n.parent;a.immediateRender=X(s.immediateRender),t<2?a.runBackwards=1:a.startAt=e[o-1]}return new hr(e[0],a,e[o+1])},ne=function(t,e){return t||0===t?e(t):e},ie=function(t,e,r){return r<t?t:r>e?e:r},oe=function(t){if("string"!=typeof t)return"";var e=it.exec(t);return e?t.substr(e.index+e[0].length):""},ae=function(t,e,r){return ne(r,(function(r){return ie(t,e,r)}))},le=[].slice,ue=function(t,e){return t&&Y(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&Y(t[0]))&&!t.nodeType&&t!==a},he=function(t,e,r){return void 0===r&&(r=[]),t.forEach((function(t){var s;return V(t)&&!e||ue(t,1)?(s=r).push.apply(s,ce(t)):r.push(t)}))||r},ce=function(t,e,r){return!V(t)||r||!l&&Ue()?J(t)?he(t,r):ue(t)?le.call(t,0):t?[t]:[]:le.call((e||u).querySelectorAll(t),0)},de=function(t){return t=ce(t)[0]||ht("Invalid scope")||{},function(e){var r=t.current||t.nativeElement||t;return ce(e,r.querySelectorAll?r:r===t?ht("Invalid scope")||u.createElement("div"):t)}},pe=function(t){return t.sort((function(){return.5-Math.random()}))},fe=function(t){if(G(t))return t;var e=Y(t)?t:{each:t},r=Xe(e.ease),s=e.from||0,n=parseFloat(e.base)||0,i={},o=s>0&&s<1,a=isNaN(s)||o,l=e.axis,u=s,h=s;return V(s)?u=h={center:.5,edges:.5,end:1}[s]||0:!o&&a&&(u=s[0],h=s[1]),function(t,o,c){var d,p,f,m,g,v,_,y,b,w=(c||e).length,x=i[w];if(!x){if(!(b="auto"===e.grid?0:(e.grid||[1,D])[1])){for(_=-D;_<(_=c[b++].getBoundingClientRect().left)&&b<w;);b--}for(x=i[w]=[],d=a?Math.min(b,w)*u-.5:s%b,p=a?w*h/b-.5:s/b|0,_=0,y=D,v=0;v<w;v++)f=v%b-d,m=p-(v/b|0),x[v]=g=l?Math.abs("y"===l?m:f):z(f*f+m*m),g>_&&(_=g),g<y&&(y=g);"random"===s&&pe(x),x.max=_-y,x.min=y,x.v=w=(parseFloat(e.amount)||parseFloat(e.each)*(b>w?w-1:l?"y"===l?w/b:b:Math.max(b,w/b))||0)*("edges"===s?-1:1),x.b=w<0?n-w:n,x.u=oe(e.amount||e.each)||0,r=r&&w<0?We(r):r}return w=(x[t]-x.min)/x.max||0,Tt(x.b+(r?r(w):w)*x.v)+x.u}},me=function(t){var e=t<1?Math.pow(10,(t+"").length-2):1;return function(r){var s=Math.round(parseFloat(r)/t)*t*e;return(s-s%1)/e+(H(r)?0:oe(r))}},ge=function(t,e){var r,s,n=J(t);return!n&&Y(t)&&(r=n=t.radius||D,t.values?(t=ce(t.values),(s=!H(t[0]))&&(r*=r)):t=me(t.increment)),ne(e,n?G(t)?function(e){return s=t(e),Math.abs(s-e)<=r?s:e}:function(e){for(var n,i,o=parseFloat(s?e.x:e),a=parseFloat(s?e.y:0),l=D,u=0,h=t.length;h--;)(n=s?(n=t[h].x-o)*n+(i=t[h].y-a)*i:Math.abs(t[h]-o))<l&&(l=n,u=h);return u=!r||l<=r?t[u]:e,s||u===e||H(e)?u:u+oe(e)}:me(t))},ve=function(t,e,r,s){return ne(J(t)?!e:!0===r?!!(r=0):!s,(function(){return J(t)?t[~~(Math.random()*t.length)]:(r=r||1e-5)&&(s=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((t-r/2+Math.random()*(e-t+.99*r))/r)*r*s)/s}))},_e=function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},ye=function(t,e){return function(r){return t(parseFloat(r))+(e||oe(r))}},be=function(t,e,r){return Te(t,e,0,1,r)},we=function(t,e,r){return ne(r,(function(r){return t[~~e(r)]}))},xe=function t(e,r,s){var n=r-e;return J(e)?we(e,t(0,e.length),r):ne(s,(function(t){return(n+(t-e)%n)%n+e}))},je=function t(e,r,s){var n=r-e,i=2*n;return J(e)?we(e,t(0,e.length-1),r):ne(s,(function(t){return e+((t=(i+(t-e)%i)%i||0)>n?i-t:t)}))},Ee=function(t){for(var e,r,s,n,i=0,o="";~(e=t.indexOf("random(",i));)s=t.indexOf(")",e),n="["===t.charAt(e+7),r=t.substr(e+7,s-e-7).match(n?nt:K),o+=t.substr(i,e-i)+ve(n?r:+r[0],n?0:+r[1],+r[2]||1e-5),i=s+1;return o+t.substr(i,t.length-i)},Te=function(t,e,r,s,n){var i=e-t,o=s-r;return ne(n,(function(e){return r+((e-t)/i*o||0)}))},Ce=function t(e,r,s,n){var i=isNaN(e+r)?0:function(t){return(1-t)*e+t*r};if(!i){var o,a,l,u,h,c=V(e),d={};if(!0===s&&(n=1)&&(s=null),c)e={p:e},r={p:r};else if(J(e)&&!J(r)){for(l=[],u=e.length,h=u-2,a=1;a<u;a++)l.push(t(e[a-1],e[a]));u--,i=function(t){t*=u;var e=Math.min(h,~~t);return l[e](t-e)},s=r}else n||(e=Pt(J(e)?[]:{},e));if(!l){for(o in r)nr.call(d,e,o,"get",r[o]);i=function(t){return yr(t,d)||(c?e.p:e)}}}return ne(s,i)},Ae=function(t,e,r){var s,n,i,o=t.labels,a=D;for(s in o)(n=o[s]-e)<0==!!r&&n&&a>(n=Math.abs(n))&&(i=s,a=n);return i},Se=function(t,e,r){var s,n,i=t.vars,o=i[e];if(o)return s=i[e+"Params"],n=i.callbackScope||t,r&&ft.length&&At(),s?o.apply(n,s):o.call(n)},Me=function(t){return qt(t),t.scrollTrigger&&t.scrollTrigger.kill(!1),t.progress()<1&&Se(t,"onInterrupt"),t},Oe=function(t){var e=(t=!t.name&&t.default||t).name,r=G(t),s=e&&!r&&t.init?function(){this._props=[]}:t,n={init:dt,render:yr,add:nr,kill:wr,modifier:br,rawVars:0},i={targetTest:0,get:0,getSetter:mr,aliases:{},register:0};if(Ue(),t!==s){if(gt[e])return;Lt(s,Lt(Dt(t,n),i)),Pt(s.prototype,Pt(n,Dt(t,i))),gt[s.prop=e]=s,t.targetTest&&(yt.push(s),pt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}ct(e,s),t.register&&t.register(Sr,s,Er)},Le=255,ke={aqua:[0,Le,Le],lime:[0,Le,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Le],navy:[0,0,128],white:[Le,Le,Le],olive:[128,128,0],yellow:[Le,Le,0],orange:[Le,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Le,0,0],pink:[Le,192,203],cyan:[0,Le,Le],transparent:[Le,Le,Le,0]},Pe=function(t,e,r){return(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(r-e)*t*6:t<.5?r:3*t<2?e+(r-e)*(2/3-t)*6:e)*Le+.5|0},Re=function(t,e,r){var s,n,i,o,a,l,u,h,c,d,p=t?H(t)?[t>>16,t>>8&Le,t&Le]:0:ke.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),ke[t])p=ke[t];else if("#"===t.charAt(0)){if(t.length<6&&(s=t.charAt(1),n=t.charAt(2),i=t.charAt(3),t="#"+s+s+n+n+i+i+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&Le,p&Le,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&Le,t&Le]}else if("hsl"===t.substr(0,3))if(p=d=t.match(K),e){if(~t.indexOf("="))return p=t.match(tt),r&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,s=2*(l=+p[2]/100)-(n=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=Pe(o+1/3,s,n),p[1]=Pe(o,s,n),p[2]=Pe(o-1/3,s,n);else p=t.match(K)||ke.transparent;p=p.map(Number)}return e&&!d&&(s=p[0]/Le,n=p[1]/Le,i=p[2]/Le,l=((u=Math.max(s,n,i))+(h=Math.min(s,n,i)))/2,u===h?o=a=0:(c=u-h,a=l>.5?c/(2-u-h):c/(u+h),o=u===s?(n-i)/c+(n<i?6:0):u===n?(i-s)/c+2:(s-n)/c+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),r&&p.length<4&&(p[3]=1),p},De=function(t){var e=[],r=[],s=-1;return t.split(Fe).forEach((function(t){var n=t.match(et)||[];e.push.apply(e,n),r.push(s+=n.length+1)})),e.c=r,e},Ne=function(t,e,r){var s,n,i,o,a="",l=(t+a).match(Fe),u=e?"hsla(":"rgba(",h=0;if(!l)return t;if(l=l.map((function(t){return(t=Re(t,e,1))&&u+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),r&&(i=De(t),(s=r.c).join(a)!==i.c.join(a)))for(o=(n=t.replace(Fe,"1").split(et)).length-1;h<o;h++)a+=n[h]+(~s.indexOf(h)?l.shift()||u+"0,0,0,0)":(i.length?i:l.length?l:r).shift());if(!n)for(o=(n=t.split(Fe)).length-1;h<o;h++)a+=n[h]+l[h];return a+n[o]},Fe=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in ke)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),qe=/hsl[a]?\(/,Ie=function(t){var e,r=t.join(" ");if(Fe.lastIndex=0,Fe.test(r))return e=qe.test(r),t[1]=Ne(t[1],e),t[0]=Ne(t[0],e,De(t[1])),!0},ze=(b=Date.now,w=500,x=33,j=b(),E=j,C=T=1e3/240,S=function t(e){var r,s,n,i,o=b()-E,a=!0===e;if(o>w&&(j+=o-x),((r=(n=(E+=o)-j)-C)>0||a)&&(i=++v.frame,_=n-1e3*v.time,v.time=n/=1e3,C+=r+(r>=T?4:T-r),s=1),a||(f=m(t)),s)for(y=0;y<A.length;y++)A[y](n,_,i,e)},v={time:0,frame:0,tick:function(){S(!0)},deltaRatio:function(t){return _/(1e3/(t||60))},wake:function(){h&&(!l&&$()&&(a=l=window,u=a.document||{},ot.gsap=Sr,(a.gsapVersions||(a.gsapVersions=[])).push(Sr.version),lt(at||a.GreenSockGlobals||!a.gsap&&a||{}),g=a.requestAnimationFrame),f&&v.sleep(),m=g||function(t){return setTimeout(t,C-1e3*v.time+1|0)},p=1,S(2))},sleep:function(){(g?a.cancelAnimationFrame:clearTimeout)(f),p=0,m=dt},lagSmoothing:function(t,e){w=t||1e8,x=Math.min(e,w,0)},fps:function(t){T=1e3/(t||240),C=1e3*v.time+T},add:function(t){A.indexOf(t)<0&&A.push(t),Ue()},remove:function(t){var e;~(e=A.indexOf(t))&&A.splice(e,1)&&y>=e&&y--},_listeners:A=[]}),Ue=function(){return!p&&ze.wake()},Be={},Ve=/^[\d.\-M][\d.\-,\s]/,Ge=/["']/g,He=function(t){for(var e,r,s,n={},i=t.substr(1,t.length-3).split(":"),o=i[0],a=1,l=i.length;a<l;a++)r=i[a],e=a!==l-1?r.lastIndexOf(","):r.length,s=r.substr(0,e),n[o]=isNaN(s)?s.replace(Ge,"").trim():+s,o=r.substr(e+1).trim();return n},We=function(t){return function(e){return 1-t(1-e)}},Ye=function t(e,r){for(var s,n=e._first;n;)n instanceof er?t(n,r):!n.vars.yoyoEase||n._yoyo&&n._repeat||n._yoyo===r||(n.timeline?t(n.timeline,r):(s=n._ease,n._ease=n._yEase,n._yEase=s,n._yoyo=r)),n=n._next},Xe=function(t,e){return t&&(G(t)?t:Be[t]||function(t){var e,r,s,n,i=(t+"").split("("),o=Be[i[0]];return o&&i.length>1&&o.config?o.config.apply(null,~t.indexOf("{")?[He(i[1])]:(e=t,r=e.indexOf("(")+1,s=e.indexOf(")"),n=e.indexOf("(",r),e.substring(r,~n&&n<s?e.indexOf(")",s+1):s)).split(",").map(Mt)):Be._CE&&Ve.test(t)?Be._CE("",t):o}(t))||e},$e=function(t,e,r,s){void 0===r&&(r=function(t){return 1-e(1-t)}),void 0===s&&(s=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var n,i={easeIn:e,easeOut:r,easeInOut:s};return Et(t,(function(t){for(var e in Be[t]=ot[t]=i,Be[n=t.toLowerCase()]=r,i)Be[n+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Be[t+"."+e]=i[e]})),i},Ze=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},Qe=function t(e,r,s){var n=r>=1?r:1,i=(s||(e?.3:.45))/(r<1?r:1),o=i/F*(Math.asin(1/n)||0),a=function(t){return 1===t?1:n*Math.pow(2,-10*t)*B((t-o)*i)+1},l="out"===e?a:"in"===e?function(t){return 1-a(1-t)}:Ze(a);return i=F/i,l.config=function(r,s){return t(e,r,s)},l},Je=function t(e,r){void 0===r&&(r=1.70158);var s=function(t){return t?--t*t*((r+1)*t+r)+1:0},n="out"===e?s:"in"===e?function(t){return 1-s(1-t)}:Ze(s);return n.config=function(r){return t(e,r)},n};Et("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var r=e<5?e+1:e;$e(t+",Power"+(r-1),e?function(t){return Math.pow(t,r)}:function(t){return t},(function(t){return 1-Math.pow(1-t,r)}),(function(t){return t<.5?Math.pow(2*t,r)/2:1-Math.pow(2*(1-t),r)/2}))})),Be.Linear.easeNone=Be.none=Be.Linear.easeIn,$e("Elastic",Qe("in"),Qe("out"),Qe()),M=7.5625,L=1/(O=2.75),$e("Bounce",(function(t){return 1-k(1-t)}),k=function(t){return t<L?M*t*t:t<.7272727272727273?M*Math.pow(t-1.5/O,2)+.75:t<.9090909090909092?M*(t-=2.25/O)*t+.9375:M*Math.pow(t-2.625/O,2)+.984375}),$e("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),$e("Circ",(function(t){return-(z(1-t*t)-1)})),$e("Sine",(function(t){return 1===t?1:1-U(t*q)})),$e("Back",Je("in"),Je("out"),Je()),Be.SteppedEase=Be.steps=ot.SteppedEase={config:function(t,e){void 0===t&&(t=1);var r=1/t,s=t+(e?0:1),n=e?1:0;return function(t){return((s*ie(0,.99999999,t)|0)+n)*r}}},R.ease=Be["quad.out"],Et("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return bt+=t+","+t+"Params,"}));var Ke=function(t,e){this.id=I++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:jt,this.set=e?e.getSetter:mr},tr=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Kt(this,+t.duration,1,1),this.data=t.data,p||ze.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Kt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Ue(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Wt(this,t),!r._dp||r.parent||Yt(r,this);r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Xt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===N||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),St(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Bt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Bt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*r,e):this._repeat?Vt(this._tTime,r)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?Gt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,zt(this.totalTime(ie(-this._delay,this._tDur,e),!0))},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Ue(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==N&&(this._tTime-=N)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Xt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(X(t)?this.totalDuration():this.duration())/Math.abs(this._ts)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Gt(e.rawTime(t),this):this._tTime:this._tTime},e.globalTime=function(t){for(var e=this,r=arguments.length?t:e.rawTime();e;)r=e._start+r/(e._ts||1),e=e._dp;return r},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,te(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,te(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(re(this,t),X(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,X(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,r=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=r&&t<this.endTime(!0)-N))},e.eventCallback=function(t,e,r){var s=this.vars;return arguments.length>1?(e?(s[t]=e,r&&(s[t+"Params"]=r),"onUpdate"===t&&(this._onUpdate=e)):delete s[t],this):s[t]},e.then=function(t){var e=this;return new Promise((function(r){var s=G(t)?t:Ot,n=function(){var t=e.then;e.then=null,G(s)&&(s=s(e))&&(s.then||s===e)&&(e.then=t),r(s),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?n():e._prom=n}))},e.kill=function(){Me(this)},t}();Lt(tr.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var er=function(t){function e(e,r){var n;return void 0===e&&(e={}),(n=t.call(this,e)||this).labels={},n.smoothChildTiming=!!e.smoothChildTiming,n.autoRemoveChildren=!!e.autoRemoveChildren,n._sort=X(e.sortChildren),o&&Xt(e.parent||o,s(n),r),e.reversed&&n.reverse(),e.paused&&n.paused(!0),e.scrollTrigger&&$t(s(n),e.scrollTrigger),n}n(e,t);var r=e.prototype;return r.to=function(t,e,r){return se(0,arguments,this),this},r.from=function(t,e,r){return se(1,arguments,this),this},r.fromTo=function(t,e,r,s){return se(2,arguments,this),this},r.set=function(t,e,r){return e.duration=0,e.parent=this,Nt(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new hr(t,e,re(this,r),1),this},r.call=function(t,e,r){return Xt(this,hr.delayedCall(0,t,e),r)},r.staggerTo=function(t,e,r,s,n,i,o){return r.duration=e,r.stagger=r.stagger||s,r.onComplete=i,r.onCompleteParams=o,r.parent=this,new hr(t,r,re(this,n)),this},r.staggerFrom=function(t,e,r,s,n,i,o){return r.runBackwards=1,Nt(r).immediateRender=X(r.immediateRender),this.staggerTo(t,e,r,s,n,i,o)},r.staggerFromTo=function(t,e,r,s,n,i,o,a){return s.startAt=r,Nt(s).immediateRender=X(s.immediateRender),this.staggerTo(t,e,s,n,i,o,a)},r.render=function(t,e,r){var s,n,i,a,l,u,h,c,d,p,f,m,g=this._time,v=this._dirty?this.totalDuration():this._tDur,_=this._dur,y=this!==o&&t>v-N&&t>=0?v:t<N?0:t,b=this._zTime<0!=t<0&&(this._initted||!_);if(y!==this._tTime||r||b){if(g!==this._time&&_&&(y+=this._time-g,t+=this._time-g),s=y,d=this._start,u=!(c=this._ts),b&&(_||(g=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(f=this._yoyo,l=_+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*l+t,e,r);if(s=Tt(y%l),y===v?(a=this._repeat,s=_):((a=~~(y/l))&&a===y/l&&(s=_,a--),s>_&&(s=_)),p=Vt(this._tTime,l),!g&&this._tTime&&p!==a&&(p=a),f&&1&a&&(s=_-s,m=1),a!==p&&!this._lock){var w=f&&1&p,x=w===(f&&1&a);if(a<p&&(w=!w),g=w?0:_,this._lock=1,this.render(g||(m?0:Tt(a*l)),e,!_)._lock=0,this._tTime=y,!e&&this.parent&&Se(this,"onRepeat"),this.vars.repeatRefresh&&!m&&(this.invalidate()._lock=1),g&&g!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(_=this._dur,v=this._tDur,x&&(this._lock=2,g=w?_:-1e-4,this.render(g,!0),this.vars.repeatRefresh&&!m&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;Ye(this,m)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(h=function(t,e,r){var s;if(r>e)for(s=t._first;s&&s._start<=r;){if(!s._dur&&"isPause"===s.data&&s._start>e)return s;s=s._next}else for(s=t._last;s&&s._start>=r;){if(!s._dur&&"isPause"===s.data&&s._start<e)return s;s=s._prev}}(this,Tt(g),Tt(s)))&&(y-=s-(s=h._start)),this._tTime=y,this._time=s,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,g=0),!g&&s&&!e&&(Se(this,"onStart"),this._tTime!==y))return this;if(s>=g&&t>=0)for(n=this._first;n;){if(i=n._next,(n._act||s>=n._start)&&n._ts&&h!==n){if(n.parent!==this)return this.render(t,e,r);if(n.render(n._ts>0?(s-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(s-n._start)*n._ts,e,r),s!==this._time||!this._ts&&!u){h=0,i&&(y+=this._zTime=-1e-8);break}}n=i}else{n=this._last;for(var j=t<0?t:s;n;){if(i=n._prev,(n._act||j<=n._end)&&n._ts&&h!==n){if(n.parent!==this)return this.render(t,e,r);if(n.render(n._ts>0?(j-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(j-n._start)*n._ts,e,r),s!==this._time||!this._ts&&!u){h=0,i&&(y+=this._zTime=j?-1e-8:N);break}}n=i}}if(h&&!e&&(this.pause(),h.render(s>=g?0:-1e-8)._zTime=s>=g?1:-1,this._ts))return this._start=d,Ht(this),this.render(t,e,r);this._onUpdate&&!e&&Se(this,"onUpdate",!0),(y===v&&v>=this.totalDuration()||!y&&g)&&(d!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((t||!_)&&(y===v&&this._ts>0||!y&&this._ts<0)&&qt(this,1),e||t<0&&!g||!y&&!g&&v||(Se(this,y===v&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(y<v&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(t,e){var r=this;if(H(e)||(e=re(this,e,t)),!(t instanceof tr)){if(J(t))return t.forEach((function(t){return r.add(t,e)})),this;if(V(t))return this.addLabel(t,e);if(!G(t))return this;t=hr.delayedCall(0,t)}return this!==t?Xt(this,t,e):this},r.getChildren=function(t,e,r,s){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),void 0===s&&(s=-D);for(var n=[],i=this._first;i;)i._start>=s&&(i instanceof hr?e&&n.push(i):(r&&n.push(i),t&&n.push.apply(n,i.getChildren(!0,e,r)))),i=i._next;return n},r.getById=function(t){for(var e=this.getChildren(1,1,1),r=e.length;r--;)if(e[r].vars.id===t)return e[r]},r.remove=function(t){return V(t)?this.removeLabel(t):G(t)?this.killTweensOf(t):(Ft(this,t),t===this._recent&&(this._recent=this._last),It(this))},r.totalTime=function(e,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Tt(ze.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,r),this._forcing=0,this):this._tTime},r.addLabel=function(t,e){return this.labels[t]=re(this,e),this},r.removeLabel=function(t){return delete this.labels[t],this},r.addPause=function(t,e,r){var s=hr.delayedCall(0,e||dt,r);return s.data="isPause",this._hasPause=1,Xt(this,s,re(this,t))},r.removePause=function(t){var e=this._first;for(t=re(this,t);e;)e._start===t&&"isPause"===e.data&&qt(e),e=e._next},r.killTweensOf=function(t,e,r){for(var s=this.getTweensOf(t,r),n=s.length;n--;)rr!==s[n]&&s[n].kill(t,e);return this},r.getTweensOf=function(t,e){for(var r,s=[],n=ce(t),i=this._first,o=H(e);i;)i instanceof hr?Ct(i._targets,n)&&(o?(!rr||i._initted&&i._ts)&&i.globalTime(0)<=e&&i.globalTime(i.totalDuration())>e:!e||i.isActive())&&s.push(i):(r=i.getTweensOf(n,e)).length&&s.push.apply(s,r),i=i._next;return s},r.tweenTo=function(t,e){e=e||{};var r,s=this,n=re(s,t),i=e,o=i.startAt,a=i.onStart,l=i.onStartParams,u=i.immediateRender,h=hr.to(s,Lt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:n,overwrite:"auto",duration:e.duration||Math.abs((n-(o&&"time"in o?o.time:s._time))/s.timeScale())||N,onStart:function(){if(s.pause(),!r){var t=e.duration||Math.abs((n-(o&&"time"in o?o.time:s._time))/s.timeScale());h._dur!==t&&Kt(h,t,0,1).render(h._time,!0,!0),r=1}a&&a.apply(h,l||[])}},e));return u?h.render(0):h},r.tweenFromTo=function(t,e,r){return this.tweenTo(e,Lt({startAt:{time:re(this,t)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(t){return void 0===t&&(t=this._time),Ae(this,re(this,t))},r.previousLabel=function(t){return void 0===t&&(t=this._time),Ae(this,re(this,t),1)},r.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+N)},r.shiftChildren=function(t,e,r){void 0===r&&(r=0);for(var s,n=this._first,i=this.labels;n;)n._start>=r&&(n._start+=t,n._end+=t),n=n._next;if(e)for(s in i)i[s]>=r&&(i[s]+=t);return It(this)},r.invalidate=function(){var e=this._first;for(this._lock=0;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},r.clear=function(t){void 0===t&&(t=!0);for(var e,r=this._first;r;)e=r._next,this.remove(r),r=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),It(this)},r.totalDuration=function(t){var e,r,s,n=0,i=this,a=i._last,l=D;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-t:t));if(i._dirty){for(s=i.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),(r=a._start)>l&&i._sort&&a._ts&&!i._lock?(i._lock=1,Xt(i,a,r-a._delay,1)._lock=0):l=r,r<0&&a._ts&&(n-=r,(!s&&!i._dp||s&&s.smoothChildTiming)&&(i._start+=r/i._ts,i._time-=r,i._tTime-=r),i.shiftChildren(-r,!1,-Infinity),l=0),a._end>n&&a._ts&&(n=a._end),a=e;Kt(i,i===o&&i._time>n?i._time:n,1,1),i._dirty=0}return i._tDur},e.updateRoot=function(t){if(o._ts&&(St(o,Gt(t,o)),c=ze.frame),ze.frame>=_t){_t+=P.autoSleep||120;var e=o._first;if((!e||!e._ts)&&P.autoSleep&&ze._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||ze.sleep()}}},e}(tr);Lt(er.prototype,{_lock:0,_hasPause:0,_forcing:0});var rr,sr=function(t,e,r,s,n,i,o){var a,l,u,h,c,d,p,f,m=new Er(this._pt,t,e,0,1,_r,null,n),g=0,v=0;for(m.b=r,m.e=s,r+="",(p=~(s+="").indexOf("random("))&&(s=Ee(s)),i&&(i(f=[r,s],t,e),r=f[0],s=f[1]),l=r.match(rt)||[];a=rt.exec(s);)h=a[0],c=s.substring(g,a.index),u?u=(u+1)%5:"rgba("===c.substr(-5)&&(u=1),h!==l[v++]&&(d=parseFloat(l[v-1])||0,m._pt={_next:m._pt,p:c||1===v?c:",",s:d,c:"="===h.charAt(1)?parseFloat(h.substr(2))*("-"===h.charAt(0)?-1:1):parseFloat(h)-d,m:u&&u<4?Math.round:0},g=rt.lastIndex);return m.c=g<s.length?s.substring(g,s.length):"",m.fp=o,(st.test(s)||p)&&(m.e=0),this._pt=m,m},nr=function(t,e,r,s,n,i,o,a,l){G(s)&&(s=s(n||0,t,i));var u,h=t[e],c="get"!==r?r:G(h)?l?t[e.indexOf("set")||!G(t["get"+e.substr(3)])?e:"get"+e.substr(3)](l):t[e]():h,d=G(h)?l?pr:dr:cr;if(V(s)&&(~s.indexOf("random(")&&(s=Ee(s)),"="===s.charAt(1)&&((u=parseFloat(c)+parseFloat(s.substr(2))*("-"===s.charAt(0)?-1:1)+(oe(c)||0))||0===u)&&(s=u)),c!==s)return isNaN(c*s)||""===s?(!h&&!(e in t)&&ut(e,s),sr.call(this,t,e,c,s,d,a||P.stringFilter,l)):(u=new Er(this._pt,t,e,+c||0,s-(c||0),"boolean"==typeof h?vr:gr,0,d),l&&(u.fp=l),o&&u.modifier(o,this,t),this._pt=u)},ir=function(t,e,r,s,n,i){var o,a,l,u;if(gt[t]&&!1!==(o=new gt[t]).init(n,o.rawVars?e[t]:function(t,e,r,s,n){if(G(t)&&(t=ar(t,n,e,r,s)),!Y(t)||t.style&&t.nodeType||J(t)||Q(t))return V(t)?ar(t,n,e,r,s):t;var i,o={};for(i in t)o[i]=ar(t[i],n,e,r,s);return o}(e[t],s,n,i,r),r,s,i)&&(r._pt=a=new Er(r._pt,n,t,0,1,o.render,o,0,o.priority),r!==d))for(l=r._ptLookup[r._targets.indexOf(n)],u=o._props.length;u--;)l[o._props[u]]=a;return o},or=function t(e,r){var s,n,a,l,u,h,c,d,p,f,m,g,v,_=e.vars,y=_.ease,b=_.startAt,w=_.immediateRender,x=_.lazy,j=_.onUpdate,E=_.onUpdateParams,T=_.callbackScope,C=_.runBackwards,A=_.yoyoEase,S=_.keyframes,M=_.autoRevert,O=e._dur,L=e._startAt,k=e._targets,P=e.parent,D=P&&"nested"===P.data?P.parent._targets:k,F="auto"===e._overwrite&&!i,q=e.timeline;if(q&&(!S||!y)&&(y="none"),e._ease=Xe(y,R.ease),e._yEase=A?We(Xe(!0===A?y:A,R.ease)):0,A&&e._yoyo&&!e._repeat&&(A=e._yEase,e._yEase=e._ease,e._ease=A),e._from=!q&&!!_.runBackwards,!q){if(g=(d=k[0]?xt(k[0]).harness:0)&&_[d.prop],s=Dt(_,pt),L&&L.render(-1,!0).kill(),b)if(qt(e._startAt=hr.set(k,Lt({data:"isStart",overwrite:!1,parent:P,immediateRender:!0,lazy:X(x),startAt:null,delay:0,onUpdate:j,onUpdateParams:E,callbackScope:T,stagger:0},b))),r<0&&!w&&!M&&e._startAt.render(-1,!0),w){if(r>0&&!M&&(e._startAt=0),O&&r<=0)return void(r&&(e._zTime=r))}else!1===M&&(e._startAt=0);else if(C&&O)if(L)!M&&(e._startAt=0);else if(r&&(w=!1),a=Lt({overwrite:!1,data:"isFromStart",lazy:w&&X(x),immediateRender:w,stagger:0,parent:P},s),g&&(a[d.prop]=g),qt(e._startAt=hr.set(k,a)),r<0&&e._startAt.render(-1,!0),w){if(!r)return}else t(e._startAt,N);for(e._pt=0,x=O&&X(x)||x&&!O,n=0;n<k.length;n++){if(c=(u=k[n])._gsap||wt(k)[n]._gsap,e._ptLookup[n]=f={},mt[c.id]&&ft.length&&At(),m=D===k?n:D.indexOf(u),d&&!1!==(p=new d).init(u,g||s,e,m,D)&&(e._pt=l=new Er(e._pt,u,p.name,0,1,p.render,p,0,p.priority),p._props.forEach((function(t){f[t]=l})),p.priority&&(h=1)),!d||g)for(a in s)gt[a]&&(p=ir(a,s,e,m,u,D))?p.priority&&(h=1):f[a]=l=nr.call(e,u,a,"get",s[a],m,D,0,_.stringFilter);e._op&&e._op[n]&&e.kill(u,e._op[n]),F&&e._pt&&(rr=e,o.killTweensOf(u,f,e.globalTime(0)),v=!e.parent,rr=0),e._pt&&x&&(mt[c.id]=1)}h&&jr(e),e._onInit&&e._onInit(e)}e._onUpdate=j,e._initted=(!e._op||e._pt)&&!v},ar=function(t,e,r,s,n){return G(t)?t.call(e,r,s,n):V(t)&&~t.indexOf("random(")?Ee(t):t},lr=bt+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",ur=(lr+",id,stagger,delay,duration,paused,scrollTrigger").split(","),hr=function(t){function e(e,r,n,a){var l;"number"==typeof r&&(n.duration=r,r=n,n=null);var u,h,c,d,p,f,m,g,v=(l=t.call(this,a?r:Nt(r))||this).vars,_=v.duration,y=v.delay,b=v.immediateRender,w=v.stagger,x=v.overwrite,j=v.keyframes,E=v.defaults,T=v.scrollTrigger,C=v.yoyoEase,A=r.parent||o,S=(J(e)||Q(e)?H(e[0]):"length"in r)?[e]:ce(e);if(l._targets=S.length?wt(S):ht("GSAP target "+e+" not found. https://greensock.com",!P.nullTargetWarn)||[],l._ptLookup=[],l._overwrite=x,j||w||Z(_)||Z(y)){if(r=l.vars,(u=l.timeline=new er({data:"nested",defaults:E||{}})).kill(),u.parent=u._dp=s(l),u._start=0,j)Lt(u.vars.defaults,{ease:"none"}),w?S.forEach((function(t,e){return j.forEach((function(r,s){return u.to(t,r,s?">":e*w)}))})):j.forEach((function(t){return u.to(S,t,">")}));else{if(d=S.length,m=w?fe(w):dt,Y(w))for(p in w)~lr.indexOf(p)&&(g||(g={}),g[p]=w[p]);for(h=0;h<d;h++){for(p in c={},r)ur.indexOf(p)<0&&(c[p]=r[p]);c.stagger=0,C&&(c.yoyoEase=C),g&&Pt(c,g),f=S[h],c.duration=+ar(_,s(l),h,f,S),c.delay=(+ar(y,s(l),h,f,S)||0)-l._delay,!w&&1===d&&c.delay&&(l._delay=y=c.delay,l._start+=y,c.delay=0),u.to(f,c,m(h,f,S))}u.duration()?_=y=0:l.timeline=0}_||l.duration(_=u.duration())}else l.timeline=0;return!0!==x||i||(rr=s(l),o.killTweensOf(S),rr=0),Xt(A,s(l),n),r.reversed&&l.reverse(),r.paused&&l.paused(!0),(b||!_&&!j&&l._start===Tt(A._time)&&X(b)&&Ut(s(l))&&"nested"!==A.data)&&(l._tTime=-1e-8,l.render(Math.max(0,-y))),T&&$t(s(l),T),l}n(e,t);var r=e.prototype;return r.render=function(t,e,r){var s,n,i,o,a,l,u,h,c,d=this._time,p=this._tDur,f=this._dur,m=t>p-N&&t>=0?p:t<N?0:t;if(f){if(m!==this._tTime||!t||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=t<0){if(s=m,h=this.timeline,this._repeat){if(o=f+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*o+t,e,r);if(s=Tt(m%o),m===p?(i=this._repeat,s=f):((i=~~(m/o))&&i===m/o&&(s=f,i--),s>f&&(s=f)),(l=this._yoyo&&1&i)&&(c=this._yEase,s=f-s),a=Vt(this._tTime,o),s===d&&!r&&this._initted)return this;i!==a&&(h&&this._yEase&&Ye(h,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=r=1,this.render(Tt(o*i),!0).invalidate()._lock=0))}if(!this._initted){if(Zt(this,t<0?t:s,r,e))return this._tTime=0,this;if(f!==this._dur)return this.render(t,e,r)}if(this._tTime=m,this._time=s,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(c||this._ease)(s/f),this._from&&(this.ratio=u=1-u),s&&!d&&!e&&(Se(this,"onStart"),this._tTime!==m))return this;for(n=this._pt;n;)n.r(u,n.d),n=n._next;h&&h.render(t<0?t:!s&&l?-1e-8:h._dur*u,e,r)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(t<0&&this._startAt&&this._startAt.render(t,!0,r),Se(this,"onUpdate")),this._repeat&&i!==a&&this.vars.onRepeat&&!e&&this.parent&&Se(this,"onRepeat"),m!==this._tDur&&m||this._tTime!==m||(t<0&&this._startAt&&!this._onUpdate&&this._startAt.render(t,!0,!0),(t||!f)&&(m===this._tDur&&this._ts>0||!m&&this._ts<0)&&qt(this,1),e||t<0&&!d||!m&&!d||(Se(this,m===p?"onComplete":"onReverseComplete",!0),this._prom&&!(m<p&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,r,s){var n,i,o,a=t.ratio,l=e<0||!e&&(!t._start&&Qt(t)&&(t._initted||!Jt(t))||(t._ts<0||t._dp._ts<0)&&!Jt(t))?0:1,u=t._rDelay,h=0;if(u&&t._repeat&&(h=ie(0,t._tDur,e),i=Vt(h,u),o=Vt(t._tTime,u),t._yoyo&&1&i&&(l=1-l),i!==o&&(a=1-l,t.vars.repeatRefresh&&t._initted&&t.invalidate())),l!==a||s||t._zTime===N||!e&&t._zTime){if(!t._initted&&Zt(t,e,s,r))return;for(o=t._zTime,t._zTime=e||(r?N:0),r||(r=e&&!o),t.ratio=l,t._from&&(l=1-l),t._time=0,t._tTime=h,n=t._pt;n;)n.r(l,n.d),n=n._next;t._startAt&&e<0&&t._startAt.render(e,!0,!0),t._onUpdate&&!r&&Se(t,"onUpdate"),h&&t._repeat&&!r&&t.parent&&Se(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===l&&(l&&qt(t,1),r||(Se(t,l?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,r);return this},r.targets=function(){return this._targets},r.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),t.prototype.invalidate.call(this)},r.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?Me(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,rr&&!0!==rr.vars.overwrite)._first||Me(this),this.parent&&r!==this.timeline.totalDuration()&&Kt(this,this._dur*this.timeline._tDur/r,0,1),this}var s,n,i,o,a,l,u,h=this._targets,c=t?ce(t):h,d=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var r=t.length,s=r===e.length;s&&r--&&t[r]===e[r];);return r<0}(h,c))return"all"===e&&(this._pt=0),Me(this);for(s=this._op=this._op||[],"all"!==e&&(V(e)&&(a={},Et(e,(function(t){return a[t]=1})),e=a),e=function(t,e){var r,s,n,i,o=t[0]?xt(t[0]).harness:0,a=o&&o.aliases;if(!a)return e;for(s in r=Pt({},e),a)if(s in r)for(n=(i=a[s].split(",")).length;n--;)r[i[n]]=r[s];return r}(h,e)),u=h.length;u--;)if(~c.indexOf(h[u]))for(a in n=d[u],"all"===e?(s[u]=e,o=n,i={}):(i=s[u]=s[u]||{},o=e),o)(l=n&&n[a])&&("kill"in l.d&&!0!==l.d.kill(a)||Ft(this,l,"_pt"),delete n[a]),"all"!==i&&(i[a]=1);return this._initted&&!this._pt&&p&&Me(this),this},e.to=function(t,r){return new e(t,r,arguments[2])},e.from=function(t,e){return se(1,arguments)},e.delayedCall=function(t,r,s,n){return new e(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:r,onReverseComplete:r,onCompleteParams:s,onReverseCompleteParams:s,callbackScope:n})},e.fromTo=function(t,e,r){return se(2,arguments)},e.set=function(t,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new e(t,r)},e.killTweensOf=function(t,e,r){return o.killTweensOf(t,e,r)},e}(tr);Lt(hr.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),Et("staggerTo,staggerFrom,staggerFromTo",(function(t){hr[t]=function(){var e=new er,r=le.call(arguments,0);return r.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,r)}}));var cr=function(t,e,r){return t[e]=r},dr=function(t,e,r){return t[e](r)},pr=function(t,e,r,s){return t[e](s.fp,r)},fr=function(t,e,r){return t.setAttribute(e,r)},mr=function(t,e){return G(t[e])?dr:W(t[e])&&t.setAttribute?fr:cr},gr=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},vr=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},_r=function(t,e){var r=e._pt,s="";if(!t&&e.b)s=e.b;else if(1===t&&e.e)s=e.e;else{for(;r;)s=r.p+(r.m?r.m(r.s+r.c*t):Math.round(1e4*(r.s+r.c*t))/1e4)+s,r=r._next;s+=e.c}e.set(e.t,e.p,s,e)},yr=function(t,e){for(var r=e._pt;r;)r.r(t,r.d),r=r._next},br=function(t,e,r,s){for(var n,i=this._pt;i;)n=i._next,i.p===s&&i.modifier(t,e,r),i=n},wr=function(t){for(var e,r,s=this._pt;s;)r=s._next,s.p===t&&!s.op||s.op===t?Ft(this,s,"_pt"):s.dep||(e=1),s=r;return!e},xr=function(t,e,r,s){s.mSet(t,e,s.m.call(s.tween,r,s.mt),s)},jr=function(t){for(var e,r,s,n,i=t._pt;i;){for(e=i._next,r=s;r&&r.pr>i.pr;)r=r._next;(i._prev=r?r._prev:n)?i._prev._next=i:s=i,(i._next=r)?r._prev=i:n=i,i=e}t._pt=s},Er=function(){function t(t,e,r,s,n,i,o,a,l){this.t=e,this.s=s,this.c=n,this.p=r,this.r=i||gr,this.d=o||this,this.set=a||cr,this.pr=l||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,r){this.mSet=this.mSet||this.set,this.set=xr,this.m=t,this.mt=r,this.tween=e},t}();Et(bt+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return pt[t]=1})),ot.TweenMax=ot.TweenLite=hr,ot.TimelineLite=ot.TimelineMax=er,o=new er({sortChildren:!1,defaults:R,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),P.stringFilter=Ie;var Tr={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];e.forEach((function(t){return Oe(t)}))},timeline:function(t){return new er(t)},getTweensOf:function(t,e){return o.getTweensOf(t,e)},getProperty:function(t,e,r,s){V(t)&&(t=ce(t)[0]);var n=xt(t||{}).get,i=r?Ot:Mt;return"native"===r&&(r=""),t?e?i((gt[e]&&gt[e].get||n)(t,e,r,s)):function(e,r,s){return i((gt[e]&&gt[e].get||n)(t,e,r,s))}:t},quickSetter:function(t,e,r){if((t=ce(t)).length>1){var s=t.map((function(t){return Sr.quickSetter(t,e,r)})),n=s.length;return function(t){for(var e=n;e--;)s[e](t)}}t=t[0]||{};var i=gt[e],o=xt(t),a=o.harness&&(o.harness.aliases||{})[e]||e,l=i?function(e){var s=new i;d._pt=0,s.init(t,r?e+r:e,d,0,[t]),s.render(1,s),d._pt&&yr(1,d)}:o.set(t,a);return i?l:function(e){return l(t,a,r?e+r:e,o,1)}},isTweening:function(t){return o.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Xe(t.ease,R.ease)),Rt(R,t||{})},config:function(t){return Rt(P,t||{})},registerEffect:function(t){var e=t.name,r=t.effect,s=t.plugins,n=t.defaults,i=t.extendTimeline;(s||"").split(",").forEach((function(t){return t&&!gt[t]&&!ot[t]&&ht(e+" effect requires "+t+" plugin.")})),vt[e]=function(t,e,s){return r(ce(t),Lt(e||{},n),s)},i&&(er.prototype[e]=function(t,r,s){return this.add(vt[e](t,Y(r)?r:(s=r)&&{},this),s)})},registerEase:function(t,e){Be[t]=Xe(e)},parseEase:function(t,e){return arguments.length?Xe(t,e):Be},getById:function(t){return o.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var r,s,n=new er(t);for(n.smoothChildTiming=X(t.smoothChildTiming),o.remove(n),n._dp=0,n._time=n._tTime=o._time,r=o._first;r;)s=r._next,!e&&!r._dur&&r instanceof hr&&r.vars.onComplete===r._targets[0]||Xt(n,r,r._start-r._delay),r=s;return Xt(o,n,0),n},utils:{wrap:xe,wrapYoyo:je,distribute:fe,random:ve,snap:ge,normalize:be,getUnit:oe,clamp:ae,splitColor:Re,toArray:ce,selector:de,mapRange:Te,pipe:_e,unitize:ye,interpolate:Ce,shuffle:pe},install:lt,effects:vt,ticker:ze,updateRoot:er.updateRoot,plugins:gt,globalTimeline:o,core:{PropTween:Er,globals:ct,Tween:hr,Timeline:er,Animation:tr,getCache:xt,_removeLinkedListItem:Ft,suppressOverwrites:function(t){return i=t}}};Et("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return Tr[t]=hr[t]})),ze.add(er.updateRoot),d=Tr.to({},{duration:0});var Cr=function(t,e){for(var r=t._pt;r&&r.p!==e&&r.op!==e&&r.fp!==e;)r=r._next;return r},Ar=function(t,e){return{name:t,rawVars:1,init:function(t,r,s){s._onInit=function(t){var s,n;if(V(r)&&(s={},Et(r,(function(t){return s[t]=1})),r=s),e){for(n in s={},r)s[n]=e(r[n]);r=s}!function(t,e){var r,s,n,i=t._targets;for(r in e)for(s=i.length;s--;)(n=t._ptLookup[s][r])&&(n=n.d)&&(n._pt&&(n=Cr(n,r)),n&&n.modifier&&n.modifier(e[r],t,i[s],r))}(t,r)}}}},Sr=Tr.registerPlugin({name:"attr",init:function(t,e,r,s,n){var i,o;for(i in e)(o=this.add(t,"setAttribute",(t.getAttribute(i)||0)+"",e[i],s,n,0,0,i))&&(o.op=i),this._props.push(i)}},{name:"endArray",init:function(t,e){for(var r=e.length;r--;)this.add(t,r,t[r]||0,e[r])}},Ar("roundProps",me),Ar("modifiers"),Ar("snap",ge))||Tr;hr.version=er.version=Sr.version="3.7.1",h=1,$()&&Ue();var Mr=Be.Power0,Or=Be.Power1,Lr=Be.Power2,kr=Be.Power3,Pr=Be.Power4,Rr=Be.Linear,Dr=Be.Quad,Nr=Be.Cubic,Fr=Be.Quart,qr=Be.Quint,Ir=Be.Strong,zr=Be.Elastic,Ur=Be.Back,Br=Be.SteppedEase,Vr=Be.Bounce,Gr=Be.Sine,Hr=Be.Expo,Wr=Be.Circ},"./node_modules/gsap/index.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{gsap:()=>i,default:()=>i,CSSPlugin:()=>n.CSSPlugin,TweenMax:()=>o,TweenLite:()=>s.TweenLite,TimelineMax:()=>s.TimelineMax,TimelineLite:()=>s.TimelineLite,Power0:()=>s.Power0,Power1:()=>s.Power1,Power2:()=>s.Power2,Power3:()=>s.Power3,Power4:()=>s.Power4,Linear:()=>s.Linear,Quad:()=>s.Quad,Cubic:()=>s.Cubic,Quart:()=>s.Quart,Quint:()=>s.Quint,Strong:()=>s.Strong,Elastic:()=>s.Elastic,Back:()=>s.Back,SteppedEase:()=>s.SteppedEase,Bounce:()=>s.Bounce,Sine:()=>s.Sine,Expo:()=>s.Expo,Circ:()=>s.Circ});var s=r("./node_modules/gsap/gsap-core.js"),n=r("./node_modules/gsap/CSSPlugin.js"),i=s.gsap.registerPlugin(n.CSSPlugin)||s.gsap,o=i.core.Tween},"./node_modules/gsap/utils/paths.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{getRawPath:()=>S,copyRawPath:()=>M,reverseSegment:()=>O,convertToPath:()=>k,getRotationAtProgress:()=>P,sliceRawPath:()=>D,cacheRawPathMeasurements:()=>F,subdivideSegment:()=>q,getPositionOnPath:()=>z,transformRawPath:()=>U,stringToRawPath:()=>V,bezierToPoints:()=>G,flatPointsToSegment:()=>H,pointsToSegment:()=>W,simplifyPoints:()=>X,getClosestData:()=>Z,subdivideSegmentNear:()=>Q,rawPathToString:()=>J});var s,n=/[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,i=/(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,o=/[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi,a=/(^[#\.][a-z]|[a-y][a-z])/i,l=Math.PI/180,u=180/Math.PI,h=Math.sin,c=Math.cos,d=Math.abs,p=Math.sqrt,f=Math.atan2,m=1e8,g=function(t){return"string"==typeof t},v=function(t){return"number"==typeof t},_={},y={},b=1e5,w=function(t){return Math.round((t+m)%1*b)/b||(t<0?0:1)},x=function(t){return Math.round(t*b)/b||0},j=function(t){return Math.round(1e10*t)/1e10||0},E=function(t,e,r,s){var n=t[e],i=1===s?6:q(n,r,s);if(i&&i+r+2<n.length)return t.splice(e,0,n.slice(0,r+i+2)),n.splice(0,r+i),1},T=function(t,e,r){var s=t.length,n=~~(r*s);if(t[n]>e)for(;--n&&t[n]>e;);else for(;t[++n]<e&&n<s;);return n},C=function(t,e){return e.totalLength=t.totalLength,t.samples?(e.samples=t.samples.slice(0),e.lookup=t.lookup.slice(0),e.minLength=t.minLength,e.resolution=t.resolution):t.totalPoints&&(e.totalPoints=t.totalPoints),e},A=function(t,e){var r=t.length,s=t[r-1]||[],n=s.length;r&&e[0]===s[n-2]&&e[1]===s[n-1]&&(e=s.concat(e.slice(2)),r--),t[r]=e};function S(t){var e,r=(t=g(t)&&a.test(t)&&document.querySelector(t)||t).getAttribute?t:0;return r&&(t=t.getAttribute("d"))?(r._gsPath||(r._gsPath={}),(e=r._gsPath[t])&&!e._dirty?e:r._gsPath[t]=V(t)):t?g(t)?V(t):v(t[0])?[t]:t:console.warn("Expecting a <path> element or an SVG path data string")}function M(t){for(var e=[],r=0;r<t.length;r++)e[r]=C(t[r],t[r].slice(0));return C(t,e)}function O(t){var e,r=0;for(t.reverse();r<t.length;r+=2)e=t[r],t[r]=t[r+1],t[r+1]=e;t.reversed=!t.reversed}var L={rect:"rx,ry,x,y,width,height",circle:"r,cx,cy",ellipse:"rx,ry,cx,cy",line:"x1,x2,y1,y2"};function k(t,e){var r,s,n,o,a,l,u,h,c,d,p,f,m,g,v,_,y,b,w,x,j,E,T=t.tagName.toLowerCase(),C=.552284749831;return"path"!==T&&t.getBBox?(l=function(t,e){var r,s=document.createElementNS("http://www.w3.org/2000/svg","path"),n=[].slice.call(t.attributes),i=n.length;for(e=","+e+",";--i>-1;)r=n[i].nodeName.toLowerCase(),e.indexOf(","+r+",")<0&&s.setAttributeNS(null,r,n[i].nodeValue);return s}(t,"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points"),E=function(t,e){for(var r=e?e.split(","):[],s={},n=r.length;--n>-1;)s[r[n]]=+t.getAttribute(r[n])||0;return s}(t,L[T]),"rect"===T?(o=E.rx,a=E.ry||o,s=E.x,n=E.y,d=E.width-2*o,p=E.height-2*a,r=o||a?"M"+(_=(g=(m=s+o)+d)+o)+","+(b=n+a)+" V"+(w=b+p)+" C"+[_,x=w+a*C,v=g+o*C,j=w+a,g,j,g-(g-m)/3,j,m+(g-m)/3,j,m,j,f=s+o*(1-C),j,s,x,s,w,s,w-(w-b)/3,s,b+(w-b)/3,s,b,s,y=n+a*(1-C),f,n,m,n,m+(g-m)/3,n,g-(g-m)/3,n,g,n,v,n,_,y,_,b].join(",")+"z":"M"+(s+d)+","+n+" v"+p+" h"+-d+" v"+-p+" h"+d+"z"):"circle"===T||"ellipse"===T?("circle"===T?h=(o=a=E.r)*C:(o=E.rx,h=(a=E.ry)*C),r="M"+((s=E.cx)+o)+","+(n=E.cy)+" C"+[s+o,n+h,s+(u=o*C),n+a,s,n+a,s-u,n+a,s-o,n+h,s-o,n,s-o,n-h,s-u,n-a,s,n-a,s+u,n-a,s+o,n-h,s+o,n].join(",")+"z"):"line"===T?r="M"+E.x1+","+E.y1+" L"+E.x2+","+E.y2:"polyline"!==T&&"polygon"!==T||(r="M"+(s=(c=(t.getAttribute("points")+"").match(i)||[]).shift())+","+(n=c.shift())+" L"+c.join(","),"polygon"===T&&(r+=","+s+","+n+"z")),l.setAttribute("d",J(l._gsRawPath=V(r))),e&&t.parentNode&&(t.parentNode.insertBefore(l,t),t.parentNode.removeChild(t)),l):t}function P(t,e){var r=I(t,e>=1?1-1e-9:e||1e-9);return R(r.segment,r.i,r.t)}function R(t,e,r){var s,n=t[e],i=t[e+2],o=t[e+4];return n+=(i-n)*r,n+=((i+=(o-i)*r)-n)*r,s=i+(o+(t[e+6]-o)*r-i)*r-n,n=t[e+1],n+=((i=t[e+3])-n)*r,n+=((i+=((o=t[e+5])-i)*r)-n)*r,x(f(i+(o+(t[e+7]-o)*r-i)*r-n,s)*u)}function D(t,e,r){r=void 0===r?1:j(r)||0,e=j(e)||0;var s=Math.max(0,~~(d(r-e)-1e-8)),n=M(t);if(e>r&&(e=1-e,r=1-r,function(t,e){var r=t.length;for(e||t.reverse();r--;)t[r].reversed||O(t[r])}(n),n.totalLength=0),e<0||r<0){var i=Math.abs(~~Math.min(e,r))+1;e+=i,r+=i}n.totalLength||F(n);var o,a,l,u,h,c,p,f,m=r>1,g=I(n,e,_,!0),v=I(n,r,y),b=v.segment,w=g.segment,x=v.segIndex,T=g.segIndex,C=v.i,S=g.i,L=T===x,k=C===S&&L;if(m||s){for(o=x<T||L&&C<S||k&&v.t<g.t,E(n,T,S,g.t)&&(T++,o||(x++,k?(v.t=(v.t-g.t)/(1-g.t),C=0):L&&(C-=S))),1-(r-e)<1e-5?x=T-1:!v.t&&x?x--:E(n,x,C,v.t)&&o&&T++,1===g.t&&(T=(T+1)%n.length),h=[],p=1+(c=n.length)*s,f=T,p+=(c-T+x)%c,u=0;u<p;u++)A(h,n[f++%c]);n=h}else if(l=1===v.t?6:q(b,C,v.t),e!==r)for(a=q(w,S,k?g.t/v.t:g.t),L&&(l+=a),b.splice(C+l+2),(a||S)&&w.splice(0,S+a),u=n.length;u--;)(u<T||u>x)&&n.splice(u,1);else b.angle=R(b,C+l,0),g=b[C+=l],v=b[C+1],b.length=b.totalLength=0,b.totalPoints=n.totalPoints=8,b.push(g,v,g,v,g,v,g,v);return n.totalLength=0,n}function N(t,e,r){e=e||0,t.samples||(t.samples=[],t.lookup=[]);var s,n,i,o,a,l,u,h,c,f,g,v,_,y,b,w,x,j=~~t.resolution||12,E=1/j,T=r?e+6*r+1:t.length,C=t[e],A=t[e+1],S=e?e/6*j:0,M=t.samples,O=t.lookup,L=(e?t.minLength:m)||m,k=M[S+r*j-1],P=e?M[S-1]:0;for(M.length=O.length=0,n=e+2;n<T;n+=6){if(i=t[n+4]-C,o=t[n+2]-C,a=t[n]-C,h=t[n+5]-A,c=t[n+3]-A,f=t[n+1]-A,l=u=g=v=0,d(i)<.01&&d(h)<.01&&d(a)+d(f)<.01)t.length>8&&(t.splice(n,6),n-=6,T-=6);else for(s=1;s<=j;s++)l=u-(u=((y=E*s)*y*i+3*(_=1-y)*(y*o+_*a))*y),g=v-(v=(y*y*h+3*_*(y*c+_*f))*y),(w=p(g*g+l*l))<L&&(L=w),P+=w,M[S++]=P;C+=i,A+=h}if(k)for(k-=P;S<M.length;S++)M[S]+=k;if(M.length&&L){if(t.totalLength=x=M[M.length-1]||0,t.minLength=L,x/L<9999)for(w=b=0,s=0;s<x;s+=L)O[w++]=M[b]<s?++b:b}else t.totalLength=M[0]=0;return e?P-M[e/2-1]:P}function F(t,e){var r,s,n;for(n=r=s=0;n<t.length;n++)t[n].resolution=~~e||12,s+=t[n].length,r+=N(t[n]);return t.totalPoints=s,t.totalLength=r,t}function q(t,e,r){if(r<=0||r>=1)return 0;var s=t[e],n=t[e+1],i=t[e+2],o=t[e+3],a=t[e+4],l=t[e+5],u=s+(i-s)*r,h=i+(a-i)*r,c=n+(o-n)*r,d=o+(l-o)*r,p=u+(h-u)*r,f=c+(d-c)*r,m=a+(t[e+6]-a)*r,g=l+(t[e+7]-l)*r;return h+=(m-h)*r,d+=(g-d)*r,t.splice(e+2,4,x(u),x(c),x(p),x(f),x(p+(h-p)*r),x(f+(d-f)*r),x(h),x(d),x(m),x(g)),t.samples&&t.samples.splice(e/6*t.resolution|0,0,0,0,0,0,0,0),6}function I(t,e,r,s){r=r||{},t.totalLength||F(t),(e<0||e>1)&&(e=w(e));var n,i,o,a,l,u,h,c=0,d=t[0];if(e)if(1===e)h=1,u=(d=t[c=t.length-1]).length-8;else{if(t.length>1){for(o=t.totalLength*e,l=u=0;(l+=t[u++].totalLength)<o;)c=u;e=(o-(a=l-(d=t[c]).totalLength))/(l-a)||0}n=d.samples,i=d.resolution,o=d.totalLength*e,a=(u=d.lookup.length?d.lookup[~~(o/d.minLength)]||0:T(n,o,e))?n[u-1]:0,(l=n[u])<o&&(a=l,l=n[++u]),h=1/i*((o-a)/(l-a)+u%i),u=6*~~(u/i),s&&1===h&&(u+6<d.length?(u+=6,h=0):c+1<t.length&&(u=h=0,d=t[++c]))}else h=u=c=0,d=t[0];return r.t=h,r.i=u,r.path=t,r.segment=d,r.segIndex=c,r}function z(t,e,r,s){var n,i,o,a,l,u,h,c,d,p=t[0],f=s||{};if((e<0||e>1)&&(e=w(e)),t.length>1){for(o=t.totalLength*e,l=u=0;(l+=t[u++].totalLength)<o;)p=t[u];e=(o-(a=l-p.totalLength))/(l-a)||0}return n=p.samples,i=p.resolution,o=p.totalLength*e,a=(u=p.lookup.length?p.lookup[e<1?~~(o/p.minLength):p.lookup.length-1]||0:T(n,o,e))?n[u-1]:0,(l=n[u])<o&&(a=l,l=n[++u]),d=1-(h=1/i*((o-a)/(l-a)+u%i)||0),c=p[u=6*~~(u/i)],f.x=x((h*h*(p[u+6]-c)+3*d*(h*(p[u+4]-c)+d*(p[u+2]-c)))*h+c),f.y=x((h*h*(p[u+7]-(c=p[u+1]))+3*d*(h*(p[u+5]-c)+d*(p[u+3]-c)))*h+c),r&&(f.angle=p.totalLength?R(p,u,h>=1?1-1e-9:h||1e-9):p.angle||0),f}function U(t,e,r,s,n,i,o){for(var a,l,u,h,c,d=t.length;--d>-1;)for(l=(a=t[d]).length,u=0;u<l;u+=2)h=a[u],c=a[u+1],a[u]=h*e+c*s+i,a[u+1]=h*r+c*n+o;return t._dirty=1,t}function B(t,e,r,s,n,i,o,a,u){if(t!==a||e!==u){r=d(r),s=d(s);var f=n%360*l,m=c(f),g=h(f),v=Math.PI,_=2*v,y=(t-a)/2,b=(e-u)/2,w=m*y+g*b,x=-g*y+m*b,j=w*w,E=x*x,T=j/(r*r)+E/(s*s);T>1&&(r=p(T)*r,s=p(T)*s);var C=r*r,A=s*s,S=(C*A-C*E-A*j)/(C*E+A*j);S<0&&(S=0);var M=(i===o?-1:1)*p(S),O=M*(r*x/s),L=M*(-s*w/r),k=(t+a)/2+(m*O-g*L),P=(e+u)/2+(g*O+m*L),R=(w-O)/r,D=(x-L)/s,N=(-w-O)/r,F=(-x-L)/s,q=R*R+D*D,I=(D<0?-1:1)*Math.acos(R/p(q)),z=(R*F-D*N<0?-1:1)*Math.acos((R*N+D*F)/p(q*(N*N+F*F)));isNaN(z)&&(z=v),!o&&z>0?z-=_:o&&z<0&&(z+=_),I%=_,z%=_;var U,B=Math.ceil(d(z)/(_/4)),V=[],G=z/B,H=4/3*h(G/2)/(1+c(G/2)),W=m*r,Y=g*r,X=g*-s,$=m*s;for(U=0;U<B;U++)w=c(n=I+U*G),x=h(n),R=c(n+=G),D=h(n),V.push(w-H*x,x+H*w,R+H*D,D-H*R,R,D);for(U=0;U<V.length;U+=2)w=V[U],x=V[U+1],V[U]=w*W+x*X+k,V[U+1]=w*Y+x*$+P;return V[U-2]=a,V[U-1]=u,V}}function V(t){var e,r,s,i,a,l,u,h,c,p,f,m,g,v,_,y=(t+"").replace(o,(function(t){var e=+t;return e<1e-4&&e>-1e-4?0:e})).match(n)||[],b=[],w=0,x=0,j=2/3,E=y.length,T=0,C="ERROR: malformed path: "+t,A=function(t,e,r,s){p=(r-t)/3,f=(s-e)/3,u.push(t+p,e+f,r-p,s-f,r,s)};if(!t||!isNaN(y[0])||isNaN(y[1]))return console.log(C),b;for(e=0;e<E;e++)if(g=a,isNaN(y[e])?l=(a=y[e].toUpperCase())!==y[e]:e--,s=+y[e+1],i=+y[e+2],l&&(s+=w,i+=x),e||(h=s,c=i),"M"===a)u&&(u.length<8?b.length-=1:T+=u.length),w=h=s,x=c=i,u=[s,i],b.push(u),e+=2,a="L";else if("C"===a)u||(u=[0,0]),l||(w=x=0),u.push(s,i,w+1*y[e+3],x+1*y[e+4],w+=1*y[e+5],x+=1*y[e+6]),e+=6;else if("S"===a)p=w,f=x,"C"!==g&&"S"!==g||(p+=w-u[u.length-4],f+=x-u[u.length-3]),l||(w=x=0),u.push(p,f,s,i,w+=1*y[e+3],x+=1*y[e+4]),e+=4;else if("Q"===a)p=w+(s-w)*j,f=x+(i-x)*j,l||(w=x=0),w+=1*y[e+3],x+=1*y[e+4],u.push(p,f,w+(s-w)*j,x+(i-x)*j,w,x),e+=4;else if("T"===a)p=w-u[u.length-4],f=x-u[u.length-3],u.push(w+p,x+f,s+(w+1.5*p-s)*j,i+(x+1.5*f-i)*j,w=s,x=i),e+=2;else if("H"===a)A(w,x,w=s,x),e+=1;else if("V"===a)A(w,x,w,x=s+(l?x-w:0)),e+=1;else if("L"===a||"Z"===a)"Z"===a&&(s=h,i=c,u.closed=!0),("L"===a||d(w-s)>.5||d(x-i)>.5)&&(A(w,x,s,i),"L"===a&&(e+=2)),w=s,x=i;else if("A"===a){if(v=y[e+4],_=y[e+5],p=y[e+6],f=y[e+7],r=7,v.length>1&&(v.length<3?(f=p,p=_,r--):(f=_,p=v.substr(2),r-=2),_=v.charAt(1),v=v.charAt(0)),m=B(w,x,+y[e+1],+y[e+2],+y[e+3],+v,+_,(l?w:0)+1*p,(l?x:0)+1*f),e+=r,m)for(r=0;r<m.length;r++)u.push(m[r]);w=u[u.length-2],x=u[u.length-1]}else console.log(C);return(e=u.length)<6?(b.pop(),e=0):u[0]===u[e-2]&&u[1]===u[e-1]&&(u.closed=!0),b.totalPoints=T+e,b}function G(t,e,r,s,n,i,o,a,l,u,h){var c,p=(t+r)/2,f=(e+s)/2,m=(r+n)/2,g=(s+i)/2,v=(n+o)/2,_=(i+a)/2,y=(p+m)/2,b=(f+g)/2,w=(m+v)/2,x=(g+_)/2,j=(y+w)/2,E=(b+x)/2,T=o-t,C=a-e,A=d((r-o)*C-(s-a)*T),S=d((n-o)*C-(i-a)*T);return u||(u=[t,e,o,a],h=2),u.splice(h||u.length-2,0,j,E),(A+S)*(A+S)>l*(T*T+C*C)&&(c=u.length,G(t,e,p,f,y,b,j,E,l,u,h),G(j,E,w,x,v,_,o,a,l,u,h+2+(u.length-c))),u}function H(t,e){void 0===e&&(e=1);for(var r=t[0],s=0,n=[r,s],i=2;i<t.length;i+=2)n.push(r,s,t[i],s=(t[i]-r)*e/2,r=t[i],-s);return n}function W(t,e,r){d(t[0]-t[2])<1e-4&&d(t[1]-t[3])<1e-4&&(t=t.slice(2));var s,n,i,o,a,l,u,m,g,v,_,y,b,w,j=t.length-2,E=+t[0],T=+t[1],C=+t[2],A=+t[3],S=[E,T,E,T],M=C-E,O=A-T,L=Math.abs(t[j]-E)<.001&&Math.abs(t[j+1]-T)<.001;for(isNaN(r)&&(r=Math.PI/10),L&&(t.push(C,A),C=E,A=T,E=t[j-2],T=t[j-1],t.unshift(E,T),j+=4),e=e||0===e?+e:1,a=2;a<j;a+=2)s=E,n=T,E=C,T=A,C=+t[a+2],A=+t[a+3],E===C&&T===A||(y=(l=M)*l+(m=O)*m,b=(M=C-E)*M+(O=A-T)*O,w=(u=C-s)*u+(g=A-n)*g,_=(i=Math.acos((y+b-w)/p(4*y*b)))/Math.PI*e,v=p(y)*_,_*=p(b),E===s&&T===n||(i>r?(o=f(g,u),S.push(x(E-c(o)*v),x(T-h(o)*v),x(E),x(T),x(E+c(o)*_),x(T+h(o)*_))):(o=f(m,l),S.push(x(E-c(o)*v),x(T-h(o)*v)),o=f(O,M),S.push(x(E),x(T),x(E+c(o)*_),x(T+h(o)*_)))));return E!==C||T!==A||S.length<4?S.push(x(C),x(A),x(C),x(A)):S.length-=2,L&&(S.splice(0,6),S.length=S.length-6),S}function Y(t,e,r,s,n){var i,o,a,l,u,h,c,d,p,f,m,g,v=s,_=t[e],y=t[e+1],b=t[r],w=t[r+1];for(o=e+2;o<r;o+=2)l=t[o],u=t[o+1],f=void 0,m=void 0,g=void 0,g=(p=w)-(c=y),((m=(d=b)-(h=_))||g)&&((f=((l-h)*m+(u-c)*g)/(m*m+g*g))>1?(h=d,c=p):f>0&&(h+=m*f,c+=g*f)),(a=Math.pow(l-h,2)+Math.pow(u-c,2))>v&&(i=o,v=a);v>s&&(i-e>2&&Y(t,e,i,s,n),n.push(t[i],t[i+1]),r-i>2&&Y(t,i,r,s,n))}function X(t,e){var r,s,n,i,o,a,l,u=parseFloat(t[0]),h=parseFloat(t[1]),c=[u,h],d=t.length-2;for(e=Math.pow(e||1,2),r=2;r<d;r+=2)(i=u-(s=parseFloat(t[r])))*i+(o=h-(n=parseFloat(t[r+1])))*o>e&&(c.push(s,n),u=s,h=n);return c.push(parseFloat(t[d]),parseFloat(t[d+1])),Y(c,0,l=c.length-2,e,a=[c[0],c[1]]),a.push(c[l],c[l+1]),a}function $(t,e,r,n,i,o,a,l,u,h,c,d,p,f){var g,v,_,y,b=(i-n)/o,w=0,x=n;for(s=m;x<=i;)(g=(v=(y=1-x)*y*y*a+3*y*y*x*u+3*y*x*x*c+x*x*x*p-e)*v+(_=y*y*y*l+3*y*y*x*h+3*y*x*x*d+x*x*x*f-r)*_)<s&&(s=g,w=x),x+=b;return t>1?$(t-1,e,r,Math.max(w-b,0),Math.min(w+b,1),o,a,l,u,h,c,d,p,f):w}function Z(t,e,r,n){var i,o,a,l,u={j:0,i:0,t:0},h=m;for(o=0;o<t.length;o++)for(l=t[o],i=0;i<l.length;i+=6)a=$(1,e,r,0,1,n||20,l[i],l[i+1],l[i+2],l[i+3],l[i+4],l[i+5],l[i+6],l[i+7]),h>s&&(h=s,u.j=o,u.i=i,u.t=a);return u}function Q(t,e,r,n,i){var o,a,l=r.length,u=m,h=0,c=0;for(n=n||20,i=i||3,a=0;a<l;a+=6)o=$(1,t,e,0,1,n,r[a],r[a+1],r[a+2],r[a+3],r[a+4],r[a+5],r[a+6],r[a+7]),u>s&&(u=s,h=o,c=a);return q(r,c,o=$(i,t,e,h-.05,h+.05,n,r[c],r[c+1],r[c+2],r[c+3],r[c+4],r[c+5],r[c+6],r[c+7])),c+6}function J(t){v(t[0])&&(t=[t]);var e,r,s,n,i="",o=t.length;for(r=0;r<o;r++){for(n=t[r],i+="M"+x(n[0])+","+x(n[1])+" C",e=n.length,s=2;s<e;s++)i+=x(n[s++])+","+x(n[s++])+" "+x(n[s++])+","+x(n[s++])+" "+x(n[s++])+","+x(n[s])+" ";n.closed&&(i+="z")}return i}},"./node_modules/html-entities/lib/html4-entities.js":(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=r("./node_modules/html-entities/lib/surrogate-pairs.js"),n=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],i=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],o={},a={};!function(){for(var t=0,e=n.length;t<e;){var r=n[t],s=i[t];o[r]=String.fromCharCode(s),a[s]=r,t++}}();var l=function(){function t(){}return t.prototype.decode=function(t){return t&&t.length?t.replace(/&(#?[\w\d]+);?/g,(function(t,e){var r;if("#"===e.charAt(0)){var n="x"===e.charAt(1).toLowerCase()?parseInt(e.substr(2),16):parseInt(e.substr(1));(!isNaN(n)||n>=-32768)&&(r=n<=65535?String.fromCharCode(n):s.fromCodePoint(n))}else r=o[e];return r||t})):""},t.decode=function(e){return(new t).decode(e)},t.prototype.encode=function(t){if(!t||!t.length)return"";for(var e=t.length,r="",s=0;s<e;){var n=a[t.charCodeAt(s)];r+=n?"&"+n+";":t.charAt(s),s++}return r},t.encode=function(e){return(new t).encode(e)},t.prototype.encodeNonUTF=function(t){if(!t||!t.length)return"";for(var e=t.length,r="",n=0;n<e;){var i=t.charCodeAt(n),o=a[i];o?r+="&"+o+";":i<32||i>126?i>=s.highSurrogateFrom&&i<=s.highSurrogateTo?(r+="&#"+s.getCodePoint(t,n)+";",n++):r+="&#"+i+";":r+=t.charAt(n),n++}return r},t.encodeNonUTF=function(e){return(new t).encodeNonUTF(e)},t.prototype.encodeNonASCII=function(t){if(!t||!t.length)return"";for(var e=t.length,r="",n=0;n<e;){var i=t.charCodeAt(n);i<=255?r+=t[n++]:(i>=s.highSurrogateFrom&&i<=s.highSurrogateTo?(r+="&#"+s.getCodePoint(t,n)+";",n++):r+="&#"+i+";",n++)}return r},t.encodeNonASCII=function(e){return(new t).encodeNonASCII(e)},t}();e.Html4Entities=l},"./node_modules/html-entities/lib/html5-entities.js":(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=r("./node_modules/html-entities/lib/surrogate-pairs.js"),n=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],i=[["NewLine",[10]]],o={},a={};!function(t,e){var r=n.length;for(;r--;){var s=n[r],o=s[0],a=s[1],l=a[0],u=a[1],h=l<32||l>126||62===l||60===l||38===l||34===l||39===l,c=void 0;h&&(c=e[l]=e[l]||{}),u?(t[o]=String.fromCharCode(l)+String.fromCharCode(u),h&&(c[u]=o)):(t[o]=String.fromCharCode(l),h&&(c[""]=o))}r=i.length;for(;r--;){var d=i[r],p=(o=d[0],d[1]);l=p[0],u=p[1];t[o]=String.fromCharCode(l)+(u?String.fromCharCode(u):"")}}(o,a);var l=function(){function t(){}return t.prototype.decode=function(t){return t&&t.length?t.replace(/&(#?[\w\d]+);?/g,(function(t,e){var r;if("#"===e.charAt(0)){var n="x"===e.charAt(1)?parseInt(e.substr(2).toLowerCase(),16):parseInt(e.substr(1));(!isNaN(n)||n>=-32768)&&(r=n<=65535?String.fromCharCode(n):s.fromCodePoint(n))}else r=o[e];return r||t})):""},t.decode=function(e){return(new t).decode(e)},t.prototype.encode=function(t){if(!t||!t.length)return"";for(var e=t.length,r="",s=0;s<e;){var n=a[t.charCodeAt(s)];if(n){var i=n[t.charCodeAt(s+1)];if(i?s++:i=n[""],i){r+="&"+i+";",s++;continue}}r+=t.charAt(s),s++}return r},t.encode=function(e){return(new t).encode(e)},t.prototype.encodeNonUTF=function(t){if(!t||!t.length)return"";for(var e=t.length,r="",n=0;n<e;){var i=t.charCodeAt(n),o=a[i];if(o){var l=o[t.charCodeAt(n+1)];if(l?n++:l=o[""],l){r+="&"+l+";",n++;continue}}i<32||i>126?i>=s.highSurrogateFrom&&i<=s.highSurrogateTo?(r+="&#"+s.getCodePoint(t,n)+";",n++):r+="&#"+i+";":r+=t.charAt(n),n++}return r},t.encodeNonUTF=function(e){return(new t).encodeNonUTF(e)},t.prototype.encodeNonASCII=function(t){if(!t||!t.length)return"";for(var e=t.length,r="",n=0;n<e;){var i=t.charCodeAt(n);i<=255?r+=t[n++]:i>=s.highSurrogateFrom&&i<=s.highSurrogateTo?(r+="&#"+s.getCodePoint(t,n)+";",n+=2):(r+="&#"+i+";",n++)}return r},t.encodeNonASCII=function(e){return(new t).encodeNonASCII(e)},t}();e.Html5Entities=l},"./node_modules/html-entities/lib/index.js":(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=r("./node_modules/html-entities/lib/xml-entities.js");e.XmlEntities=s.XmlEntities;var n=r("./node_modules/html-entities/lib/html4-entities.js");e.Html4Entities=n.Html4Entities;var i=r("./node_modules/html-entities/lib/html5-entities.js");e.Html5Entities=i.Html5Entities,e.AllHtmlEntities=i.Html5Entities},"./node_modules/html-entities/lib/surrogate-pairs.js":(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fromCodePoint=String.fromCodePoint||function(t){return String.fromCharCode(Math.floor((t-65536)/1024)+55296,(t-65536)%1024+56320)},e.getCodePoint=String.prototype.codePointAt?function(t,e){return t.codePointAt(e)}:function(t,e){return 1024*(t.charCodeAt(e)-55296)+t.charCodeAt(e+1)-56320+65536},e.highSurrogateFrom=55296,e.highSurrogateTo=56319},"./node_modules/html-entities/lib/xml-entities.js":(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=r("./node_modules/html-entities/lib/surrogate-pairs.js"),n={"&lt":"<","&gt":">","&quot":'"',"&apos":"'","&amp":"&","&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},i={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},o={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"},a=function(){function t(){}return t.prototype.encode=function(t){return t&&t.length?t.replace(/[<>"'&]/g,(function(t){return o[t]})):""},t.encode=function(e){return(new t).encode(e)},t.prototype.decode=function(t){return t&&t.length?t.replace(/&#?[0-9a-zA-Z]+;?/g,(function(t){if("#"===t.charAt(1)){var e="x"===t.charAt(2).toLowerCase()?parseInt(t.substr(3),16):parseInt(t.substr(2));return!isNaN(e)||e>=-32768?e<=65535?String.fromCharCode(e):s.fromCodePoint(e):""}return n[t]||t})):""},t.decode=function(e){return(new t).decode(e)},t.prototype.encodeNonUTF=function(t){if(!t||!t.length)return"";for(var e=t.length,r="",n=0;n<e;){var o=t.charCodeAt(n),a=i[o];a?(r+="&"+a+";",n++):(o<32||o>126?o>=s.highSurrogateFrom&&o<=s.highSurrogateTo?(r+="&#"+s.getCodePoint(t,n)+";",n++):r+="&#"+o+";":r+=t.charAt(n),n++)}return r},t.encodeNonUTF=function(e){return(new t).encodeNonUTF(e)},t.prototype.encodeNonASCII=function(t){if(!t||!t.length)return"";for(var e=t.length,r="",n=0;n<e;){var i=t.charCodeAt(n);i<=255?r+=t[n++]:(i>=s.highSurrogateFrom&&i<=s.highSurrogateTo?(r+="&#"+s.getCodePoint(t,n)+";",n++):r+="&#"+i+";",n++)}return r},t.encodeNonASCII=function(e){return(new t).encodeNonASCII(e)},t}();e.XmlEntities=a},"./node_modules/lodash/_DataView.js":(t,e,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"DataView");t.exports=s},"./node_modules/lodash/_Hash.js":(t,e,r)=>{var s=r("./node_modules/lodash/_hashClear.js"),n=r("./node_modules/lodash/_hashDelete.js"),i=r("./node_modules/lodash/_hashGet.js"),o=r("./node_modules/lodash/_hashHas.js"),a=r("./node_modules/lodash/_hashSet.js");function l(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var s=t[e];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,t.exports=l},"./node_modules/lodash/_ListCache.js":(t,e,r)=>{var s=r("./node_modules/lodash/_listCacheClear.js"),n=r("./node_modules/lodash/_listCacheDelete.js"),i=r("./node_modules/lodash/_listCacheGet.js"),o=r("./node_modules/lodash/_listCacheHas.js"),a=r("./node_modules/lodash/_listCacheSet.js");function l(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var s=t[e];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,t.exports=l},"./node_modules/lodash/_Map.js":(t,e,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Map");t.exports=s},"./node_modules/lodash/_MapCache.js":(t,e,r)=>{var s=r("./node_modules/lodash/_mapCacheClear.js"),n=r("./node_modules/lodash/_mapCacheDelete.js"),i=r("./node_modules/lodash/_mapCacheGet.js"),o=r("./node_modules/lodash/_mapCacheHas.js"),a=r("./node_modules/lodash/_mapCacheSet.js");function l(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var s=t[e];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,t.exports=l},"./node_modules/lodash/_Promise.js":(t,e,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Promise");t.exports=s},"./node_modules/lodash/_Set.js":(t,e,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Set");t.exports=s},"./node_modules/lodash/_SetCache.js":(t,e,r)=>{var s=r("./node_modules/lodash/_MapCache.js"),n=r("./node_modules/lodash/_setCacheAdd.js"),i=r("./node_modules/lodash/_setCacheHas.js");function o(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new s;++e<r;)this.add(t[e])}o.prototype.add=o.prototype.push=n,o.prototype.has=i,t.exports=o},"./node_modules/lodash/_Stack.js":(t,e,r)=>{var s=r("./node_modules/lodash/_ListCache.js"),n=r("./node_modules/lodash/_stackClear.js"),i=r("./node_modules/lodash/_stackDelete.js"),o=r("./node_modules/lodash/_stackGet.js"),a=r("./node_modules/lodash/_stackHas.js"),l=r("./node_modules/lodash/_stackSet.js");function u(t){var e=this.__data__=new s(t);this.size=e.size}u.prototype.clear=n,u.prototype.delete=i,u.prototype.get=o,u.prototype.has=a,u.prototype.set=l,t.exports=u},"./node_modules/lodash/_Symbol.js":(t,e,r)=>{var s=r("./node_modules/lodash/_root.js").Symbol;t.exports=s},"./node_modules/lodash/_Uint8Array.js":(t,e,r)=>{var s=r("./node_modules/lodash/_root.js").Uint8Array;t.exports=s},"./node_modules/lodash/_WeakMap.js":(t,e,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"WeakMap");t.exports=s},"./node_modules/lodash/_arrayEach.js":t=>{t.exports=function(t,e){for(var r=-1,s=null==t?0:t.length;++r<s&&!1!==e(t[r],r,t););return t}},"./node_modules/lodash/_arrayFilter.js":t=>{t.exports=function(t,e){for(var r=-1,s=null==t?0:t.length,n=0,i=[];++r<s;){var o=t[r];e(o,r,t)&&(i[n++]=o)}return i}},"./node_modules/lodash/_arrayLikeKeys.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseTimes.js"),n=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isBuffer.js"),a=r("./node_modules/lodash/_isIndex.js"),l=r("./node_modules/lodash/isTypedArray.js"),u=Object.prototype.hasOwnProperty;t.exports=function(t,e){var r=i(t),h=!r&&n(t),c=!r&&!h&&o(t),d=!r&&!h&&!c&&l(t),p=r||h||c||d,f=p?s(t.length,String):[],m=f.length;for(var g in t)!e&&!u.call(t,g)||p&&("length"==g||c&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||a(g,m))||f.push(g);return f}},"./node_modules/lodash/_arrayMap.js":t=>{t.exports=function(t,e){for(var r=-1,s=null==t?0:t.length,n=Array(s);++r<s;)n[r]=e(t[r],r,t);return n}},"./node_modules/lodash/_arrayPush.js":t=>{t.exports=function(t,e){for(var r=-1,s=e.length,n=t.length;++r<s;)t[n+r]=e[r];return t}},"./node_modules/lodash/_arraySome.js":t=>{t.exports=function(t,e){for(var r=-1,s=null==t?0:t.length;++r<s;)if(e(t[r],r,t))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(t,e,r)=>{var s=r("./node_modules/lodash/eq.js");t.exports=function(t,e){for(var r=t.length;r--;)if(s(t[r][0],e))return r;return-1}},"./node_modules/lodash/_baseEach.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseForOwn.js"),n=r("./node_modules/lodash/_createBaseEach.js")(s);t.exports=n},"./node_modules/lodash/_baseFor.js":(t,e,r)=>{var s=r("./node_modules/lodash/_createBaseFor.js")();t.exports=s},"./node_modules/lodash/_baseForOwn.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseFor.js"),n=r("./node_modules/lodash/keys.js");t.exports=function(t,e){return t&&s(t,e,n)}},"./node_modules/lodash/_baseGet.js":(t,e,r)=>{var s=r("./node_modules/lodash/_castPath.js"),n=r("./node_modules/lodash/_toKey.js");t.exports=function(t,e){for(var r=0,i=(e=s(e,t)).length;null!=t&&r<i;)t=t[n(e[r++])];return r&&r==i?t:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(t,e,r)=>{var s=r("./node_modules/lodash/_arrayPush.js"),n=r("./node_modules/lodash/isArray.js");t.exports=function(t,e,r){var i=e(t);return n(t)?i:s(i,r(t))}},"./node_modules/lodash/_baseGetTag.js":(t,e,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_getRawTag.js"),i=r("./node_modules/lodash/_objectToString.js"),o=s?s.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":o&&o in Object(t)?n(t):i(t)}},"./node_modules/lodash/_baseHasIn.js":t=>{t.exports=function(t,e){return null!=t&&e in Object(t)}},"./node_modules/lodash/_baseIsArguments.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObjectLike.js");t.exports=function(t){return n(t)&&"[object Arguments]"==s(t)}},"./node_modules/lodash/_baseIsEqual.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseIsEqualDeep.js"),n=r("./node_modules/lodash/isObjectLike.js");t.exports=function t(e,r,i,o,a){return e===r||(null==e||null==r||!n(e)&&!n(r)?e!=e&&r!=r:s(e,r,i,o,t,a))}},"./node_modules/lodash/_baseIsEqualDeep.js":(t,e,r)=>{var s=r("./node_modules/lodash/_Stack.js"),n=r("./node_modules/lodash/_equalArrays.js"),i=r("./node_modules/lodash/_equalByTag.js"),o=r("./node_modules/lodash/_equalObjects.js"),a=r("./node_modules/lodash/_getTag.js"),l=r("./node_modules/lodash/isArray.js"),u=r("./node_modules/lodash/isBuffer.js"),h=r("./node_modules/lodash/isTypedArray.js"),c="[object Arguments]",d="[object Array]",p="[object Object]",f=Object.prototype.hasOwnProperty;t.exports=function(t,e,r,m,g,v){var _=l(t),y=l(e),b=_?d:a(t),w=y?d:a(e),x=(b=b==c?p:b)==p,j=(w=w==c?p:w)==p,E=b==w;if(E&&u(t)){if(!u(e))return!1;_=!0,x=!1}if(E&&!x)return v||(v=new s),_||h(t)?n(t,e,r,m,g,v):i(t,e,b,r,m,g,v);if(!(1&r)){var T=x&&f.call(t,"__wrapped__"),C=j&&f.call(e,"__wrapped__");if(T||C){var A=T?t.value():t,S=C?e.value():e;return v||(v=new s),g(A,S,r,m,v)}}return!!E&&(v||(v=new s),o(t,e,r,m,g,v))}},"./node_modules/lodash/_baseIsMatch.js":(t,e,r)=>{var s=r("./node_modules/lodash/_Stack.js"),n=r("./node_modules/lodash/_baseIsEqual.js");t.exports=function(t,e,r,i){var o=r.length,a=o,l=!i;if(null==t)return!a;for(t=Object(t);o--;){var u=r[o];if(l&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++o<a;){var h=(u=r[o])[0],c=t[h],d=u[1];if(l&&u[2]){if(void 0===c&&!(h in t))return!1}else{var p=new s;if(i)var f=i(c,d,h,t,e,p);if(!(void 0===f?n(d,c,3,i,p):f))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(t,e,r)=>{var s=r("./node_modules/lodash/isFunction.js"),n=r("./node_modules/lodash/_isMasked.js"),i=r("./node_modules/lodash/isObject.js"),o=r("./node_modules/lodash/_toSource.js"),a=/^\[object .+?Constructor\]$/,l=Function.prototype,u=Object.prototype,h=l.toString,c=u.hasOwnProperty,d=RegExp("^"+h.call(c).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||n(t))&&(s(t)?d:a).test(o(t))}},"./node_modules/lodash/_baseIsTypedArray.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isLength.js"),i=r("./node_modules/lodash/isObjectLike.js"),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,t.exports=function(t){return i(t)&&n(t.length)&&!!o[s(t)]}},"./node_modules/lodash/_baseIteratee.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseMatches.js"),n=r("./node_modules/lodash/_baseMatchesProperty.js"),i=r("./node_modules/lodash/identity.js"),o=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/property.js");t.exports=function(t){return"function"==typeof t?t:null==t?i:"object"==typeof t?o(t)?n(t[0],t[1]):s(t):a(t)}},"./node_modules/lodash/_baseKeys.js":(t,e,r)=>{var s=r("./node_modules/lodash/_isPrototype.js"),n=r("./node_modules/lodash/_nativeKeys.js"),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!s(t))return n(t);var e=[];for(var r in Object(t))i.call(t,r)&&"constructor"!=r&&e.push(r);return e}},"./node_modules/lodash/_baseMap.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseEach.js"),n=r("./node_modules/lodash/isArrayLike.js");t.exports=function(t,e){var r=-1,i=n(t)?Array(t.length):[];return s(t,(function(t,s,n){i[++r]=e(t,s,n)})),i}},"./node_modules/lodash/_baseMatches.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseIsMatch.js"),n=r("./node_modules/lodash/_getMatchData.js"),i=r("./node_modules/lodash/_matchesStrictComparable.js");t.exports=function(t){var e=n(t);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(r){return r===t||s(r,t,e)}}},"./node_modules/lodash/_baseMatchesProperty.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseIsEqual.js"),n=r("./node_modules/lodash/get.js"),i=r("./node_modules/lodash/hasIn.js"),o=r("./node_modules/lodash/_isKey.js"),a=r("./node_modules/lodash/_isStrictComparable.js"),l=r("./node_modules/lodash/_matchesStrictComparable.js"),u=r("./node_modules/lodash/_toKey.js");t.exports=function(t,e){return o(t)&&a(e)?l(u(t),e):function(r){var o=n(r,t);return void 0===o&&o===e?i(r,t):s(e,o,3)}}},"./node_modules/lodash/_baseProperty.js":t=>{t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},"./node_modules/lodash/_basePropertyDeep.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseGet.js");t.exports=function(t){return function(e){return s(e,t)}}},"./node_modules/lodash/_baseTimes.js":t=>{t.exports=function(t,e){for(var r=-1,s=Array(t);++r<t;)s[r]=e(r);return s}},"./node_modules/lodash/_baseToString.js":(t,e,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_arrayMap.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isSymbol.js"),a=s?s.prototype:void 0,l=a?a.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(i(e))return n(e,t)+"";if(o(e))return l?l.call(e):"";var r=e+"";return"0"==r&&1/e==-Infinity?"-0":r}},"./node_modules/lodash/_baseUnary.js":t=>{t.exports=function(t){return function(e){return t(e)}}},"./node_modules/lodash/_cacheHas.js":t=>{t.exports=function(t,e){return t.has(e)}},"./node_modules/lodash/_castFunction.js":(t,e,r)=>{var s=r("./node_modules/lodash/identity.js");t.exports=function(t){return"function"==typeof t?t:s}},"./node_modules/lodash/_castPath.js":(t,e,r)=>{var s=r("./node_modules/lodash/isArray.js"),n=r("./node_modules/lodash/_isKey.js"),i=r("./node_modules/lodash/_stringToPath.js"),o=r("./node_modules/lodash/toString.js");t.exports=function(t,e){return s(t)?t:n(t,e)?[t]:i(o(t))}},"./node_modules/lodash/_coreJsData.js":(t,e,r)=>{var s=r("./node_modules/lodash/_root.js")["__core-js_shared__"];t.exports=s},"./node_modules/lodash/_createBaseEach.js":(t,e,r)=>{var s=r("./node_modules/lodash/isArrayLike.js");t.exports=function(t,e){return function(r,n){if(null==r)return r;if(!s(r))return t(r,n);for(var i=r.length,o=e?i:-1,a=Object(r);(e?o--:++o<i)&&!1!==n(a[o],o,a););return r}}},"./node_modules/lodash/_createBaseFor.js":t=>{t.exports=function(t){return function(e,r,s){for(var n=-1,i=Object(e),o=s(e),a=o.length;a--;){var l=o[t?a:++n];if(!1===r(i[l],l,i))break}return e}}},"./node_modules/lodash/_equalArrays.js":(t,e,r)=>{var s=r("./node_modules/lodash/_SetCache.js"),n=r("./node_modules/lodash/_arraySome.js"),i=r("./node_modules/lodash/_cacheHas.js");t.exports=function(t,e,r,o,a,l){var u=1&r,h=t.length,c=e.length;if(h!=c&&!(u&&c>h))return!1;var d=l.get(t),p=l.get(e);if(d&&p)return d==e&&p==t;var f=-1,m=!0,g=2&r?new s:void 0;for(l.set(t,e),l.set(e,t);++f<h;){var v=t[f],_=e[f];if(o)var y=u?o(_,v,f,e,t,l):o(v,_,f,t,e,l);if(void 0!==y){if(y)continue;m=!1;break}if(g){if(!n(e,(function(t,e){if(!i(g,e)&&(v===t||a(v,t,r,o,l)))return g.push(e)}))){m=!1;break}}else if(v!==_&&!a(v,_,r,o,l)){m=!1;break}}return l.delete(t),l.delete(e),m}},"./node_modules/lodash/_equalByTag.js":(t,e,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_Uint8Array.js"),i=r("./node_modules/lodash/eq.js"),o=r("./node_modules/lodash/_equalArrays.js"),a=r("./node_modules/lodash/_mapToArray.js"),l=r("./node_modules/lodash/_setToArray.js"),u=s?s.prototype:void 0,h=u?u.valueOf:void 0;t.exports=function(t,e,r,s,u,c,d){switch(r){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!c(new n(t),new n(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var p=a;case"[object Set]":var f=1&s;if(p||(p=l),t.size!=e.size&&!f)return!1;var m=d.get(t);if(m)return m==e;s|=2,d.set(t,e);var g=o(p(t),p(e),s,u,c,d);return d.delete(t),g;case"[object Symbol]":if(h)return h.call(t)==h.call(e)}return!1}},"./node_modules/lodash/_equalObjects.js":(t,e,r)=>{var s=r("./node_modules/lodash/_getAllKeys.js"),n=Object.prototype.hasOwnProperty;t.exports=function(t,e,r,i,o,a){var l=1&r,u=s(t),h=u.length;if(h!=s(e).length&&!l)return!1;for(var c=h;c--;){var d=u[c];if(!(l?d in e:n.call(e,d)))return!1}var p=a.get(t),f=a.get(e);if(p&&f)return p==e&&f==t;var m=!0;a.set(t,e),a.set(e,t);for(var g=l;++c<h;){var v=t[d=u[c]],_=e[d];if(i)var y=l?i(_,v,d,e,t,a):i(v,_,d,t,e,a);if(!(void 0===y?v===_||o(v,_,r,i,a):y)){m=!1;break}g||(g="constructor"==d)}if(m&&!g){var b=t.constructor,w=e.constructor;b==w||!("constructor"in t)||!("constructor"in e)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(m=!1)}return a.delete(t),a.delete(e),m}},"./node_modules/lodash/_freeGlobal.js":(t,e,r)=>{var s="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;t.exports=s},"./node_modules/lodash/_getAllKeys.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseGetAllKeys.js"),n=r("./node_modules/lodash/_getSymbols.js"),i=r("./node_modules/lodash/keys.js");t.exports=function(t){return s(t,i,n)}},"./node_modules/lodash/_getMapData.js":(t,e,r)=>{var s=r("./node_modules/lodash/_isKeyable.js");t.exports=function(t,e){var r=t.__data__;return s(e)?r["string"==typeof e?"string":"hash"]:r.map}},"./node_modules/lodash/_getMatchData.js":(t,e,r)=>{var s=r("./node_modules/lodash/_isStrictComparable.js"),n=r("./node_modules/lodash/keys.js");t.exports=function(t){for(var e=n(t),r=e.length;r--;){var i=e[r],o=t[i];e[r]=[i,o,s(o)]}return e}},"./node_modules/lodash/_getNative.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseIsNative.js"),n=r("./node_modules/lodash/_getValue.js");t.exports=function(t,e){var r=n(t,e);return s(r)?r:void 0}},"./node_modules/lodash/_getRawTag.js":(t,e,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=Object.prototype,i=n.hasOwnProperty,o=n.toString,a=s?s.toStringTag:void 0;t.exports=function(t){var e=i.call(t,a),r=t[a];try{t[a]=void 0;var s=!0}catch(t){}var n=o.call(t);return s&&(e?t[a]=r:delete t[a]),n}},"./node_modules/lodash/_getSymbols.js":(t,e,r)=>{var s=r("./node_modules/lodash/_arrayFilter.js"),n=r("./node_modules/lodash/stubArray.js"),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,a=o?function(t){return null==t?[]:(t=Object(t),s(o(t),(function(e){return i.call(t,e)})))}:n;t.exports=a},"./node_modules/lodash/_getTag.js":(t,e,r)=>{var s=r("./node_modules/lodash/_DataView.js"),n=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_Promise.js"),o=r("./node_modules/lodash/_Set.js"),a=r("./node_modules/lodash/_WeakMap.js"),l=r("./node_modules/lodash/_baseGetTag.js"),u=r("./node_modules/lodash/_toSource.js"),h="[object Map]",c="[object Promise]",d="[object Set]",p="[object WeakMap]",f="[object DataView]",m=u(s),g=u(n),v=u(i),_=u(o),y=u(a),b=l;(s&&b(new s(new ArrayBuffer(1)))!=f||n&&b(new n)!=h||i&&b(i.resolve())!=c||o&&b(new o)!=d||a&&b(new a)!=p)&&(b=function(t){var e=l(t),r="[object Object]"==e?t.constructor:void 0,s=r?u(r):"";if(s)switch(s){case m:return f;case g:return h;case v:return c;case _:return d;case y:return p}return e}),t.exports=b},"./node_modules/lodash/_getValue.js":t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},"./node_modules/lodash/_hasPath.js":(t,e,r)=>{var s=r("./node_modules/lodash/_castPath.js"),n=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/_isIndex.js"),a=r("./node_modules/lodash/isLength.js"),l=r("./node_modules/lodash/_toKey.js");t.exports=function(t,e,r){for(var u=-1,h=(e=s(e,t)).length,c=!1;++u<h;){var d=l(e[u]);if(!(c=null!=t&&r(t,d)))break;t=t[d]}return c||++u!=h?c:!!(h=null==t?0:t.length)&&a(h)&&o(d,h)&&(i(t)||n(t))}},"./node_modules/lodash/_hashClear.js":(t,e,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js");t.exports=function(){this.__data__=s?s(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},"./node_modules/lodash/_hashGet.js":(t,e,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(s){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return n.call(e,t)?e[t]:void 0}},"./node_modules/lodash/_hashHas.js":(t,e,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return s?void 0!==e[t]:n.call(e,t)}},"./node_modules/lodash/_hashSet.js":(t,e,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js");t.exports=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=s&&void 0===e?"__lodash_hash_undefined__":e,this}},"./node_modules/lodash/_isIndex.js":t=>{var e=/^(?:0|[1-9]\d*)$/;t.exports=function(t,r){var s=typeof t;return!!(r=null==r?9007199254740991:r)&&("number"==s||"symbol"!=s&&e.test(t))&&t>-1&&t%1==0&&t<r}},"./node_modules/lodash/_isKey.js":(t,e,r)=>{var s=r("./node_modules/lodash/isArray.js"),n=r("./node_modules/lodash/isSymbol.js"),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;t.exports=function(t,e){if(s(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!n(t))||(o.test(t)||!i.test(t)||null!=e&&t in Object(e))}},"./node_modules/lodash/_isKeyable.js":t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},"./node_modules/lodash/_isMasked.js":(t,e,r)=>{var s,n=r("./node_modules/lodash/_coreJsData.js"),i=(s=/[^.]+$/.exec(n&&n.keys&&n.keys.IE_PROTO||""))?"Symbol(src)_1."+s:"";t.exports=function(t){return!!i&&i in t}},"./node_modules/lodash/_isPrototype.js":t=>{var e=Object.prototype;t.exports=function(t){var r=t&&t.constructor;return t===("function"==typeof r&&r.prototype||e)}},"./node_modules/lodash/_isStrictComparable.js":(t,e,r)=>{var s=r("./node_modules/lodash/isObject.js");t.exports=function(t){return t==t&&!s(t)}},"./node_modules/lodash/_listCacheClear.js":t=>{t.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(t,e,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js"),n=Array.prototype.splice;t.exports=function(t){var e=this.__data__,r=s(e,t);return!(r<0)&&(r==e.length-1?e.pop():n.call(e,r,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(t,e,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t){var e=this.__data__,r=s(e,t);return r<0?void 0:e[r][1]}},"./node_modules/lodash/_listCacheHas.js":(t,e,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t){return s(this.__data__,t)>-1}},"./node_modules/lodash/_listCacheSet.js":(t,e,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t,e){var r=this.__data__,n=s(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this}},"./node_modules/lodash/_mapCacheClear.js":(t,e,r)=>{var s=r("./node_modules/lodash/_Hash.js"),n=r("./node_modules/lodash/_ListCache.js"),i=r("./node_modules/lodash/_Map.js");t.exports=function(){this.size=0,this.__data__={hash:new s,map:new(i||n),string:new s}}},"./node_modules/lodash/_mapCacheDelete.js":(t,e,r)=>{var s=r("./node_modules/lodash/_getMapData.js");t.exports=function(t){var e=s(this,t).delete(t);return this.size-=e?1:0,e}},"./node_modules/lodash/_mapCacheGet.js":(t,e,r)=>{var s=r("./node_modules/lodash/_getMapData.js");t.exports=function(t){return s(this,t).get(t)}},"./node_modules/lodash/_mapCacheHas.js":(t,e,r)=>{var s=r("./node_modules/lodash/_getMapData.js");t.exports=function(t){return s(this,t).has(t)}},"./node_modules/lodash/_mapCacheSet.js":(t,e,r)=>{var s=r("./node_modules/lodash/_getMapData.js");t.exports=function(t,e){var r=s(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this}},"./node_modules/lodash/_mapToArray.js":t=>{t.exports=function(t){var e=-1,r=Array(t.size);return t.forEach((function(t,s){r[++e]=[s,t]})),r}},"./node_modules/lodash/_matchesStrictComparable.js":t=>{t.exports=function(t,e){return function(r){return null!=r&&(r[t]===e&&(void 0!==e||t in Object(r)))}}},"./node_modules/lodash/_memoizeCapped.js":(t,e,r)=>{var s=r("./node_modules/lodash/memoize.js");t.exports=function(t){var e=s(t,(function(t){return 500===r.size&&r.clear(),t})),r=e.cache;return e}},"./node_modules/lodash/_nativeCreate.js":(t,e,r)=>{var s=r("./node_modules/lodash/_getNative.js")(Object,"create");t.exports=s},"./node_modules/lodash/_nativeKeys.js":(t,e,r)=>{var s=r("./node_modules/lodash/_overArg.js")(Object.keys,Object);t.exports=s},"./node_modules/lodash/_nodeUtil.js":(t,e,r)=>{t=r.nmd(t);var s=r("./node_modules/lodash/_freeGlobal.js"),n=e&&!e.nodeType&&e,i=n&&t&&!t.nodeType&&t,o=i&&i.exports===n&&s.process,a=function(){try{var t=i&&i.require&&i.require("util").types;return t||o&&o.binding&&o.binding("util")}catch(t){}}();t.exports=a},"./node_modules/lodash/_objectToString.js":t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},"./node_modules/lodash/_overArg.js":t=>{t.exports=function(t,e){return function(r){return t(e(r))}}},"./node_modules/lodash/_root.js":(t,e,r)=>{var s=r("./node_modules/lodash/_freeGlobal.js"),n="object"==typeof self&&self&&self.Object===Object&&self,i=s||n||Function("return this")();t.exports=i},"./node_modules/lodash/_setCacheAdd.js":t=>{t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":t=>{t.exports=function(t){return this.__data__.has(t)}},"./node_modules/lodash/_setToArray.js":t=>{t.exports=function(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}},"./node_modules/lodash/_stackClear.js":(t,e,r)=>{var s=r("./node_modules/lodash/_ListCache.js");t.exports=function(){this.__data__=new s,this.size=0}},"./node_modules/lodash/_stackDelete.js":t=>{t.exports=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r}},"./node_modules/lodash/_stackGet.js":t=>{t.exports=function(t){return this.__data__.get(t)}},"./node_modules/lodash/_stackHas.js":t=>{t.exports=function(t){return this.__data__.has(t)}},"./node_modules/lodash/_stackSet.js":(t,e,r)=>{var s=r("./node_modules/lodash/_ListCache.js"),n=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_MapCache.js");t.exports=function(t,e){var r=this.__data__;if(r instanceof s){var o=r.__data__;if(!n||o.length<199)return o.push([t,e]),this.size=++r.size,this;r=this.__data__=new i(o)}return r.set(t,e),this.size=r.size,this}},"./node_modules/lodash/_stringToPath.js":(t,e,r)=>{var s=r("./node_modules/lodash/_memoizeCapped.js"),n=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=s((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(n,(function(t,r,s,n){e.push(s?n.replace(i,"$1"):r||t)})),e}));t.exports=o},"./node_modules/lodash/_toKey.js":(t,e,r)=>{var s=r("./node_modules/lodash/isSymbol.js");t.exports=function(t){if("string"==typeof t||s(t))return t;var e=t+"";return"0"==e&&1/t==-Infinity?"-0":e}},"./node_modules/lodash/_toSource.js":t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},"./node_modules/lodash/each.js":(t,e,r)=>{t.exports=r("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},"./node_modules/lodash/forEach.js":(t,e,r)=>{var s=r("./node_modules/lodash/_arrayEach.js"),n=r("./node_modules/lodash/_baseEach.js"),i=r("./node_modules/lodash/_castFunction.js"),o=r("./node_modules/lodash/isArray.js");t.exports=function(t,e){return(o(t)?s:n)(t,i(e))}},"./node_modules/lodash/get.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseGet.js");t.exports=function(t,e,r){var n=null==t?void 0:s(t,e);return void 0===n?r:n}},"./node_modules/lodash/hasIn.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseHasIn.js"),n=r("./node_modules/lodash/_hasPath.js");t.exports=function(t,e){return null!=t&&n(t,e,s)}},"./node_modules/lodash/identity.js":t=>{t.exports=function(t){return t}},"./node_modules/lodash/isArguments.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseIsArguments.js"),n=r("./node_modules/lodash/isObjectLike.js"),i=Object.prototype,o=i.hasOwnProperty,a=i.propertyIsEnumerable,l=s(function(){return arguments}())?s:function(t){return n(t)&&o.call(t,"callee")&&!a.call(t,"callee")};t.exports=l},"./node_modules/lodash/isArray.js":t=>{var e=Array.isArray;t.exports=e},"./node_modules/lodash/isArrayLike.js":(t,e,r)=>{var s=r("./node_modules/lodash/isFunction.js"),n=r("./node_modules/lodash/isLength.js");t.exports=function(t){return null!=t&&n(t.length)&&!s(t)}},"./node_modules/lodash/isBuffer.js":(t,e,r)=>{t=r.nmd(t);var s=r("./node_modules/lodash/_root.js"),n=r("./node_modules/lodash/stubFalse.js"),i=e&&!e.nodeType&&e,o=i&&t&&!t.nodeType&&t,a=o&&o.exports===i?s.Buffer:void 0,l=(a?a.isBuffer:void 0)||n;t.exports=l},"./node_modules/lodash/isFunction.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObject.js");t.exports=function(t){if(!n(t))return!1;var e=s(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},"./node_modules/lodash/isLength.js":t=>{t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},"./node_modules/lodash/isObject.js":t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},"./node_modules/lodash/isObjectLike.js":t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},"./node_modules/lodash/isSymbol.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObjectLike.js");t.exports=function(t){return"symbol"==typeof t||n(t)&&"[object Symbol]"==s(t)}},"./node_modules/lodash/isTypedArray.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseIsTypedArray.js"),n=r("./node_modules/lodash/_baseUnary.js"),i=r("./node_modules/lodash/_nodeUtil.js"),o=i&&i.isTypedArray,a=o?n(o):s;t.exports=a},"./node_modules/lodash/keys.js":(t,e,r)=>{var s=r("./node_modules/lodash/_arrayLikeKeys.js"),n=r("./node_modules/lodash/_baseKeys.js"),i=r("./node_modules/lodash/isArrayLike.js");t.exports=function(t){return i(t)?s(t):n(t)}},"./node_modules/lodash/map.js":(t,e,r)=>{var s=r("./node_modules/lodash/_arrayMap.js"),n=r("./node_modules/lodash/_baseIteratee.js"),i=r("./node_modules/lodash/_baseMap.js"),o=r("./node_modules/lodash/isArray.js");t.exports=function(t,e){return(o(t)?s:i)(t,n(e,3))}},"./node_modules/lodash/memoize.js":(t,e,r)=>{var s=r("./node_modules/lodash/_MapCache.js");function n(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var r=function(){var s=arguments,n=e?e.apply(this,s):s[0],i=r.cache;if(i.has(n))return i.get(n);var o=t.apply(this,s);return r.cache=i.set(n,o)||i,o};return r.cache=new(n.Cache||s),r}n.Cache=s,t.exports=n},"./node_modules/lodash/property.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseProperty.js"),n=r("./node_modules/lodash/_basePropertyDeep.js"),i=r("./node_modules/lodash/_isKey.js"),o=r("./node_modules/lodash/_toKey.js");t.exports=function(t){return i(t)?s(o(t)):n(t)}},"./node_modules/lodash/stubArray.js":t=>{t.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":t=>{t.exports=function(){return!1}},"./node_modules/lodash/toString.js":(t,e,r)=>{var s=r("./node_modules/lodash/_baseToString.js");t.exports=function(t){return null==t?"":s(t)}},"./node_modules/loglevel/lib/loglevel.js":function(t,e,r){var s,n;!function(i,o){"use strict";void 0===(n="function"==typeof(s=function(){var t=function(){},e="undefined",r=typeof window!==e&&typeof window.navigator!==e&&/Trident\/|MSIE /.test(window.navigator.userAgent),s=["trace","debug","info","warn","error"];function n(t,e){var r=t[e];if("function"==typeof r.bind)return r.bind(t);try{return Function.prototype.bind.call(r,t)}catch(e){return function(){return Function.prototype.apply.apply(r,[t,arguments])}}}function i(){console.log&&(console.log.apply?console.log.apply(console,arguments):Function.prototype.apply.apply(console.log,[console,arguments])),console.trace&&console.trace()}function o(s){return"debug"===s&&(s="log"),typeof console!==e&&("trace"===s&&r?i:void 0!==console[s]?n(console,s):void 0!==console.log?n(console,"log"):t)}function a(e,r){for(var n=0;n<s.length;n++){var i=s[n];this[i]=n<e?t:this.methodFactory(i,e,r)}this.log=this.debug}function l(t,r,s){return function(){typeof console!==e&&(a.call(this,r,s),this[t].apply(this,arguments))}}function u(t,e,r){return o(t)||l.apply(this,arguments)}function h(t,r,n){var i,o=this,l="loglevel";function h(t){var r=(s[t]||"silent").toUpperCase();if(typeof window!==e&&l){try{return void(window.localStorage[l]=r)}catch(t){}try{window.document.cookie=encodeURIComponent(l)+"="+r+";"}catch(t){}}}function c(){var t;if(typeof window!==e&&l){try{t=window.localStorage[l]}catch(t){}if(typeof t===e)try{var r=window.document.cookie,s=r.indexOf(encodeURIComponent(l)+"=");-1!==s&&(t=/^([^;]+)/.exec(r.slice(s))[1])}catch(t){}return void 0===o.levels[t]&&(t=void 0),t}}"string"==typeof t?l+=":"+t:"symbol"==typeof t&&(l=void 0),o.name=t,o.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},o.methodFactory=n||u,o.getLevel=function(){return i},o.setLevel=function(r,s){if("string"==typeof r&&void 0!==o.levels[r.toUpperCase()]&&(r=o.levels[r.toUpperCase()]),!("number"==typeof r&&r>=0&&r<=o.levels.SILENT))throw"log.setLevel() called with invalid level: "+r;if(i=r,!1!==s&&h(r),a.call(o,r,t),typeof console===e&&r<o.levels.SILENT)return"No console available for logging"},o.setDefaultLevel=function(t){c()||o.setLevel(t,!1)},o.enableAll=function(t){o.setLevel(o.levels.TRACE,t)},o.disableAll=function(t){o.setLevel(o.levels.SILENT,t)};var d=c();null==d&&(d=null==r?"WARN":r),o.setLevel(d,!1)}var c=new h,d={};c.getLogger=function(t){if("symbol"!=typeof t&&"string"!=typeof t||""===t)throw new TypeError("You must supply a name when creating a logger.");var e=d[t];return e||(e=d[t]=new h(t,c.getLevel(),c.methodFactory)),e};var p=typeof window!==e?window.log:void 0;return c.noConflict=function(){return typeof window!==e&&window.log===c&&(window.log=p),c},c.getLoggers=function(){return d},c.default=c,c})?s.call(e,r,e,t):s)||(t.exports=n)}()},"./node_modules/normalize-wheel/index.js":(t,e,r)=>{t.exports=r("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":t=>{"use strict";var e=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:e,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:e&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:e&&!!window.screen,isInWorker:!e};t.exports=r},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":t=>{var e,r,s,n,i,o,a,l,u,h,c,d,p,f,m,g=!1;function v(){if(!g){g=!0;var t=navigator.userAgent,v=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(t),_=/(Mac OS X)|(Windows)|(Linux)/.exec(t);if(d=/\b(iPhone|iP[ao]d)/.exec(t),p=/\b(iP[ao]d)/.exec(t),h=/Android/i.exec(t),f=/FBAN\/\w+;/i.exec(t),m=/Mobile/i.exec(t),c=!!/Win64/.exec(t),v){(e=v[1]?parseFloat(v[1]):v[5]?parseFloat(v[5]):NaN)&&document&&document.documentMode&&(e=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(t);o=y?parseFloat(y[1])+4:e,r=v[2]?parseFloat(v[2]):NaN,s=v[3]?parseFloat(v[3]):NaN,(n=v[4]?parseFloat(v[4]):NaN)?(v=/(?:Chrome\/(\d+\.\d+))/.exec(t),i=v&&v[1]?parseFloat(v[1]):NaN):i=NaN}else e=r=s=i=n=NaN;if(_){if(_[1]){var b=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(t);a=!b||parseFloat(b[1].replace("_","."))}else a=!1;l=!!_[2],u=!!_[3]}else a=l=u=!1}}var _={ie:function(){return v()||e},ieCompatibilityMode:function(){return v()||o>e},ie64:function(){return _.ie()&&c},firefox:function(){return v()||r},opera:function(){return v()||s},webkit:function(){return v()||n},safari:function(){return _.webkit()},chrome:function(){return v()||i},windows:function(){return v()||l},osx:function(){return v()||a},linux:function(){return v()||u},iphone:function(){return v()||d},mobile:function(){return v()||d||p||h||m},nativeApp:function(){return v()||f},android:function(){return v()||h},ipad:function(){return v()||p}};t.exports=_},"./node_modules/normalize-wheel/src/isEventSupported.js":(t,e,r)=>{"use strict";var s,n=r("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");n.canUseDOM&&(s=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),t.exports=function(t,e){if(!n.canUseDOM||e&&!("addEventListener"in document))return!1;var r="on"+t,i=r in document;if(!i){var o=document.createElement("div");o.setAttribute(r,"return;"),i="function"==typeof o[r]}return!i&&s&&"wheel"===t&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(t,e,r)=>{"use strict";var s=r("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),n=r("./node_modules/normalize-wheel/src/isEventSupported.js");function i(t){var e=0,r=0,s=0,n=0;return"detail"in t&&(r=t.detail),"wheelDelta"in t&&(r=-t.wheelDelta/120),"wheelDeltaY"in t&&(r=-t.wheelDeltaY/120),"wheelDeltaX"in t&&(e=-t.wheelDeltaX/120),"axis"in t&&t.axis===t.HORIZONTAL_AXIS&&(e=r,r=0),s=10*e,n=10*r,"deltaY"in t&&(n=t.deltaY),"deltaX"in t&&(s=t.deltaX),(s||n)&&t.deltaMode&&(1==t.deltaMode?(s*=40,n*=40):(s*=800,n*=800)),s&&!e&&(e=s<1?-1:1),n&&!r&&(r=n<1?-1:1),{spinX:e,spinY:r,pixelX:s,pixelY:n}}i.getEventType=function(){return s.firefox()?"DOMMouseScroll":n("wheel")?"wheel":"mousewheel"},t.exports=i},"./node_modules/ogl/src/core/Camera.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Camera:()=>u});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/math/Mat4.js"),i=r("./node_modules/ogl/src/math/Vec3.js");const o=new n.Mat4,a=new i.Vec3,l=new i.Vec3;class u extends s.Transform{constructor(t,{near:e=.1,far:r=100,fov:s=45,aspect:o=1,left:a,right:l,bottom:u,top:h,zoom:c=1}={}){super(),Object.assign(this,{near:e,far:r,fov:s,aspect:o,left:a,right:l,bottom:u,top:h,zoom:c}),this.projectionMatrix=new n.Mat4,this.viewMatrix=new n.Mat4,this.projectionViewMatrix=new n.Mat4,this.worldPosition=new i.Vec3,this.type=a||l?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:r=this.fov,aspect:s=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:r,aspect:s}),this.projectionMatrix.fromPerspective({fov:r*(Math.PI/180),aspect:s,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:r=this.left,right:s=this.right,bottom:n=this.bottom,top:i=this.top,zoom:o=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:r,right:s,bottom:n,top:i,zoom:o}),r/=o,s/=o,n/=o,i/=o,this.projectionMatrix.fromOrthogonal({left:r,right:s,bottom:n,top:i,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(o.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const e=a;e.copy(t.geometry.bounds.center),e.applyMatrix4(t.worldMatrix);const r=t.geometry.bounds.radius*t.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(e,r)}frustumIntersectsSphere(t,e){const r=l;for(let s=0;s<6;s++){const n=this.frustum[s];if(r.copy(n).dot(t)+n.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Geometry:()=>l});var s=r("./node_modules/ogl/src/math/Vec3.js");const n=new s.Vec3;let i=1,o=1,a=!1;class l{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=i++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=o++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.buffer||(e.buffer=this.gl.createBuffer(),this.updateAttribute(e)),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),this.gl.bufferData(t.target,t.data,this.gl.STATIC_DRAW),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:r})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const s=this.attributes[e];this.gl.bindBuffer(s.target,s.buffer),this.glState.boundBuffer=s.buffer;let n=1;35674===r&&(n=2),35675===r&&(n=3),35676===r&&(n=4);const i=s.size/n,o=1===n?0:n*n*n,a=1===n?0:n*n;for(let e=0;e<n;e++)this.gl.vertexAttribPointer(t+e,i,s.type,s.normalized,s.stride+o,s.offset+e*a),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,s.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const r=this.attributes[e];r.needsUpdate&&this.updateAttribute(r)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:a?void 0:(console.warn("No position buffer data found to compute bounds"),a=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,r=t.offset||0,n=t.stride||t.size;this.bounds||(this.bounds={min:new s.Vec3,max:new s.Vec3,center:new s.Vec3,scale:new s.Vec3,radius:1/0});const i=this.bounds.min,o=this.bounds.max,a=this.bounds.center,l=this.bounds.scale;i.set(1/0),o.set(-1/0);for(let t=r,s=e.length;t<s;t+=n){const r=e[t],s=e[t+1],n=e[t+2];i.x=Math.min(r,i.x),i.y=Math.min(s,i.y),i.z=Math.min(n,i.z),o.x=Math.max(r,o.x),o.y=Math.max(s,o.y),o.z=Math.max(n,o.z)}l.sub(o,i),a.add(i,o).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,r=t.offset||0,s=t.stride||t.size;this.bounds||this.computeBoundingBox(t);let i=0;for(let t=r,o=e.length;t<o;t+=s)n.fromArray(e,t),i=Math.max(i,this.bounds.center.squaredDistance(n));this.bounds.radius=Math.sqrt(i)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Mesh:()=>a});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/math/Mat3.js"),i=r("./node_modules/ogl/src/math/Mat4.js");let o=0;class a extends s.Transform{constructor(t,{geometry:e,program:r,mode:s=t.TRIANGLES,frustumCulled:a=!0,renderOrder:l=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=o++,this.geometry=e,this.program=r,this.mode=s,this.frustumCulled=a,this.renderOrder=l,this.modelViewMatrix=new i.Mat4,this.normalMatrix=new n.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Program:()=>i});let s=1;const n={};class i{constructor(t,{vertex:e,fragment:r,uniforms:n={},transparent:i=!1,cullFace:o=t.BACK,frontFace:l=t.CCW,depthTest:u=!0,depthWrite:h=!0,depthFunc:c=t.LESS}={}){t.canvas||console.error("gl not passed as fist argument to Program"),this.gl=t,this.uniforms=n,this.id=s++,e||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=i,this.cullFace=o,this.frontFace=l,this.depthTest=u,this.depthWrite=h,this.depthFunc=c,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const d=t.createShader(t.VERTEX_SHADER);t.shaderSource(d,e),t.compileShader(d),""!==t.getShaderInfoLog(d)&&console.warn(`${t.getShaderInfoLog(d)}\nVertex Shader\n${a(e)}`);const p=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(p,r),t.compileShader(p),""!==t.getShaderInfoLog(p)&&console.warn(`${t.getShaderInfoLog(p)}\nFragment Shader\n${a(r)}`),this.program=t.createProgram(),t.attachShader(this.program,d),t.attachShader(this.program,p),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return console.warn(t.getProgramInfoLog(this.program));t.deleteShader(d),t.deleteShader(p),this.uniformLocations=new Map;let f=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<f;e++){let r=t.getActiveUniform(this.program,e);this.uniformLocations.set(r,t.getUniformLocation(this.program,r.name));const s=r.name.match(/(\w+)/g);r.uniformName=s[0],3===s.length?(r.isStructArray=!0,r.structIndex=Number(s[1]),r.structProperty=s[2]):2===s.length&&isNaN(Number(s[1]))&&(r.isStruct=!0,r.structProperty=s[1])}this.attributeLocations=new Map;const m=[],g=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<g;e++){const r=t.getActiveAttrib(this.program,e),s=t.getAttribLocation(this.program,r.name);m[s]=r.name,this.attributeLocations.set(r,s)}this.attributeOrder=m.join("")}setBlendFunc(t,e,r,s){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=s,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.currentProgram=this.id),this.uniformLocations.forEach(((t,r)=>{let s=r.uniformName,n=this.uniforms[s];if(r.isStruct&&(n=n[r.structProperty],s+=`.${r.structProperty}`),r.isStructArray&&(n=n[r.structIndex][r.structProperty],s+=`[${r.structIndex}].${r.structProperty}`),!n)return u(`Active uniform ${s} has not been supplied`);if(n&&void 0===n.value)return u(`${s} uniform is missing a value parameter`);if(n.value.texture)return e+=1,n.value.update(e),o(this.gl,r.type,t,e);if(n.value.length&&n.value[0].texture){const s=[];return n.value.forEach((t=>{e+=1,t.update(e),s.push(e)})),o(this.gl,r.type,t,s)}o(this.gl,r.type,t,n.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function o(t,e,r,s){s=s.length?function(t){const e=t.length,r=t[0].length;if(void 0===r)return t;const s=e*r;let i=n[s];i||(n[s]=i=new Float32Array(s));for(let s=0;s<e;s++)i.set(t[s],s*r);return i}(s):s;const i=t.renderer.state.uniformLocations.get(r);if(s.length)if(void 0===i||i.length!==s.length)t.renderer.state.uniformLocations.set(r,s.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let r=0,s=t.length;r<s;r++)if(t[r]!==e[r])return!1;return!0}(i,s))return;i.set?i.set(s):function(t,e){for(let r=0,s=t.length;r<s;r++)t[r]=e[r]}(i,s),t.renderer.state.uniformLocations.set(r,i)}else{if(i===s)return;t.renderer.state.uniformLocations.set(r,s)}switch(e){case 5126:return s.length?t.uniform1fv(r,s):t.uniform1f(r,s);case 35664:return t.uniform2fv(r,s);case 35665:return t.uniform3fv(r,s);case 35666:return t.uniform4fv(r,s);case 35670:case 5124:case 35678:case 35680:return s.length?t.uniform1iv(r,s):t.uniform1i(r,s);case 35671:case 35667:return t.uniform2iv(r,s);case 35672:case 35668:return t.uniform3iv(r,s);case 35673:case 35669:return t.uniform4iv(r,s);case 35674:return t.uniformMatrix2fv(r,!1,s);case 35675:return t.uniformMatrix3fv(r,!1,s);case 35676:return t.uniformMatrix4fv(r,!1,s)}}function a(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let l=0;function u(t){l>100||(console.warn(t),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Renderer:()=>i});const s=new(r("./node_modules/ogl/src/math/Vec3.js").Vec3);let n=1;class i{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:r=150,dpr:s=1,alpha:i=!1,depth:o=!0,stencil:a=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:h=!1,powerPreference:c="default",autoClear:d=!0,webgl:p=2}={}){const f={alpha:i,depth:o,stencil:a,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:h,powerPreference:c};this.dpr=s,this.alpha=i,this.color=!0,this.depth=o,this.stencil=a,this.premultipliedAlpha=u,this.autoClear=d,this.id=n++,2===p&&(this.gl=t.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",f)||t.getContext("experimental-webgl",f)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,r),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.gl.viewport(0,0,t,e))}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,r,s){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===r&&this.state.blendFunc.dstAlpha===s||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=r,this.state.blendFunc.dstAlpha=s,void 0!==r?this.gl.blendFuncSeparate(t,e,r,s):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,r){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][r].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:r,sort:n}){let i=[];if(e&&r&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(r&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||i.push(t))})),n){const t=[],r=[],n=[];i.forEach((i=>{i.program.transparent?i.program.depthTest?r.push(i):n.push(i):t.push(i),i.zDepth=0,0===i.renderOrder&&i.program.depthTest&&e&&(i.worldMatrix.getTranslation(s),s.applyMatrix4(e.projectionViewMatrix),i.zDepth=s.z)})),t.sort(this.sortOpaque),r.sort(this.sortTransparent),n.sort(this.sortUI),i=t.concat(r,n)}return i}render({scene:t,camera:e,target:r=null,update:s=!0,sort:n=!0,frustumCull:i=!0,clear:o}){null===r?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(r),this.setViewport(r.width,r.height)),(o||this.autoClear&&!1!==o)&&(!this.depth||r&&!r.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),s&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:i,sort:n}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Texture.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Texture:()=>o});const s=new Uint8Array(4);function n(t){return 0==(t&t-1)}let i=1;class o{constructor(t,{image:e,target:r=t.TEXTURE_2D,type:s=t.UNSIGNED_BYTE,format:n=t.RGBA,internalFormat:o=n,wrapS:a=t.CLAMP_TO_EDGE,wrapT:l=t.CLAMP_TO_EDGE,generateMipmaps:u=!0,minFilter:h=(u?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:c=t.LINEAR,premultiplyAlpha:d=!1,unpackAlignment:p=4,flipY:f=r==t.TEXTURE_2D,anisotropy:m=0,level:g=0,width:v,height:_=v}={}){this.gl=t,this.id=i++,this.image=e,this.target=r,this.type=s,this.format=n,this.internalFormat=o,this.minFilter=h,this.magFilter=c,this.wrapS=a,this.wrapT=l,this.generateMipmaps=u,this.premultiplyAlpha=d,this.unpackAlignment=p,this.flipY=f,this.anisotropy=Math.min(m,this.gl.renderer.parameters.maxAnisotropy),this.level=g,this.width=v,this.height=_,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||n(this.image.width)&&n(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Transform:()=>a});var s=r("./node_modules/ogl/src/math/Vec3.js"),n=r("./node_modules/ogl/src/math/Quat.js"),i=r("./node_modules/ogl/src/math/Mat4.js"),o=r("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new i.Mat4,this.worldMatrix=new i.Mat4,this.matrixAutoUpdate=!0,this.position=new s.Vec3,this.quaternion=new n.Quat,this.scale=new s.Vec3(1),this.rotation=new o.Euler,this.up=new s.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,r=this.children.length;e<r;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,r=this.children.length;e<r;e++)this.children[e].traverse(t)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Plane:()=>n});var s=r("./node_modules/ogl/src/core/Geometry.js");class n extends s.Geometry{constructor(t,{width:e=1,height:r=1,widthSegments:s=1,heightSegments:i=1,attributes:o={}}={}){const a=s,l=i,u=(a+1)*(l+1),h=a*l*6,c=new Float32Array(3*u),d=new Float32Array(3*u),p=new Float32Array(2*u),f=u>65536?new Uint32Array(h):new Uint16Array(h);n.buildPlane(c,d,p,f,e,r,0,a,l),Object.assign(o,{position:{size:3,data:c},normal:{size:3,data:d},uv:{size:2,data:p},index:{data:f}}),super(t,o)}static buildPlane(t,e,r,s,n,i,o,a,l,u=0,h=1,c=2,d=1,p=-1,f=0,m=0){const g=f,v=n/a,_=i/l;for(let y=0;y<=l;y++){let b=y*_-i/2;for(let i=0;i<=a;i++,f++){let _=i*v-n/2;if(t[3*f+u]=_*d,t[3*f+h]=b*p,t[3*f+c]=o/2,e[3*f+u]=0,e[3*f+h]=0,e[3*f+c]=o>=0?1:-1,r[2*f]=i/a,r[2*f+1]=1-y/l,y===l||i===a)continue;let w=g+i+y*(a+1),x=g+i+(y+1)*(a+1),j=g+i+(y+1)*(a+1)+1,E=g+i+y*(a+1)+1;s[6*m]=w,s[6*m+1]=x,s[6*m+2]=E,s[6*m+3]=x,s[6*m+4]=j,s[6*m+5]=E,m++}}}}},"./node_modules/ogl/src/math/Euler.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Euler:()=>i});var s=r("./node_modules/ogl/src/math/functions/EulerFunc.js");const n=new(r("./node_modules/ogl/src/math/Mat4.js").Mat4);class i extends Array{constructor(t=0,e=t,r=t,s="YXZ"){return super(t,e,r),this.order=s,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set(t,e=t,r=t){return t.length?this.copy(t):(this[0]=t,this[1]=e,this[2]=r,this.onChange(),this)}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.onChange(),this}reorder(t){return this.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return s.fromRotationMatrix(this,t,e),this}fromQuaternion(t,e=this.order){return n.fromQuaternion(t),this.fromRotationMatrix(n,e)}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Mat3:()=>n});var s=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class n extends Array{constructor(t=1,e=0,r=0,s=0,n=1,i=0,o=0,a=0,l=1){return super(t,e,r,s,n,i,o,a,l),this}set(t,e,r,n,i,o,a,l,u){return t.length?this.copy(t):(s.set(this,t,e,r,n,i,o,a,l,u),this)}translate(t,e=this){return s.translate(this,e,t),this}rotate(t,e=this){return s.rotate(this,e,t),this}scale(t,e=this){return s.scale(this,e,t),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this}identity(){return s.identity(this),this}copy(t){return s.copy(this,t),this}fromMatrix4(t){return s.fromMat4(this,t),this}fromQuaternion(t){return s.fromQuat(this,t),this}fromBasis(t,e,r){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],r[0],r[1],r[2]),this}inverse(t=this){return s.invert(this,t),this}getNormalMatrix(t){return s.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Mat4:()=>n});var s=r("./node_modules/ogl/src/math/functions/Mat4Func.js");class n extends Array{constructor(t=1,e=0,r=0,s=0,n=0,i=1,o=0,a=0,l=0,u=0,h=1,c=0,d=0,p=0,f=0,m=1){return super(t,e,r,s,n,i,o,a,l,u,h,c,d,p,f,m),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,r,n,i,o,a,l,u,h,c,d,p,f,m,g){return t.length?this.copy(t):(s.set(this,t,e,r,n,i,o,a,l,u,h,c,d,p,f,m,g),this)}translate(t,e=this){return s.translate(this,e,t),this}rotate(t,e,r=this){return s.rotate(this,r,t,e),this}scale(t,e=this){return s.scale(this,e,"number"==typeof t?[t,t,t]:t),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this}identity(){return s.identity(this),this}copy(t){return s.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:r,far:n}={}){return s.perspective(this,t,e,r,n),this}fromOrthogonal({left:t,right:e,bottom:r,top:n,near:i,far:o}){return s.ortho(this,t,e,r,n,i,o),this}fromQuaternion(t){return s.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return s.invert(this,t),this}compose(t,e,r){return s.fromRotationTranslationScale(this,t,e,r),this}getRotation(t){return s.getRotation(t,this),this}getTranslation(t){return s.getTranslation(t,this),this}getScaling(t){return s.getScaling(t,this),this}getMaxScaleOnAxis(){return s.getMaxScaleOnAxis(this)}lookAt(t,e,r){return s.targetTo(this,t,e,r),this}determinant(){return s.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Quat:()=>n});var s=r("./node_modules/ogl/src/math/functions/QuatFunc.js");class n extends Array{constructor(t=0,e=0,r=0,s=1){return super(t,e,r,s),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set w(t){this[3]=t,this.onChange()}identity(){return s.identity(this),this.onChange(),this}set(t,e,r,n){return t.length?this.copy(t):(s.set(this,t,e,r,n),this.onChange(),this)}rotateX(t){return s.rotateX(this,this,t),this.onChange(),this}rotateY(t){return s.rotateY(this,this,t),this.onChange(),this}rotateZ(t){return s.rotateZ(this,this,t),this.onChange(),this}inverse(t=this){return s.invert(this,t),this.onChange(),this}conjugate(t=this){return s.conjugate(this,t),this.onChange(),this}copy(t){return s.copy(this,t),this.onChange(),this}normalize(t=this){return s.normalize(this,t),this.onChange(),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this.onChange(),this}dot(t){return s.dot(this,t)}fromMatrix3(t){return s.fromMat3(this,t),this.onChange(),this}fromEuler(t){return s.fromEuler(this,t,t.order),this}fromAxisAngle(t,e){return s.setAxisAngle(this,t,e),this}slerp(t,e){return s.slerp(this,this,t,e),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{Vec3:()=>n});var s=r("./node_modules/ogl/src/math/functions/Vec3Func.js");class n extends Array{constructor(t=0,e=t,r=t){return super(t,e,r),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,r=t){return t.length?this.copy(t):(s.set(this,t,e,r),this)}copy(t){return s.copy(this,t),this}add(t,e){return e?s.add(this,t,e):s.add(this,this,t),this}sub(t,e){return e?s.subtract(this,t,e):s.subtract(this,this,t),this}multiply(t){return t.length?s.multiply(this,this,t):s.scale(this,this,t),this}divide(t){return t.length?s.divide(this,this,t):s.scale(this,this,1/t),this}inverse(t=this){return s.inverse(this,t),this}len(){return s.length(this)}distance(t){return t?s.distance(this,t):s.length(this)}squaredLen(){return s.squaredLength(this)}squaredDistance(t){return t?s.squaredDistance(this,t):s.squaredLength(this)}negate(t=this){return s.negate(this,t),this}cross(t,e){return e?s.cross(this,t,e):s.cross(this,this,t),this}scale(t){return s.scale(this,this,t),this}normalize(){return s.normalize(this,this),this}dot(t){return s.dot(this,t)}equals(t){return s.exactEquals(this,t)}applyMatrix4(t){return s.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return s.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return s.transformQuat(this,this,t),this}angle(t){return s.angle(this,t)}lerp(t,e){return s.lerp(this,this,t,e),this}clone(){return new n(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],r=this[1],s=this[2];return this[0]=t[0]*e+t[4]*r+t[8]*s,this[1]=t[1]*e+t[5]*r+t[9]*s,this[2]=t[2]*e+t[6]*r+t[10]*s,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,r)=>{"use strict";function s(t,e,r="YXZ"){return"XYZ"===r?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===r?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===r?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===r?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===r?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===r&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}r.r(e),r.d(e,{fromRotationMatrix:()=>s})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{fromMat4:()=>s,fromQuat:()=>n,copy:()=>i,set:()=>o,identity:()=>a,transpose:()=>l,invert:()=>u,determinant:()=>h,multiply:()=>c,translate:()=>d,rotate:()=>p,scale:()=>f,normalFromMat4:()=>m,projection:()=>g,add:()=>v,subtract:()=>_,multiplyScalar:()=>y});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function n(t,e){let r=e[0],s=e[1],n=e[2],i=e[3],o=r+r,a=s+s,l=n+n,u=r*o,h=s*o,c=s*a,d=n*o,p=n*a,f=n*l,m=i*o,g=i*a,v=i*l;return t[0]=1-c-f,t[3]=h-v,t[6]=d+g,t[1]=h+v,t[4]=1-u-f,t[7]=p-m,t[2]=d-g,t[5]=p+m,t[8]=1-u-c,t}function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function o(t,e,r,s,n,i,o,a,l,u){return t[0]=e,t[1]=r,t[2]=s,t[3]=n,t[4]=i,t[5]=o,t[6]=a,t[7]=l,t[8]=u,t}function a(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function l(t,e){if(t===e){let r=e[1],s=e[2],n=e[5];t[1]=e[3],t[2]=e[6],t[3]=r,t[5]=e[7],t[6]=s,t[7]=n}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function u(t,e){let r=e[0],s=e[1],n=e[2],i=e[3],o=e[4],a=e[5],l=e[6],u=e[7],h=e[8],c=h*o-a*u,d=-h*i+a*l,p=u*i-o*l,f=r*c+s*d+n*p;return f?(f=1/f,t[0]=c*f,t[1]=(-h*s+n*u)*f,t[2]=(a*s-n*o)*f,t[3]=d*f,t[4]=(h*r-n*l)*f,t[5]=(-a*r+n*i)*f,t[6]=p*f,t[7]=(-u*r+s*l)*f,t[8]=(o*r-s*i)*f,t):null}function h(t){let e=t[0],r=t[1],s=t[2],n=t[3],i=t[4],o=t[5],a=t[6],l=t[7],u=t[8];return e*(u*i-o*l)+r*(-u*n+o*a)+s*(l*n-i*a)}function c(t,e,r){let s=e[0],n=e[1],i=e[2],o=e[3],a=e[4],l=e[5],u=e[6],h=e[7],c=e[8],d=r[0],p=r[1],f=r[2],m=r[3],g=r[4],v=r[5],_=r[6],y=r[7],b=r[8];return t[0]=d*s+p*o+f*u,t[1]=d*n+p*a+f*h,t[2]=d*i+p*l+f*c,t[3]=m*s+g*o+v*u,t[4]=m*n+g*a+v*h,t[5]=m*i+g*l+v*c,t[6]=_*s+y*o+b*u,t[7]=_*n+y*a+b*h,t[8]=_*i+y*l+b*c,t}function d(t,e,r){let s=e[0],n=e[1],i=e[2],o=e[3],a=e[4],l=e[5],u=e[6],h=e[7],c=e[8],d=r[0],p=r[1];return t[0]=s,t[1]=n,t[2]=i,t[3]=o,t[4]=a,t[5]=l,t[6]=d*s+p*o+u,t[7]=d*n+p*a+h,t[8]=d*i+p*l+c,t}function p(t,e,r){let s=e[0],n=e[1],i=e[2],o=e[3],a=e[4],l=e[5],u=e[6],h=e[7],c=e[8],d=Math.sin(r),p=Math.cos(r);return t[0]=p*s+d*o,t[1]=p*n+d*a,t[2]=p*i+d*l,t[3]=p*o-d*s,t[4]=p*a-d*n,t[5]=p*l-d*i,t[6]=u,t[7]=h,t[8]=c,t}function f(t,e,r){let s=r[0],n=r[1];return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=n*e[3],t[4]=n*e[4],t[5]=n*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function m(t,e){let r=e[0],s=e[1],n=e[2],i=e[3],o=e[4],a=e[5],l=e[6],u=e[7],h=e[8],c=e[9],d=e[10],p=e[11],f=e[12],m=e[13],g=e[14],v=e[15],_=r*a-s*o,y=r*l-n*o,b=r*u-i*o,w=s*l-n*a,x=s*u-i*a,j=n*u-i*l,E=h*m-c*f,T=h*g-d*f,C=h*v-p*f,A=c*g-d*m,S=c*v-p*m,M=d*v-p*g,O=_*M-y*S+b*A+w*C-x*T+j*E;return O?(O=1/O,t[0]=(a*M-l*S+u*A)*O,t[1]=(l*C-o*M-u*T)*O,t[2]=(o*S-a*C+u*E)*O,t[3]=(n*S-s*M-i*A)*O,t[4]=(r*M-n*C+i*T)*O,t[5]=(s*C-r*S-i*E)*O,t[6]=(m*j-g*x+v*w)*O,t[7]=(g*b-f*j-v*y)*O,t[8]=(f*x-m*b+v*_)*O,t):null}function g(t,e,r){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function v(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t}function _(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t}function y(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{copy:()=>s,set:()=>n,identity:()=>i,transpose:()=>o,invert:()=>a,determinant:()=>l,multiply:()=>u,translate:()=>h,scale:()=>c,rotate:()=>d,getTranslation:()=>p,getScaling:()=>f,getMaxScaleOnAxis:()=>m,getRotation:()=>g,fromRotationTranslationScale:()=>v,fromQuat:()=>_,perspective:()=>y,ortho:()=>b,targetTo:()=>w,add:()=>x,subtract:()=>j,multiplyScalar:()=>E});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function n(t,e,r,s,n,i,o,a,l,u,h,c,d,p,f,m,g){return t[0]=e,t[1]=r,t[2]=s,t[3]=n,t[4]=i,t[5]=o,t[6]=a,t[7]=l,t[8]=u,t[9]=h,t[10]=c,t[11]=d,t[12]=p,t[13]=f,t[14]=m,t[15]=g,t}function i(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function o(t,e){if(t===e){let r=e[1],s=e[2],n=e[3],i=e[6],o=e[7],a=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=r,t[6]=e[9],t[7]=e[13],t[8]=s,t[9]=i,t[11]=e[14],t[12]=n,t[13]=o,t[14]=a}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function a(t,e){let r=e[0],s=e[1],n=e[2],i=e[3],o=e[4],a=e[5],l=e[6],u=e[7],h=e[8],c=e[9],d=e[10],p=e[11],f=e[12],m=e[13],g=e[14],v=e[15],_=r*a-s*o,y=r*l-n*o,b=r*u-i*o,w=s*l-n*a,x=s*u-i*a,j=n*u-i*l,E=h*m-c*f,T=h*g-d*f,C=h*v-p*f,A=c*g-d*m,S=c*v-p*m,M=d*v-p*g,O=_*M-y*S+b*A+w*C-x*T+j*E;return O?(O=1/O,t[0]=(a*M-l*S+u*A)*O,t[1]=(n*S-s*M-i*A)*O,t[2]=(m*j-g*x+v*w)*O,t[3]=(d*x-c*j-p*w)*O,t[4]=(l*C-o*M-u*T)*O,t[5]=(r*M-n*C+i*T)*O,t[6]=(g*b-f*j-v*y)*O,t[7]=(h*j-d*b+p*y)*O,t[8]=(o*S-a*C+u*E)*O,t[9]=(s*C-r*S-i*E)*O,t[10]=(f*x-m*b+v*_)*O,t[11]=(c*b-h*x-p*_)*O,t[12]=(a*T-o*A-l*E)*O,t[13]=(r*A-s*T+n*E)*O,t[14]=(m*y-f*w-g*_)*O,t[15]=(h*w-c*y+d*_)*O,t):null}function l(t){let e=t[0],r=t[1],s=t[2],n=t[3],i=t[4],o=t[5],a=t[6],l=t[7],u=t[8],h=t[9],c=t[10],d=t[11],p=t[12],f=t[13],m=t[14],g=t[15];return(e*o-r*i)*(c*g-d*m)-(e*a-s*i)*(h*g-d*f)+(e*l-n*i)*(h*m-c*f)+(r*a-s*o)*(u*g-d*p)-(r*l-n*o)*(u*m-c*p)+(s*l-n*a)*(u*f-h*p)}function u(t,e,r){let s=e[0],n=e[1],i=e[2],o=e[3],a=e[4],l=e[5],u=e[6],h=e[7],c=e[8],d=e[9],p=e[10],f=e[11],m=e[12],g=e[13],v=e[14],_=e[15],y=r[0],b=r[1],w=r[2],x=r[3];return t[0]=y*s+b*a+w*c+x*m,t[1]=y*n+b*l+w*d+x*g,t[2]=y*i+b*u+w*p+x*v,t[3]=y*o+b*h+w*f+x*_,y=r[4],b=r[5],w=r[6],x=r[7],t[4]=y*s+b*a+w*c+x*m,t[5]=y*n+b*l+w*d+x*g,t[6]=y*i+b*u+w*p+x*v,t[7]=y*o+b*h+w*f+x*_,y=r[8],b=r[9],w=r[10],x=r[11],t[8]=y*s+b*a+w*c+x*m,t[9]=y*n+b*l+w*d+x*g,t[10]=y*i+b*u+w*p+x*v,t[11]=y*o+b*h+w*f+x*_,y=r[12],b=r[13],w=r[14],x=r[15],t[12]=y*s+b*a+w*c+x*m,t[13]=y*n+b*l+w*d+x*g,t[14]=y*i+b*u+w*p+x*v,t[15]=y*o+b*h+w*f+x*_,t}function h(t,e,r){let s,n,i,o,a,l,u,h,c,d,p,f,m=r[0],g=r[1],v=r[2];return e===t?(t[12]=e[0]*m+e[4]*g+e[8]*v+e[12],t[13]=e[1]*m+e[5]*g+e[9]*v+e[13],t[14]=e[2]*m+e[6]*g+e[10]*v+e[14],t[15]=e[3]*m+e[7]*g+e[11]*v+e[15]):(s=e[0],n=e[1],i=e[2],o=e[3],a=e[4],l=e[5],u=e[6],h=e[7],c=e[8],d=e[9],p=e[10],f=e[11],t[0]=s,t[1]=n,t[2]=i,t[3]=o,t[4]=a,t[5]=l,t[6]=u,t[7]=h,t[8]=c,t[9]=d,t[10]=p,t[11]=f,t[12]=s*m+a*g+c*v+e[12],t[13]=n*m+l*g+d*v+e[13],t[14]=i*m+u*g+p*v+e[14],t[15]=o*m+h*g+f*v+e[15]),t}function c(t,e,r){let s=r[0],n=r[1],i=r[2];return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*i,t[9]=e[9]*i,t[10]=e[10]*i,t[11]=e[11]*i,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function d(t,e,r,s){let n,i,o,a,l,u,h,c,d,p,f,m,g,v,_,y,b,w,x,j,E,T,C,A,S=s[0],M=s[1],O=s[2],L=Math.hypot(S,M,O);return Math.abs(L)<1e-6?null:(L=1/L,S*=L,M*=L,O*=L,n=Math.sin(r),i=Math.cos(r),o=1-i,a=e[0],l=e[1],u=e[2],h=e[3],c=e[4],d=e[5],p=e[6],f=e[7],m=e[8],g=e[9],v=e[10],_=e[11],y=S*S*o+i,b=M*S*o+O*n,w=O*S*o-M*n,x=S*M*o-O*n,j=M*M*o+i,E=O*M*o+S*n,T=S*O*o+M*n,C=M*O*o-S*n,A=O*O*o+i,t[0]=a*y+c*b+m*w,t[1]=l*y+d*b+g*w,t[2]=u*y+p*b+v*w,t[3]=h*y+f*b+_*w,t[4]=a*x+c*j+m*E,t[5]=l*x+d*j+g*E,t[6]=u*x+p*j+v*E,t[7]=h*x+f*j+_*E,t[8]=a*T+c*C+m*A,t[9]=l*T+d*C+g*A,t[10]=u*T+p*C+v*A,t[11]=h*T+f*C+_*A,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function p(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function f(t,e){let r=e[0],s=e[1],n=e[2],i=e[4],o=e[5],a=e[6],l=e[8],u=e[9],h=e[10];return t[0]=Math.hypot(r,s,n),t[1]=Math.hypot(i,o,a),t[2]=Math.hypot(l,u,h),t}function m(t){let e=t[0],r=t[1],s=t[2],n=t[4],i=t[5],o=t[6],a=t[8],l=t[9],u=t[10];const h=e*e+r*r+s*s,c=n*n+i*i+o*o,d=a*a+l*l+u*u;return Math.sqrt(Math.max(h,c,d))}const g=function(){const t=[0,0,0];return function(e,r){let s=t;f(s,r);let n=1/s[0],i=1/s[1],o=1/s[2],a=r[0]*n,l=r[1]*i,u=r[2]*o,h=r[4]*n,c=r[5]*i,d=r[6]*o,p=r[8]*n,m=r[9]*i,g=r[10]*o,v=a+c+g,_=0;return v>0?(_=2*Math.sqrt(v+1),e[3]=.25*_,e[0]=(d-m)/_,e[1]=(p-u)/_,e[2]=(l-h)/_):a>c&&a>g?(_=2*Math.sqrt(1+a-c-g),e[3]=(d-m)/_,e[0]=.25*_,e[1]=(l+h)/_,e[2]=(p+u)/_):c>g?(_=2*Math.sqrt(1+c-a-g),e[3]=(p-u)/_,e[0]=(l+h)/_,e[1]=.25*_,e[2]=(d+m)/_):(_=2*Math.sqrt(1+g-a-c),e[3]=(l-h)/_,e[0]=(p+u)/_,e[1]=(d+m)/_,e[2]=.25*_),e}}();function v(t,e,r,s){let n=e[0],i=e[1],o=e[2],a=e[3],l=n+n,u=i+i,h=o+o,c=n*l,d=n*u,p=n*h,f=i*u,m=i*h,g=o*h,v=a*l,_=a*u,y=a*h,b=s[0],w=s[1],x=s[2];return t[0]=(1-(f+g))*b,t[1]=(d+y)*b,t[2]=(p-_)*b,t[3]=0,t[4]=(d-y)*w,t[5]=(1-(c+g))*w,t[6]=(m+v)*w,t[7]=0,t[8]=(p+_)*x,t[9]=(m-v)*x,t[10]=(1-(c+f))*x,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function _(t,e){let r=e[0],s=e[1],n=e[2],i=e[3],o=r+r,a=s+s,l=n+n,u=r*o,h=s*o,c=s*a,d=n*o,p=n*a,f=n*l,m=i*o,g=i*a,v=i*l;return t[0]=1-c-f,t[1]=h+v,t[2]=d-g,t[3]=0,t[4]=h-v,t[5]=1-u-f,t[6]=p+m,t[7]=0,t[8]=d+g,t[9]=p-m,t[10]=1-u-c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function y(t,e,r,s,n){let i=1/Math.tan(e/2),o=1/(s-n);return t[0]=i/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=i,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(n+s)*o,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*n*s*o,t[15]=0,t}function b(t,e,r,s,n,i,o){let a=1/(e-r),l=1/(s-n),u=1/(i-o);return t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*l,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*u,t[11]=0,t[12]=(e+r)*a,t[13]=(n+s)*l,t[14]=(o+i)*u,t[15]=1,t}function w(t,e,r,s){let n=e[0],i=e[1],o=e[2],a=s[0],l=s[1],u=s[2],h=n-r[0],c=i-r[1],d=o-r[2],p=h*h+c*c+d*d;0===p?d=1:(p=1/Math.sqrt(p),h*=p,c*=p,d*=p);let f=l*d-u*c,m=u*h-a*d,g=a*c-l*h;return p=f*f+m*m+g*g,0===p&&(u?a+=1e-6:l?u+=1e-6:l+=1e-6,f=l*d-u*c,m=u*h-a*d,g=a*c-l*h,p=f*f+m*m+g*g),p=1/Math.sqrt(p),f*=p,m*=p,g*=p,t[0]=f,t[1]=m,t[2]=g,t[3]=0,t[4]=c*g-d*m,t[5]=d*f-h*g,t[6]=h*m-c*f,t[7]=0,t[8]=h,t[9]=c,t[10]=d,t[11]=0,t[12]=n,t[13]=i,t[14]=o,t[15]=1,t}function x(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t[9]=e[9]+r[9],t[10]=e[10]+r[10],t[11]=e[11]+r[11],t[12]=e[12]+r[12],t[13]=e[13]+r[13],t[14]=e[14]+r[14],t[15]=e[15]+r[15],t}function j(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t[9]=e[9]-r[9],t[10]=e[10]-r[10],t[11]=e[11]-r[11],t[12]=e[12]-r[12],t[13]=e[13]-r[13],t[14]=e[14]-r[14],t[15]=e[15]-r[15],t}function E(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t[9]=e[9]*r,t[10]=e[10]*r,t[11]=e[11]*r,t[12]=e[12]*r,t[13]=e[13]*r,t[14]=e[14]*r,t[15]=e[15]*r,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{identity:()=>n,setAxisAngle:()=>i,multiply:()=>o,rotateX:()=>a,rotateY:()=>l,rotateZ:()=>u,slerp:()=>h,invert:()=>c,conjugate:()=>d,fromMat3:()=>p,fromEuler:()=>f,copy:()=>m,set:()=>g,add:()=>v,scale:()=>_,dot:()=>y,lerp:()=>b,length:()=>w,normalize:()=>x});var s=r("./node_modules/ogl/src/math/functions/Vec4Func.js");function n(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function i(t,e,r){r*=.5;let s=Math.sin(r);return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=Math.cos(r),t}function o(t,e,r){let s=e[0],n=e[1],i=e[2],o=e[3],a=r[0],l=r[1],u=r[2],h=r[3];return t[0]=s*h+o*a+n*u-i*l,t[1]=n*h+o*l+i*a-s*u,t[2]=i*h+o*u+s*l-n*a,t[3]=o*h-s*a-n*l-i*u,t}function a(t,e,r){r*=.5;let s=e[0],n=e[1],i=e[2],o=e[3],a=Math.sin(r),l=Math.cos(r);return t[0]=s*l+o*a,t[1]=n*l+i*a,t[2]=i*l-n*a,t[3]=o*l-s*a,t}function l(t,e,r){r*=.5;let s=e[0],n=e[1],i=e[2],o=e[3],a=Math.sin(r),l=Math.cos(r);return t[0]=s*l-i*a,t[1]=n*l+o*a,t[2]=i*l+s*a,t[3]=o*l-n*a,t}function u(t,e,r){r*=.5;let s=e[0],n=e[1],i=e[2],o=e[3],a=Math.sin(r),l=Math.cos(r);return t[0]=s*l+n*a,t[1]=n*l-s*a,t[2]=i*l+o*a,t[3]=o*l-i*a,t}function h(t,e,r,s){let n,i,o,a,l,u=e[0],h=e[1],c=e[2],d=e[3],p=r[0],f=r[1],m=r[2],g=r[3];return i=u*p+h*f+c*m+d*g,i<0&&(i=-i,p=-p,f=-f,m=-m,g=-g),1-i>1e-6?(n=Math.acos(i),o=Math.sin(n),a=Math.sin((1-s)*n)/o,l=Math.sin(s*n)/o):(a=1-s,l=s),t[0]=a*u+l*p,t[1]=a*h+l*f,t[2]=a*c+l*m,t[3]=a*d+l*g,t}function c(t,e){let r=e[0],s=e[1],n=e[2],i=e[3],o=r*r+s*s+n*n+i*i,a=o?1/o:0;return t[0]=-r*a,t[1]=-s*a,t[2]=-n*a,t[3]=i*a,t}function d(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function p(t,e){let r,s=e[0]+e[4]+e[8];if(s>0)r=Math.sqrt(s+1),t[3]=.5*r,r=.5/r,t[0]=(e[5]-e[7])*r,t[1]=(e[6]-e[2])*r,t[2]=(e[1]-e[3])*r;else{let s=0;e[4]>e[0]&&(s=1),e[8]>e[3*s+s]&&(s=2);let n=(s+1)%3,i=(s+2)%3;r=Math.sqrt(e[3*s+s]-e[3*n+n]-e[3*i+i]+1),t[s]=.5*r,r=.5/r,t[3]=(e[3*n+i]-e[3*i+n])*r,t[n]=(e[3*n+s]+e[3*s+n])*r,t[i]=(e[3*i+s]+e[3*s+i])*r}return t}function f(t,e,r="YXZ"){let s=Math.sin(.5*e[0]),n=Math.cos(.5*e[0]),i=Math.sin(.5*e[1]),o=Math.cos(.5*e[1]),a=Math.sin(.5*e[2]),l=Math.cos(.5*e[2]);return"XYZ"===r?(t[0]=s*o*l+n*i*a,t[1]=n*i*l-s*o*a,t[2]=n*o*a+s*i*l,t[3]=n*o*l-s*i*a):"YXZ"===r?(t[0]=s*o*l+n*i*a,t[1]=n*i*l-s*o*a,t[2]=n*o*a-s*i*l,t[3]=n*o*l+s*i*a):"ZXY"===r?(t[0]=s*o*l-n*i*a,t[1]=n*i*l+s*o*a,t[2]=n*o*a+s*i*l,t[3]=n*o*l-s*i*a):"ZYX"===r?(t[0]=s*o*l-n*i*a,t[1]=n*i*l+s*o*a,t[2]=n*o*a-s*i*l,t[3]=n*o*l+s*i*a):"YZX"===r?(t[0]=s*o*l+n*i*a,t[1]=n*i*l+s*o*a,t[2]=n*o*a-s*i*l,t[3]=n*o*l-s*i*a):"XZY"===r&&(t[0]=s*o*l-n*i*a,t[1]=n*i*l-s*o*a,t[2]=n*o*a+s*i*l,t[3]=n*o*l+s*i*a),t}const m=s.copy,g=s.set,v=s.add,_=s.scale,y=s.dot,b=s.lerp,w=s.length,x=s.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{length:()=>s,copy:()=>n,set:()=>i,add:()=>o,subtract:()=>a,multiply:()=>l,divide:()=>u,scale:()=>h,distance:()=>c,squaredDistance:()=>d,squaredLength:()=>p,negate:()=>f,inverse:()=>m,normalize:()=>g,dot:()=>v,cross:()=>_,lerp:()=>y,transformMat4:()=>b,scaleRotateMat4:()=>w,transformMat3:()=>x,transformQuat:()=>j,angle:()=>E,exactEquals:()=>T});function s(t){let e=t[0],r=t[1],s=t[2];return Math.sqrt(e*e+r*r+s*s)}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function i(t,e,r,s){return t[0]=e,t[1]=r,t[2]=s,t}function o(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t}function a(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t}function l(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t}function u(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t}function h(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t}function c(t,e){let r=e[0]-t[0],s=e[1]-t[1],n=e[2]-t[2];return Math.sqrt(r*r+s*s+n*n)}function d(t,e){let r=e[0]-t[0],s=e[1]-t[1],n=e[2]-t[2];return r*r+s*s+n*n}function p(t){let e=t[0],r=t[1],s=t[2];return e*e+r*r+s*s}function f(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function m(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function g(t,e){let r=e[0],s=e[1],n=e[2],i=r*r+s*s+n*n;return i>0&&(i=1/Math.sqrt(i)),t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t}function v(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function _(t,e,r){let s=e[0],n=e[1],i=e[2],o=r[0],a=r[1],l=r[2];return t[0]=n*l-i*a,t[1]=i*o-s*l,t[2]=s*a-n*o,t}function y(t,e,r,s){let n=e[0],i=e[1],o=e[2];return t[0]=n+s*(r[0]-n),t[1]=i+s*(r[1]-i),t[2]=o+s*(r[2]-o),t}function b(t,e,r){let s=e[0],n=e[1],i=e[2],o=r[3]*s+r[7]*n+r[11]*i+r[15];return o=o||1,t[0]=(r[0]*s+r[4]*n+r[8]*i+r[12])/o,t[1]=(r[1]*s+r[5]*n+r[9]*i+r[13])/o,t[2]=(r[2]*s+r[6]*n+r[10]*i+r[14])/o,t}function w(t,e,r){let s=e[0],n=e[1],i=e[2],o=r[3]*s+r[7]*n+r[11]*i+r[15];return o=o||1,t[0]=(r[0]*s+r[4]*n+r[8]*i)/o,t[1]=(r[1]*s+r[5]*n+r[9]*i)/o,t[2]=(r[2]*s+r[6]*n+r[10]*i)/o,t}function x(t,e,r){let s=e[0],n=e[1],i=e[2];return t[0]=s*r[0]+n*r[3]+i*r[6],t[1]=s*r[1]+n*r[4]+i*r[7],t[2]=s*r[2]+n*r[5]+i*r[8],t}function j(t,e,r){let s=e[0],n=e[1],i=e[2],o=r[0],a=r[1],l=r[2],u=a*i-l*n,h=l*s-o*i,c=o*n-a*s,d=a*c-l*h,p=l*u-o*c,f=o*h-a*u,m=2*r[3];return u*=m,h*=m,c*=m,d*=2,p*=2,f*=2,t[0]=s+u+d,t[1]=n+h+p,t[2]=i+c+f,t}const E=function(){const t=[0,0,0],e=[0,0,0];return function(r,s){n(t,r),n(e,s),g(t,t),g(e,e);let i=v(t,e);return i>1?0:i<-1?Math.PI:Math.acos(i)}}();function T(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,r)=>{"use strict";r.r(e),r.d(e,{copy:()=>s,set:()=>n,add:()=>i,scale:()=>o,length:()=>a,normalize:()=>l,dot:()=>u,lerp:()=>h});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function n(t,e,r,s,n){return t[0]=e,t[1]=r,t[2]=s,t[3]=n,t}function i(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t}function o(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t}function a(t){let e=t[0],r=t[1],s=t[2],n=t[3];return Math.sqrt(e*e+r*r+s*s+n*n)}function l(t,e){let r=e[0],s=e[1],n=e[2],i=e[3],o=r*r+s*s+n*n+i*i;return o>0&&(o=1/Math.sqrt(o)),t[0]=r*o,t[1]=s*o,t[2]=n*o,t[3]=i*o,t}function u(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function h(t,e,r,s){let n=e[0],i=e[1],o=e[2],a=e[3];return t[0]=n+s*(r[0]-n),t[1]=i+s*(r[1]-i),t[2]=o+s*(r[2]-o),t[3]=a+s*(r[3]-a),t}},"./node_modules/prefix/index.js":t=>{var e="undefined"!=typeof document?document.createElement("p").style:{},r=["O","ms","Moz","Webkit"],s=/([A-Z])/g,n={};function i(t){if(t=t.replace(/-([a-z])/g,(function(t,e){return e.toUpperCase()})),void 0!==e[t])return t;for(var s=t.charAt(0).toUpperCase()+t.slice(1),n=r.length;n--;){var i=r[n]+s;if(void 0!==e[i])return i}return t}t.exports=function(t){return t in n?n[t]:n[t]=i(t)},t.exports.dash=function(t){return t=i(t),s.test(t)&&(t="-"+t.replace(s,"-$1"),s.lastIndex=0),t.toLowerCase()}},"./node_modules/querystring/decode.js":t=>{"use strict";function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,r,s,n){r=r||"&",s=s||"=";var i={};if("string"!=typeof t||0===t.length)return i;var o=/\+/g;t=t.split(r);var a=1e3;n&&"number"==typeof n.maxKeys&&(a=n.maxKeys);var l=t.length;a>0&&l>a&&(l=a);for(var u=0;u<l;++u){var h,c,d,p,f=t[u].replace(o,"%20"),m=f.indexOf(s);m>=0?(h=f.substr(0,m),c=f.substr(m+1)):(h=f,c=""),d=decodeURIComponent(h),p=decodeURIComponent(c),e(i,d)?Array.isArray(i[d])?i[d].push(p):i[d]=[i[d],p]:i[d]=p}return i}},"./node_modules/querystring/encode.js":t=>{"use strict";var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,r,s,n){return r=r||"&",s=s||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map((function(n){var i=encodeURIComponent(e(n))+s;return Array.isArray(t[n])?t[n].map((function(t){return i+encodeURIComponent(e(t))})).join(r):i+encodeURIComponent(e(t[n]))})).join(r):n?encodeURIComponent(e(n))+s+encodeURIComponent(e(t)):""}},"./node_modules/querystring/index.js":(t,e,r)=>{"use strict";e.decode=e.parse=r("./node_modules/querystring/decode.js"),e.encode=e.stringify=r("./node_modules/querystring/encode.js")},"./node_modules/sockjs-client/dist/sockjs.js":(t,e,r)=>{var s;t.exports=function(){function t(e,r,s){function n(o,a){if(!r[o]){if(!e[o]){if(i)return i(o,!0);var l=new Error("Cannot find module '"+o+"'");throw l.code="MODULE_NOT_FOUND",l}var u=r[o]={exports:{}};e[o][0].call(u.exports,(function(t){return n(e[o][1][t]||t)}),u,u.exports,t,e,r,s)}return r[o].exports}for(var i=void 0,o=0;o<s.length;o++)n(s[o]);return n}return t}()({1:[function(t,e,s){(function(r){"use strict";var s=t("./transport-list");e.exports=t("./main")(s),"_sockjs_onload"in r&&setTimeout(r._sockjs_onload,1)}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./main":14,"./transport-list":16}],2:[function(t,e,r){"use strict";var s=t("inherits"),n=t("./event");function i(){n.call(this),this.initEvent("close",!1,!1),this.wasClean=!1,this.code=0,this.reason=""}s(i,n),e.exports=i},{"./event":4,inherits:57}],3:[function(t,e,r){"use strict";var s=t("inherits"),n=t("./eventtarget");function i(){n.call(this)}s(i,n),i.prototype.removeAllListeners=function(t){t?delete this._listeners[t]:this._listeners={}},i.prototype.once=function(t,e){var r=this,s=!1;function n(){r.removeListener(t,n),s||(s=!0,e.apply(this,arguments))}this.on(t,n)},i.prototype.emit=function(){var t=arguments[0],e=this._listeners[t];if(e){for(var r=arguments.length,s=new Array(r-1),n=1;n<r;n++)s[n-1]=arguments[n];for(var i=0;i<e.length;i++)e[i].apply(this,s)}},i.prototype.on=i.prototype.addListener=n.prototype.addEventListener,i.prototype.removeListener=n.prototype.removeEventListener,e.exports.EventEmitter=i},{"./eventtarget":5,inherits:57}],4:[function(t,e,r){"use strict";function s(t){this.type=t}s.prototype.initEvent=function(t,e,r){return this.type=t,this.bubbles=e,this.cancelable=r,this.timeStamp=+new Date,this},s.prototype.stopPropagation=function(){},s.prototype.preventDefault=function(){},s.CAPTURING_PHASE=1,s.AT_TARGET=2,s.BUBBLING_PHASE=3,e.exports=s},{}],5:[function(t,e,r){"use strict";function s(){this._listeners={}}s.prototype.addEventListener=function(t,e){t in this._listeners||(this._listeners[t]=[]);var r=this._listeners[t];-1===r.indexOf(e)&&(r=r.concat([e])),this._listeners[t]=r},s.prototype.removeEventListener=function(t,e){var r=this._listeners[t];if(r){var s=r.indexOf(e);-1===s||(r.length>1?this._listeners[t]=r.slice(0,s).concat(r.slice(s+1)):delete this._listeners[t])}},s.prototype.dispatchEvent=function(){var t=arguments[0],e=t.type,r=1===arguments.length?[t]:Array.apply(null,arguments);if(this["on"+e]&&this["on"+e].apply(this,r),e in this._listeners)for(var s=this._listeners[e],n=0;n<s.length;n++)s[n].apply(this,r)},e.exports=s},{}],6:[function(t,e,r){"use strict";var s=t("inherits"),n=t("./event");function i(t){n.call(this),this.initEvent("message",!1,!1),this.data=t}s(i,n),e.exports=i},{"./event":4,inherits:57}],7:[function(t,e,r){"use strict";var s=t("json3"),n=t("./utils/iframe");function i(t){this._transport=t,t.on("message",this._transportMessage.bind(this)),t.on("close",this._transportClose.bind(this))}i.prototype._transportClose=function(t,e){n.postMessage("c",s.stringify([t,e]))},i.prototype._transportMessage=function(t){n.postMessage("t",t)},i.prototype._send=function(t){this._transport.send(t)},i.prototype._close=function(){this._transport.close(),this._transport.removeAllListeners()},e.exports=i},{"./utils/iframe":47,json3:58}],8:[function(t,e,r){(function(r){"use strict";var s=t("./utils/url"),n=t("./utils/event"),i=t("json3"),o=t("./facade"),a=t("./info-iframe-receiver"),l=t("./utils/iframe"),u=t("./location"),h=function(){};"production"!==r.env.NODE_ENV&&(h=t("debug")("sockjs-client:iframe-bootstrap")),e.exports=function(t,e){var r,c={};e.forEach((function(t){t.facadeTransport&&(c[t.facadeTransport.transportName]=t.facadeTransport)})),c[a.transportName]=a,t.bootstrap_iframe=function(){var e;l.currentWindowId=u.hash.slice(1);var a=function(n){if(n.source===parent&&(void 0===r&&(r=n.origin),n.origin===r)){var a;try{a=i.parse(n.data)}catch(t){return void h("bad json",n.data)}if(a.windowId===l.currentWindowId)switch(a.type){case"s":var d;try{d=i.parse(a.data)}catch(t){h("bad json",a.data);break}var p=d[0],f=d[1],m=d[2],g=d[3];if(h(p,f,m,g),p!==t.version)throw new Error('Incompatible SockJS! Main site uses: "'+p+'", the iframe: "'+t.version+'".');if(!s.isOriginEqual(m,u.href)||!s.isOriginEqual(g,u.href))throw new Error("Can't connect to different domain from within an iframe. ("+u.href+", "+m+", "+g+")");e=new o(new c[f](m,g));break;case"m":e._send(a.data);break;case"c":e&&e._close(),e=null}}};n.attachEvent("message",a),l.postMessage("s")}}}).call(this,{env:{}})},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,debug:55,json3:58}],9:[function(t,e,r){(function(r){"use strict";var s=t("events").EventEmitter,n=t("inherits"),i=t("json3"),o=t("./utils/object"),a=function(){};function l(t,e){s.call(this);var r=this,n=+new Date;this.xo=new e("GET",t),this.xo.once("finish",(function(t,e){var s,l;if(200===t){if(l=+new Date-n,e)try{s=i.parse(e)}catch(t){a("bad json",e)}o.isObject(s)||(s={})}r.emit("finish",s,l),r.removeAllListeners()}))}"production"!==r.env.NODE_ENV&&(a=t("debug")("sockjs-client:info-ajax")),n(l,s),l.prototype.close=function(){this.removeAllListeners(),this.xo.close()},e.exports=l}).call(this,{env:{}})},{"./utils/object":49,debug:55,events:3,inherits:57,json3:58}],10:[function(t,e,r){"use strict";var s=t("inherits"),n=t("events").EventEmitter,i=t("json3"),o=t("./transport/sender/xhr-local"),a=t("./info-ajax");function l(t){var e=this;n.call(this),this.ir=new a(t,o),this.ir.once("finish",(function(t,r){e.ir=null,e.emit("message",i.stringify([t,r]))}))}s(l,n),l.transportName="iframe-info-receiver",l.prototype.close=function(){this.ir&&(this.ir.close(),this.ir=null),this.removeAllListeners()},e.exports=l},{"./info-ajax":9,"./transport/sender/xhr-local":37,events:3,inherits:57,json3:58}],11:[function(t,e,s){(function(r,s){"use strict";var n=t("events").EventEmitter,i=t("inherits"),o=t("json3"),a=t("./utils/event"),l=t("./transport/iframe"),u=t("./info-iframe-receiver"),h=function(){};function c(t,e){var r=this;n.call(this);var i=function(){var s=r.ifr=new l(u.transportName,e,t);s.once("message",(function(t){if(t){var e;try{e=o.parse(t)}catch(e){return h("bad json",t),r.emit("finish"),void r.close()}var s=e[0],n=e[1];r.emit("finish",s,n)}r.close()})),s.once("close",(function(){r.emit("finish"),r.close()}))};s.document.body?i():a.attachEvent("load",i)}"production"!==r.env.NODE_ENV&&(h=t("debug")("sockjs-client:info-iframe")),i(c,n),c.enabled=function(){return l.enabled()},c.prototype.close=function(){this.ifr&&this.ifr.close(),this.removeAllListeners(),this.ifr=null},e.exports=c}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,debug:55,events:3,inherits:57,json3:58}],12:[function(t,e,r){(function(r){"use strict";var s=t("events").EventEmitter,n=t("inherits"),i=t("./utils/url"),o=t("./transport/sender/xdr"),a=t("./transport/sender/xhr-cors"),l=t("./transport/sender/xhr-local"),u=t("./transport/sender/xhr-fake"),h=t("./info-iframe"),c=t("./info-ajax"),d=function(){};function p(t,e){d(t);var r=this;s.call(this),setTimeout((function(){r.doXhr(t,e)}),0)}"production"!==r.env.NODE_ENV&&(d=t("debug")("sockjs-client:info-receiver")),n(p,s),p._getReceiver=function(t,e,r){return r.sameOrigin?new c(e,l):a.enabled?new c(e,a):o.enabled&&r.sameScheme?new c(e,o):h.enabled()?new h(t,e):new c(e,u)},p.prototype.doXhr=function(t,e){var r=this,s=i.addPath(t,"/info");d("doXhr",s),this.xo=p._getReceiver(t,s,e),this.timeoutRef=setTimeout((function(){d("timeout"),r._cleanup(!1),r.emit("finish")}),p.timeout),this.xo.once("finish",(function(t,e){d("finish",t,e),r._cleanup(!0),r.emit("finish",t,e)}))},p.prototype._cleanup=function(t){d("_cleanup"),clearTimeout(this.timeoutRef),this.timeoutRef=null,!t&&this.xo&&this.xo.close(),this.xo=null},p.prototype.close=function(){d("close"),this.removeAllListeners(),this._cleanup(!1)},p.timeout=8e3,e.exports=p}).call(this,{env:{}})},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,debug:55,events:3,inherits:57}],13:[function(t,e,s){(function(t){"use strict";e.exports=t.location||{origin:"http://localhost:80",protocol:"http:",host:"localhost",port:80,href:"http://localhost/",hash:""}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],14:[function(t,e,s){(function(r,s){"use strict";t("./shims");var n,i=t("url-parse"),o=t("inherits"),a=t("json3"),l=t("./utils/random"),u=t("./utils/escape"),h=t("./utils/url"),c=t("./utils/event"),d=t("./utils/transport"),p=t("./utils/object"),f=t("./utils/browser"),m=t("./utils/log"),g=t("./event/event"),v=t("./event/eventtarget"),_=t("./location"),y=t("./event/close"),b=t("./event/trans-message"),w=t("./info-receiver"),x=function(){};function j(t,e,r){if(!(this instanceof j))return new j(t,e,r);if(arguments.length<1)throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");v.call(this),this.readyState=j.CONNECTING,this.extensions="",this.protocol="",(r=r||{}).protocols_whitelist&&m.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead."),this._transportsWhitelist=r.transports,this._transportOptions=r.transportOptions||{},this._timeout=r.timeout||0;var s=r.sessionId||8;if("function"==typeof s)this._generateSessionId=s;else{if("number"!=typeof s)throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.");this._generateSessionId=function(){return l.string(s)}}this._server=r.server||l.numberString(1e3);var n=new i(t);if(!n.host||!n.protocol)throw new SyntaxError("The URL '"+t+"' is invalid");if(n.hash)throw new SyntaxError("The URL must not contain a fragment");if("http:"!==n.protocol&&"https:"!==n.protocol)throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '"+n.protocol+"' is not allowed.");var o="https:"===n.protocol;if("https:"===_.protocol&&!o&&!h.isLoopbackAddr(n.hostname))throw new Error("SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS");e?Array.isArray(e)||(e=[e]):e=[];var a=e.sort();a.forEach((function(t,e){if(!t)throw new SyntaxError("The protocols entry '"+t+"' is invalid.");if(e<a.length-1&&t===a[e+1])throw new SyntaxError("The protocols entry '"+t+"' is duplicated.")}));var u=h.getOrigin(_.href);this._origin=u?u.toLowerCase():null,n.set("pathname",n.pathname.replace(/\/+$/,"")),this.url=n.href,x("using url",this.url),this._urlInfo={nullOrigin:!f.hasDomain(),sameOrigin:h.isOriginEqual(this.url,_.href),sameScheme:h.isSchemeEqual(this.url,_.href)},this._ir=new w(this.url,this._urlInfo),this._ir.once("finish",this._receiveInfo.bind(this))}function E(t){return 1e3===t||t>=3e3&&t<=4999}"production"!==r.env.NODE_ENV&&(x=t("debug")("sockjs-client:main")),o(j,v),j.prototype.close=function(t,e){if(t&&!E(t))throw new Error("InvalidAccessError: Invalid code");if(e&&e.length>123)throw new SyntaxError("reason argument has an invalid length");if(this.readyState!==j.CLOSING&&this.readyState!==j.CLOSED){var r=!0;this._close(t||1e3,e||"Normal closure",r)}},j.prototype.send=function(t){if("string"!=typeof t&&(t=""+t),this.readyState===j.CONNECTING)throw new Error("InvalidStateError: The connection has not been established yet");this.readyState===j.OPEN&&this._transport.send(u.quote(t))},j.version=t("./version"),j.CONNECTING=0,j.OPEN=1,j.CLOSING=2,j.CLOSED=3,j.prototype._receiveInfo=function(t,e){if(x("_receiveInfo",e),this._ir=null,t){this._rto=this.countRTO(e),this._transUrl=t.base_url?t.base_url:this.url,t=p.extend(t,this._urlInfo),x("info",t);var r=n.filterToEnabled(this._transportsWhitelist,t);this._transports=r.main,x(this._transports.length+" enabled transports"),this._connect()}else this._close(1002,"Cannot connect to server")},j.prototype._connect=function(){for(var t=this._transports.shift();t;t=this._transports.shift()){if(x("attempt",t.transportName),t.needBody&&(!s.document.body||void 0!==s.document.readyState&&"complete"!==s.document.readyState&&"interactive"!==s.document.readyState))return x("waiting for body"),this._transports.unshift(t),void c.attachEvent("load",this._connect.bind(this));var e=Math.max(this._timeout,this._rto*t.roundTrips||5e3);this._transportTimeoutId=setTimeout(this._transportTimeout.bind(this),e),x("using timeout",e);var r=h.addPath(this._transUrl,"/"+this._server+"/"+this._generateSessionId()),n=this._transportOptions[t.transportName];x("transport url",r);var i=new t(r,this._transUrl,n);return i.on("message",this._transportMessage.bind(this)),i.once("close",this._transportClose.bind(this)),i.transportName=t.transportName,void(this._transport=i)}this._close(2e3,"All transports failed",!1)},j.prototype._transportTimeout=function(){x("_transportTimeout"),this.readyState===j.CONNECTING&&(this._transport&&this._transport.close(),this._transportClose(2007,"Transport timed out"))},j.prototype._transportMessage=function(t){x("_transportMessage",t);var e,r=this,s=t.slice(0,1),n=t.slice(1);switch(s){case"o":return void this._open();case"h":return this.dispatchEvent(new g("heartbeat")),void x("heartbeat",this.transport)}if(n)try{e=a.parse(n)}catch(t){x("bad json",n)}if(void 0!==e)switch(s){case"a":Array.isArray(e)&&e.forEach((function(t){x("message",r.transport,t),r.dispatchEvent(new b(t))}));break;case"m":x("message",this.transport,e),this.dispatchEvent(new b(e));break;case"c":Array.isArray(e)&&2===e.length&&this._close(e[0],e[1],!0)}else x("empty payload",n)},j.prototype._transportClose=function(t,e){x("_transportClose",this.transport,t,e),this._transport&&(this._transport.removeAllListeners(),this._transport=null,this.transport=null),E(t)||2e3===t||this.readyState!==j.CONNECTING?this._close(t,e):this._connect()},j.prototype._open=function(){x("_open",this._transport&&this._transport.transportName,this.readyState),this.readyState===j.CONNECTING?(this._transportTimeoutId&&(clearTimeout(this._transportTimeoutId),this._transportTimeoutId=null),this.readyState=j.OPEN,this.transport=this._transport.transportName,this.dispatchEvent(new g("open")),x("connected",this.transport)):this._close(1006,"Server lost session")},j.prototype._close=function(t,e,r){x("_close",this.transport,t,e,r,this.readyState);var s=!1;if(this._ir&&(s=!0,this._ir.close(),this._ir=null),this._transport&&(this._transport.close(),this._transport=null,this.transport=null),this.readyState===j.CLOSED)throw new Error("InvalidStateError: SockJS has already been closed");this.readyState=j.CLOSING,setTimeout(function(){this.readyState=j.CLOSED,s&&this.dispatchEvent(new g("error"));var n=new y("close");n.wasClean=r||!1,n.code=t||1e3,n.reason=e,this.dispatchEvent(n),this.onmessage=this.onclose=this.onerror=null,x("disconnected")}.bind(this),0)},j.prototype.countRTO=function(t){return t>100?4*t:300+t},e.exports=function(e){return n=d(e),t("./iframe-bootstrap")(j,e),j}}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,debug:55,inherits:57,json3:58,"url-parse":61}],15:[function(t,e,r){"use strict";var s,n=Array.prototype,i=Object.prototype,o=Function.prototype,a=String.prototype,l=n.slice,u=i.toString,h=function(t){return"[object Function]"===i.toString.call(t)},c=function(t){return"[object Array]"===u.call(t)},d=function(t){return"[object String]"===u.call(t)},p=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(t){return!1}}();s=p?function(t,e,r,s){!s&&e in t||Object.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:!0,value:r})}:function(t,e,r,s){!s&&e in t||(t[e]=r)};var f=function(t,e,r){for(var n in e)i.hasOwnProperty.call(e,n)&&s(t,n,e[n],r)},m=function(t){if(null==t)throw new TypeError("can't convert "+t+" to object");return Object(t)};function g(t){var e=+t;return e!=e?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(e>0||-1)*Math.floor(Math.abs(e))),e}function v(t){return t>>>0}function _(){}f(o,{bind:function(t){var e=this;if(!h(e))throw new TypeError("Function.prototype.bind called on incompatible "+e);for(var r=l.call(arguments,1),s=function(){if(this instanceof a){var s=e.apply(this,r.concat(l.call(arguments)));return Object(s)===s?s:this}return e.apply(t,r.concat(l.call(arguments)))},n=Math.max(0,e.length-r.length),i=[],o=0;o<n;o++)i.push("$"+o);var a=Function("binder","return function ("+i.join(",")+"){ return binder.apply(this, arguments); }")(s);return e.prototype&&(_.prototype=e.prototype,a.prototype=new _,_.prototype=null),a}}),f(Array,{isArray:c});var y,b,w,x=Object("a"),j="a"!==x[0]||!(0 in x);f(n,{forEach:function(t){var e=m(this),r=j&&d(this)?this.split(""):e,s=arguments[1],n=-1,i=r.length>>>0;if(!h(t))throw new TypeError;for(;++n<i;)n in r&&t.call(s,r[n],n,e)}},(y=n.forEach,b=!0,w=!0,y&&(y.call("foo",(function(t,e,r){"object"!=typeof r&&(b=!1)})),y.call([1],(function(){w="string"==typeof this}),"x")),!(y&&b&&w)));var E=Array.prototype.indexOf&&-1!==[0,1].indexOf(1,2);f(n,{indexOf:function(t){var e=j&&d(this)?this.split(""):m(this),r=e.length>>>0;if(!r)return-1;var s=0;for(arguments.length>1&&(s=g(arguments[1])),s=s>=0?s:Math.max(0,r+s);s<r;s++)if(s in e&&e[s]===t)return s;return-1}},E);var T,C=a.split;2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?(T=void 0===/()??/.exec("")[1],a.split=function(t,e){var r=this;if(void 0===t&&0===e)return[];if("[object RegExp]"!==u.call(t))return C.call(this,t,e);var s,i,o,a,l=[],h=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.extended?"x":"")+(t.sticky?"y":""),c=0;for(t=new RegExp(t.source,h+"g"),r+="",T||(s=new RegExp("^"+t.source+"$(?!\\s)",h)),e=void 0===e?-1>>>0:v(e);(i=t.exec(r))&&!((o=i.index+i[0].length)>c&&(l.push(r.slice(c,i.index)),!T&&i.length>1&&i[0].replace(s,(function(){for(var t=1;t<arguments.length-2;t++)void 0===arguments[t]&&(i[t]=void 0)})),i.length>1&&i.index<r.length&&n.push.apply(l,i.slice(1)),a=i[0].length,c=o,l.length>=e));)t.lastIndex===i.index&&t.lastIndex++;return c===r.length?!a&&t.test("")||l.push(""):l.push(r.slice(c)),l.length>e?l.slice(0,e):l}):"0".split(void 0,0).length&&(a.split=function(t,e){return void 0===t&&0===e?[]:C.call(this,t,e)});var A=a.substr,S="".substr&&"b"!=="0b".substr(-1);f(a,{substr:function(t,e){return A.call(this,t<0&&(t=this.length+t)<0?0:t,e)}},S)},{}],16:[function(t,e,r){"use strict";e.exports=[t("./transport/websocket"),t("./transport/xhr-streaming"),t("./transport/xdr-streaming"),t("./transport/eventsource"),t("./transport/lib/iframe-wrap")(t("./transport/eventsource")),t("./transport/htmlfile"),t("./transport/lib/iframe-wrap")(t("./transport/htmlfile")),t("./transport/xhr-polling"),t("./transport/xdr-polling"),t("./transport/lib/iframe-wrap")(t("./transport/xhr-polling")),t("./transport/jsonp-polling")]},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(t,e,s){(function(r,s){"use strict";var n=t("events").EventEmitter,i=t("inherits"),o=t("../../utils/event"),a=t("../../utils/url"),l=s.XMLHttpRequest,u=function(){};function h(t,e,r,s){u(t,e);var i=this;n.call(this),setTimeout((function(){i._start(t,e,r,s)}),0)}"production"!==r.env.NODE_ENV&&(u=t("debug")("sockjs-client:browser:xhr")),i(h,n),h.prototype._start=function(t,e,r,s){var n=this;try{this.xhr=new l}catch(t){}if(!this.xhr)return u("no xhr"),this.emit("finish",0,"no xhr support"),void this._cleanup();e=a.addQuery(e,"t="+ +new Date),this.unloadRef=o.unloadAdd((function(){u("unload cleanup"),n._cleanup(!0)}));try{this.xhr.open(t,e,!0),this.timeout&&"timeout"in this.xhr&&(this.xhr.timeout=this.timeout,this.xhr.ontimeout=function(){u("xhr timeout"),n.emit("finish",0,""),n._cleanup(!1)})}catch(t){return u("exception",t),this.emit("finish",0,""),void this._cleanup(!1)}if(s&&s.noCredentials||!h.supportsCORS||(u("withCredentials"),this.xhr.withCredentials=!0),s&&s.headers)for(var i in s.headers)this.xhr.setRequestHeader(i,s.headers[i]);this.xhr.onreadystatechange=function(){if(n.xhr){var t,e,r=n.xhr;switch(u("readyState",r.readyState),r.readyState){case 3:try{e=r.status,t=r.responseText}catch(t){}u("status",e),1223===e&&(e=204),200===e&&t&&t.length>0&&(u("chunk"),n.emit("chunk",e,t));break;case 4:e=r.status,u("status",e),1223===e&&(e=204),12005!==e&&12029!==e||(e=0),u("finish",e,r.responseText),n.emit("finish",e,r.responseText),n._cleanup(!1)}}};try{n.xhr.send(r)}catch(t){n.emit("finish",0,""),n._cleanup(!1)}},h.prototype._cleanup=function(t){if(u("cleanup"),this.xhr){if(this.removeAllListeners(),o.unloadDel(this.unloadRef),this.xhr.onreadystatechange=function(){},this.xhr.ontimeout&&(this.xhr.ontimeout=null),t)try{this.xhr.abort()}catch(t){}this.unloadRef=this.xhr=null}},h.prototype.close=function(){u("close"),this._cleanup(!0)},h.enabled=!!l;var c=["Active"].concat("Object").join("X");!h.enabled&&c in s&&(u("overriding xmlhttprequest"),l=function(){try{return new s[c]("Microsoft.XMLHTTP")}catch(t){return null}},h.enabled=!!new l);var d=!1;try{d="withCredentials"in new l}catch(t){}h.supportsCORS=d,e.exports=h}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],18:[function(t,e,s){(function(t){e.exports=t.EventSource}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],19:[function(t,e,s){(function(t){"use strict";var r=t.WebSocket||t.MozWebSocket;e.exports=r?function(t){return new r(t)}:void 0}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],20:[function(t,e,r){"use strict";var s=t("inherits"),n=t("./lib/ajax-based"),i=t("./receiver/eventsource"),o=t("./sender/xhr-cors"),a=t("eventsource");function l(t){if(!l.enabled())throw new Error("Transport created when disabled");n.call(this,t,"/eventsource",i,o)}s(l,n),l.enabled=function(){return!!a},l.transportName="eventsource",l.roundTrips=2,e.exports=l},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,eventsource:18,inherits:57}],21:[function(t,e,r){"use strict";var s=t("inherits"),n=t("./receiver/htmlfile"),i=t("./sender/xhr-local"),o=t("./lib/ajax-based");function a(t){if(!n.enabled)throw new Error("Transport created when disabled");o.call(this,t,"/htmlfile",n,i)}s(a,o),a.enabled=function(t){return n.enabled&&t.sameOrigin},a.transportName="htmlfile",a.roundTrips=2,e.exports=a},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,inherits:57}],22:[function(t,e,r){(function(r){"use strict";var s=t("inherits"),n=t("json3"),i=t("events").EventEmitter,o=t("../version"),a=t("../utils/url"),l=t("../utils/iframe"),u=t("../utils/event"),h=t("../utils/random"),c=function(){};function d(t,e,r){if(!d.enabled())throw new Error("Transport created when disabled");i.call(this);var s=this;this.origin=a.getOrigin(r),this.baseUrl=r,this.transUrl=e,this.transport=t,this.windowId=h.string(8);var n=a.addPath(r,"/iframe.html")+"#"+this.windowId;c(t,e,n),this.iframeObj=l.createIframe(n,(function(t){c("err callback"),s.emit("close",1006,"Unable to load an iframe ("+t+")"),s.close()})),this.onmessageCallback=this._message.bind(this),u.attachEvent("message",this.onmessageCallback)}"production"!==r.env.NODE_ENV&&(c=t("debug")("sockjs-client:transport:iframe")),s(d,i),d.prototype.close=function(){if(c("close"),this.removeAllListeners(),this.iframeObj){u.detachEvent("message",this.onmessageCallback);try{this.postMessage("c")}catch(t){}this.iframeObj.cleanup(),this.iframeObj=null,this.onmessageCallback=this.iframeObj=null}},d.prototype._message=function(t){if(c("message",t.data),a.isOriginEqual(t.origin,this.origin)){var e;try{e=n.parse(t.data)}catch(e){return void c("bad json",t.data)}if(e.windowId===this.windowId)switch(e.type){case"s":this.iframeObj.loaded(),this.postMessage("s",n.stringify([o,this.transport,this.transUrl,this.baseUrl]));break;case"t":this.emit("message",e.data);break;case"c":var r;try{r=n.parse(e.data)}catch(t){return void c("bad json",e.data)}this.emit("close",r[0],r[1]),this.close()}else c("mismatched window id",e.windowId,this.windowId)}else c("not same origin",t.origin,this.origin)},d.prototype.postMessage=function(t,e){c("postMessage",t,e),this.iframeObj.post(n.stringify({windowId:this.windowId,type:t,data:e||""}),this.origin)},d.prototype.send=function(t){c("send",t),this.postMessage("m",t)},d.enabled=function(){return l.iframeEnabled},d.transportName="iframe",d.roundTrips=2,e.exports=d}).call(this,{env:{}})},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,debug:55,events:3,inherits:57,json3:58}],23:[function(t,e,s){(function(r){"use strict";var s=t("inherits"),n=t("./lib/sender-receiver"),i=t("./receiver/jsonp"),o=t("./sender/jsonp");function a(t){if(!a.enabled())throw new Error("Transport created when disabled");n.call(this,t,"/jsonp",o,i)}s(a,n),a.enabled=function(){return!!r.document},a.transportName="jsonp-polling",a.roundTrips=1,a.needBody=!0,e.exports=a}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,inherits:57}],24:[function(t,e,r){(function(r){"use strict";var s=t("inherits"),n=t("../../utils/url"),i=t("./sender-receiver"),o=function(){};function a(t){return function(e,r,s){o("create ajax sender",e,r);var i={};"string"==typeof r&&(i.headers={"Content-type":"text/plain"});var a=n.addPath(e,"/xhr_send"),l=new t("POST",a,r,i);return l.once("finish",(function(t){if(o("finish",t),l=null,200!==t&&204!==t)return s(new Error("http status "+t));s()})),function(){o("abort"),l.close(),l=null;var t=new Error("Aborted");t.code=1e3,s(t)}}}function l(t,e,r,s){i.call(this,t,e,a(s),r,s)}"production"!==r.env.NODE_ENV&&(o=t("debug")("sockjs-client:ajax-based")),s(l,i),e.exports=l}).call(this,{env:{}})},{"../../utils/url":52,"./sender-receiver":28,debug:55,inherits:57}],25:[function(t,e,r){(function(r){"use strict";var s=t("inherits"),n=t("events").EventEmitter,i=function(){};function o(t,e){i(t),n.call(this),this.sendBuffer=[],this.sender=e,this.url=t}"production"!==r.env.NODE_ENV&&(i=t("debug")("sockjs-client:buffered-sender")),s(o,n),o.prototype.send=function(t){i("send",t),this.sendBuffer.push(t),this.sendStop||this.sendSchedule()},o.prototype.sendScheduleWait=function(){i("sendScheduleWait");var t,e=this;this.sendStop=function(){i("sendStop"),e.sendStop=null,clearTimeout(t)},t=setTimeout((function(){i("timeout"),e.sendStop=null,e.sendSchedule()}),25)},o.prototype.sendSchedule=function(){i("sendSchedule",this.sendBuffer.length);var t=this;if(this.sendBuffer.length>0){var e="["+this.sendBuffer.join(",")+"]";this.sendStop=this.sender(this.url,e,(function(e){t.sendStop=null,e?(i("error",e),t.emit("close",e.code||1006,"Sending error: "+e),t.close()):t.sendScheduleWait()})),this.sendBuffer=[]}},o.prototype._cleanup=function(){i("_cleanup"),this.removeAllListeners()},o.prototype.close=function(){i("close"),this._cleanup(),this.sendStop&&(this.sendStop(),this.sendStop=null)},e.exports=o}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],26:[function(t,e,s){(function(r){"use strict";var s=t("inherits"),n=t("../iframe"),i=t("../../utils/object");e.exports=function(t){function e(e,r){n.call(this,t.transportName,e,r)}return s(e,n),e.enabled=function(e,s){if(!r.document)return!1;var o=i.extend({},s);return o.sameOrigin=!0,t.enabled(o)&&n.enabled()},e.transportName="iframe-"+t.transportName,e.needBody=!0,e.roundTrips=n.roundTrips+t.roundTrips-1,e.facadeTransport=t,e}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/object":49,"../iframe":22,inherits:57}],27:[function(t,e,r){(function(r){"use strict";var s=t("inherits"),n=t("events").EventEmitter,i=function(){};function o(t,e,r){i(e),n.call(this),this.Receiver=t,this.receiveUrl=e,this.AjaxObject=r,this._scheduleReceiver()}"production"!==r.env.NODE_ENV&&(i=t("debug")("sockjs-client:polling")),s(o,n),o.prototype._scheduleReceiver=function(){i("_scheduleReceiver");var t=this,e=this.poll=new this.Receiver(this.receiveUrl,this.AjaxObject);e.on("message",(function(e){i("message",e),t.emit("message",e)})),e.once("close",(function(r,s){i("close",r,s,t.pollIsClosing),t.poll=e=null,t.pollIsClosing||("network"===s?t._scheduleReceiver():(t.emit("close",r||1006,s),t.removeAllListeners()))}))},o.prototype.abort=function(){i("abort"),this.removeAllListeners(),this.pollIsClosing=!0,this.poll&&this.poll.abort()},e.exports=o}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],28:[function(t,e,r){(function(r){"use strict";var s=t("inherits"),n=t("../../utils/url"),i=t("./buffered-sender"),o=t("./polling"),a=function(){};function l(t,e,r,s,l){var u=n.addPath(t,e);a(u);var h=this;i.call(this,t,r),this.poll=new o(s,u,l),this.poll.on("message",(function(t){a("poll message",t),h.emit("message",t)})),this.poll.once("close",(function(t,e){a("poll close",t,e),h.poll=null,h.emit("close",t,e),h.close()}))}"production"!==r.env.NODE_ENV&&(a=t("debug")("sockjs-client:sender-receiver")),s(l,i),l.prototype.close=function(){i.prototype.close.call(this),a("close"),this.removeAllListeners(),this.poll&&(this.poll.abort(),this.poll=null)},e.exports=l}).call(this,{env:{}})},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,debug:55,inherits:57}],29:[function(t,e,r){(function(r){"use strict";var s=t("inherits"),n=t("events").EventEmitter,i=t("eventsource"),o=function(){};function a(t){o(t),n.call(this);var e=this,r=this.es=new i(t);r.onmessage=function(t){o("message",t.data),e.emit("message",decodeURI(t.data))},r.onerror=function(t){o("error",r.readyState,t);var s=2!==r.readyState?"network":"permanent";e._cleanup(),e._close(s)}}"production"!==r.env.NODE_ENV&&(o=t("debug")("sockjs-client:receiver:eventsource")),s(a,n),a.prototype.abort=function(){o("abort"),this._cleanup(),this._close("user")},a.prototype._cleanup=function(){o("cleanup");var t=this.es;t&&(t.onmessage=t.onerror=null,t.close(),this.es=null)},a.prototype._close=function(t){o("close",t);var e=this;setTimeout((function(){e.emit("close",null,t),e.removeAllListeners()}),200)},e.exports=a}).call(this,{env:{}})},{debug:55,events:3,eventsource:18,inherits:57}],30:[function(t,e,s){(function(r,s){"use strict";var n=t("inherits"),i=t("../../utils/iframe"),o=t("../../utils/url"),a=t("events").EventEmitter,l=t("../../utils/random"),u=function(){};function h(t){u(t),a.call(this);var e=this;i.polluteGlobalNamespace(),this.id="a"+l.string(6),t=o.addQuery(t,"c="+decodeURIComponent(i.WPrefix+"."+this.id)),u("using htmlfile",h.htmlfileEnabled);var r=h.htmlfileEnabled?i.createHtmlfile:i.createIframe;s[i.WPrefix][this.id]={start:function(){u("start"),e.iframeObj.loaded()},message:function(t){u("message",t),e.emit("message",t)},stop:function(){u("stop"),e._cleanup(),e._close("network")}},this.iframeObj=r(t,(function(){u("callback"),e._cleanup(),e._close("permanent")}))}"production"!==r.env.NODE_ENV&&(u=t("debug")("sockjs-client:receiver:htmlfile")),n(h,a),h.prototype.abort=function(){u("abort"),this._cleanup(),this._close("user")},h.prototype._cleanup=function(){u("_cleanup"),this.iframeObj&&(this.iframeObj.cleanup(),this.iframeObj=null),delete s[i.WPrefix][this.id]},h.prototype._close=function(t){u("_close",t),this.emit("close",null,t),this.removeAllListeners()},h.htmlfileEnabled=!1;var c=["Active"].concat("Object").join("X");if(c in s)try{h.htmlfileEnabled=!!new s[c]("htmlfile")}catch(t){}h.enabled=h.htmlfileEnabled||i.iframeEnabled,e.exports=h}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],31:[function(t,e,s){(function(r,s){"use strict";var n=t("../../utils/iframe"),i=t("../../utils/random"),o=t("../../utils/browser"),a=t("../../utils/url"),l=t("inherits"),u=t("events").EventEmitter,h=function(){};function c(t){h(t);var e=this;u.call(this),n.polluteGlobalNamespace(),this.id="a"+i.string(6);var r=a.addQuery(t,"c="+encodeURIComponent(n.WPrefix+"."+this.id));s[n.WPrefix][this.id]=this._callback.bind(this),this._createScript(r),this.timeoutId=setTimeout((function(){h("timeout"),e._abort(new Error("JSONP script loaded abnormally (timeout)"))}),c.timeout)}"production"!==r.env.NODE_ENV&&(h=t("debug")("sockjs-client:receiver:jsonp")),l(c,u),c.prototype.abort=function(){if(h("abort"),s[n.WPrefix][this.id]){var t=new Error("JSONP user aborted read");t.code=1e3,this._abort(t)}},c.timeout=35e3,c.scriptErrorTimeout=1e3,c.prototype._callback=function(t){h("_callback",t),this._cleanup(),this.aborting||(t&&(h("message",t),this.emit("message",t)),this.emit("close",null,"network"),this.removeAllListeners())},c.prototype._abort=function(t){h("_abort",t),this._cleanup(),this.aborting=!0,this.emit("close",t.code,t.message),this.removeAllListeners()},c.prototype._cleanup=function(){if(h("_cleanup"),clearTimeout(this.timeoutId),this.script2&&(this.script2.parentNode.removeChild(this.script2),this.script2=null),this.script){var t=this.script;t.parentNode.removeChild(t),t.onreadystatechange=t.onerror=t.onload=t.onclick=null,this.script=null}delete s[n.WPrefix][this.id]},c.prototype._scriptError=function(){h("_scriptError");var t=this;this.errorTimer||(this.errorTimer=setTimeout((function(){t.loadedOkay||t._abort(new Error("JSONP script loaded abnormally (onerror)"))}),c.scriptErrorTimeout))},c.prototype._createScript=function(t){h("_createScript",t);var e,r=this,n=this.script=s.document.createElement("script");if(n.id="a"+i.string(8),n.src=t,n.type="text/javascript",n.charset="UTF-8",n.onerror=this._scriptError.bind(this),n.onload=function(){h("onload"),r._abort(new Error("JSONP script loaded abnormally (onload)"))},n.onreadystatechange=function(){if(h("onreadystatechange",n.readyState),/loaded|closed/.test(n.readyState)){if(n&&n.htmlFor&&n.onclick){r.loadedOkay=!0;try{n.onclick()}catch(t){}}n&&r._abort(new Error("JSONP script loaded abnormally (onreadystatechange)"))}},void 0===n.async&&s.document.attachEvent)if(o.isOpera())(e=this.script2=s.document.createElement("script")).text="try{var a = document.getElementById('"+n.id+"'); if(a)a.onerror();}catch(x){};",n.async=e.async=!1;else{try{n.htmlFor=n.id,n.event="onclick"}catch(t){}n.async=!0}void 0!==n.async&&(n.async=!0);var a=s.document.getElementsByTagName("head")[0];a.insertBefore(n,a.firstChild),e&&a.insertBefore(e,a.firstChild)},e.exports=c}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],32:[function(t,e,r){(function(r){"use strict";var s=t("inherits"),n=t("events").EventEmitter,i=function(){};function o(t,e){i(t),n.call(this);var r=this;this.bufferPosition=0,this.xo=new e("POST",t,null),this.xo.on("chunk",this._chunkHandler.bind(this)),this.xo.once("finish",(function(t,e){i("finish",t,e),r._chunkHandler(t,e),r.xo=null;var s=200===t?"network":"permanent";i("close",s),r.emit("close",null,s),r._cleanup()}))}"production"!==r.env.NODE_ENV&&(i=t("debug")("sockjs-client:receiver:xhr")),s(o,n),o.prototype._chunkHandler=function(t,e){if(i("_chunkHandler",t),200===t&&e)for(var r=-1;;this.bufferPosition+=r+1){var s=e.slice(this.bufferPosition);if(-1===(r=s.indexOf("\n")))break;var n=s.slice(0,r);n&&(i("message",n),this.emit("message",n))}},o.prototype._cleanup=function(){i("_cleanup"),this.removeAllListeners()},o.prototype.abort=function(){i("abort"),this.xo&&(this.xo.close(),i("close"),this.emit("close",null,"user"),this.xo=null),this._cleanup()},e.exports=o}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],33:[function(t,e,s){(function(r,s){"use strict";var n,i,o=t("../../utils/random"),a=t("../../utils/url"),l=function(){};function u(t){l("createIframe",t);try{return s.document.createElement('<iframe name="'+t+'">')}catch(r){var e=s.document.createElement("iframe");return e.name=t,e}}function h(){l("createForm"),(n=s.document.createElement("form")).style.display="none",n.style.position="absolute",n.method="POST",n.enctype="application/x-www-form-urlencoded",n.acceptCharset="UTF-8",(i=s.document.createElement("textarea")).name="d",n.appendChild(i),s.document.body.appendChild(n)}"production"!==r.env.NODE_ENV&&(l=t("debug")("sockjs-client:sender:jsonp")),e.exports=function(t,e,r){l(t,e),n||h();var s="a"+o.string(8);n.target=s,n.action=a.addQuery(a.addPath(t,"/jsonp_send"),"i="+s);var c=u(s);c.id=s,c.style.display="none",n.appendChild(c);try{i.value=e}catch(t){}n.submit();var d=function(t){l("completed",s,t),c.onerror&&(c.onreadystatechange=c.onerror=c.onload=null,setTimeout((function(){l("cleaning up",s),c.parentNode.removeChild(c),c=null}),500),i.value="",r(t))};return c.onerror=function(){l("onerror",s),d()},c.onload=function(){l("onload",s),d()},c.onreadystatechange=function(t){l("onreadystatechange",s,c.readyState,t),"complete"===c.readyState&&d()},function(){l("aborted",s),d(new Error("Aborted"))}}}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/random":50,"../../utils/url":52,debug:55}],34:[function(t,e,s){(function(r,s){"use strict";var n=t("events").EventEmitter,i=t("inherits"),o=t("../../utils/event"),a=t("../../utils/browser"),l=t("../../utils/url"),u=function(){};function h(t,e,r){u(t,e);var s=this;n.call(this),setTimeout((function(){s._start(t,e,r)}),0)}"production"!==r.env.NODE_ENV&&(u=t("debug")("sockjs-client:sender:xdr")),i(h,n),h.prototype._start=function(t,e,r){u("_start");var n=this,i=new s.XDomainRequest;e=l.addQuery(e,"t="+ +new Date),i.onerror=function(){u("onerror"),n._error()},i.ontimeout=function(){u("ontimeout"),n._error()},i.onprogress=function(){u("progress",i.responseText),n.emit("chunk",200,i.responseText)},i.onload=function(){u("load"),n.emit("finish",200,i.responseText),n._cleanup(!1)},this.xdr=i,this.unloadRef=o.unloadAdd((function(){n._cleanup(!0)}));try{this.xdr.open(t,e),this.timeout&&(this.xdr.timeout=this.timeout),this.xdr.send(r)}catch(t){this._error()}},h.prototype._error=function(){this.emit("finish",0,""),this._cleanup(!1)},h.prototype._cleanup=function(t){if(u("cleanup",t),this.xdr){if(this.removeAllListeners(),o.unloadDel(this.unloadRef),this.xdr.ontimeout=this.xdr.onerror=this.xdr.onprogress=this.xdr.onload=null,t)try{this.xdr.abort()}catch(t){}this.unloadRef=this.xdr=null}},h.prototype.close=function(){u("close"),this._cleanup(!0)},h.enabled=!(!s.XDomainRequest||!a.hasDomain()),e.exports=h}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],35:[function(t,e,r){"use strict";var s=t("inherits"),n=t("../driver/xhr");function i(t,e,r,s){n.call(this,t,e,r,s)}s(i,n),i.enabled=n.enabled&&n.supportsCORS,e.exports=i},{"../driver/xhr":17,inherits:57}],36:[function(t,e,r){"use strict";var s=t("events").EventEmitter;function n(){var t=this;s.call(this),this.to=setTimeout((function(){t.emit("finish",200,"{}")}),n.timeout)}t("inherits")(n,s),n.prototype.close=function(){clearTimeout(this.to)},n.timeout=2e3,e.exports=n},{events:3,inherits:57}],37:[function(t,e,r){"use strict";var s=t("inherits"),n=t("../driver/xhr");function i(t,e,r){n.call(this,t,e,r,{noCredentials:!0})}s(i,n),i.enabled=n.enabled,e.exports=i},{"../driver/xhr":17,inherits:57}],38:[function(t,e,r){(function(r){"use strict";var s=t("../utils/event"),n=t("../utils/url"),i=t("inherits"),o=t("events").EventEmitter,a=t("./driver/websocket"),l=function(){};function u(t,e,r){if(!u.enabled())throw new Error("Transport created when disabled");o.call(this),l("constructor",t);var i=this,h=n.addPath(t,"/websocket");h="https"===h.slice(0,5)?"wss"+h.slice(5):"ws"+h.slice(4),this.url=h,this.ws=new a(this.url,[],r),this.ws.onmessage=function(t){l("message event",t.data),i.emit("message",t.data)},this.unloadRef=s.unloadAdd((function(){l("unload"),i.ws.close()})),this.ws.onclose=function(t){l("close event",t.code,t.reason),i.emit("close",t.code,t.reason),i._cleanup()},this.ws.onerror=function(t){l("error event",t),i.emit("close",1006,"WebSocket connection broken"),i._cleanup()}}"production"!==r.env.NODE_ENV&&(l=t("debug")("sockjs-client:websocket")),i(u,o),u.prototype.send=function(t){var e="["+t+"]";l("send",e),this.ws.send(e)},u.prototype.close=function(){l("close");var t=this.ws;this._cleanup(),t&&t.close()},u.prototype._cleanup=function(){l("_cleanup");var t=this.ws;t&&(t.onmessage=t.onclose=t.onerror=null),s.unloadDel(this.unloadRef),this.unloadRef=this.ws=null,this.removeAllListeners()},u.enabled=function(){return l("enabled"),!!a},u.transportName="websocket",u.roundTrips=2,e.exports=u}).call(this,{env:{}})},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,debug:55,events:3,inherits:57}],39:[function(t,e,r){"use strict";var s=t("inherits"),n=t("./lib/ajax-based"),i=t("./xdr-streaming"),o=t("./receiver/xhr"),a=t("./sender/xdr");function l(t){if(!a.enabled)throw new Error("Transport created when disabled");n.call(this,t,"/xhr",o,a)}s(l,n),l.enabled=i.enabled,l.transportName="xdr-polling",l.roundTrips=2,e.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,inherits:57}],40:[function(t,e,r){"use strict";var s=t("inherits"),n=t("./lib/ajax-based"),i=t("./receiver/xhr"),o=t("./sender/xdr");function a(t){if(!o.enabled)throw new Error("Transport created when disabled");n.call(this,t,"/xhr_streaming",i,o)}s(a,n),a.enabled=function(t){return!t.cookie_needed&&!t.nullOrigin&&o.enabled&&t.sameScheme},a.transportName="xdr-streaming",a.roundTrips=2,e.exports=a},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,inherits:57}],41:[function(t,e,r){"use strict";var s=t("inherits"),n=t("./lib/ajax-based"),i=t("./receiver/xhr"),o=t("./sender/xhr-cors"),a=t("./sender/xhr-local");function l(t){if(!a.enabled&&!o.enabled)throw new Error("Transport created when disabled");n.call(this,t,"/xhr",i,o)}s(l,n),l.enabled=function(t){return!t.nullOrigin&&(!(!a.enabled||!t.sameOrigin)||o.enabled)},l.transportName="xhr-polling",l.roundTrips=2,e.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],42:[function(t,e,s){(function(r){"use strict";var s=t("inherits"),n=t("./lib/ajax-based"),i=t("./receiver/xhr"),o=t("./sender/xhr-cors"),a=t("./sender/xhr-local"),l=t("../utils/browser");function u(t){if(!a.enabled&&!o.enabled)throw new Error("Transport created when disabled");n.call(this,t,"/xhr_streaming",i,o)}s(u,n),u.enabled=function(t){return!t.nullOrigin&&!l.isOpera()&&o.enabled},u.transportName="xhr-streaming",u.roundTrips=2,u.needBody=!!r.document,e.exports=u}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],43:[function(t,e,s){(function(t){"use strict";t.crypto&&t.crypto.getRandomValues?e.exports.randomBytes=function(e){var r=new Uint8Array(e);return t.crypto.getRandomValues(r),r}:e.exports.randomBytes=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=Math.floor(256*Math.random());return e}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],44:[function(t,e,s){(function(t){"use strict";e.exports={isOpera:function(){return t.navigator&&/opera/i.test(t.navigator.userAgent)},isKonqueror:function(){return t.navigator&&/konqueror/i.test(t.navigator.userAgent)},hasDomain:function(){if(!t.document)return!0;try{return!!t.document.domain}catch(t){return!1}}}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],45:[function(t,e,r){"use strict";var s,n=t("json3"),i=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,o=function(t){var e,r={},s=[];for(e=0;e<65536;e++)s.push(String.fromCharCode(e));return t.lastIndex=0,s.join("").replace(t,(function(t){return r[t]="\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4),""})),t.lastIndex=0,r};e.exports={quote:function(t){var e=n.stringify(t);return i.lastIndex=0,i.test(e)?(s||(s=o(i)),e.replace(i,(function(t){return s[t]}))):e}}},{json3:58}],46:[function(t,e,s){(function(r){"use strict";var s=t("./random"),n={},i=!1,o=r.chrome&&r.chrome.app&&r.chrome.app.runtime;e.exports={attachEvent:function(t,e){void 0!==r.addEventListener?r.addEventListener(t,e,!1):r.document&&r.attachEvent&&(r.document.attachEvent("on"+t,e),r.attachEvent("on"+t,e))},detachEvent:function(t,e){void 0!==r.addEventListener?r.removeEventListener(t,e,!1):r.document&&r.detachEvent&&(r.document.detachEvent("on"+t,e),r.detachEvent("on"+t,e))},unloadAdd:function(t){if(o)return null;var e=s.string(8);return n[e]=t,i&&setTimeout(this.triggerUnloadCallbacks,0),e},unloadDel:function(t){t in n&&delete n[t]},triggerUnloadCallbacks:function(){for(var t in n)n[t](),delete n[t]}};var a=function(){i||(i=!0,e.exports.triggerUnloadCallbacks())};o||e.exports.attachEvent("unload",a)}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./random":50}],47:[function(t,e,s){(function(r,s){"use strict";var n=t("./event"),i=t("json3"),o=t("./browser"),a=function(){};"production"!==r.env.NODE_ENV&&(a=t("debug")("sockjs-client:utils:iframe")),e.exports={WPrefix:"_jp",currentWindowId:null,polluteGlobalNamespace:function(){e.exports.WPrefix in s||(s[e.exports.WPrefix]={})},postMessage:function(t,r){s.parent!==s?s.parent.postMessage(i.stringify({windowId:e.exports.currentWindowId,type:t,data:r||""}),"*"):a("Cannot postMessage, no parent window.",t,r)},createIframe:function(t,e){var r,i,o=s.document.createElement("iframe"),l=function(){a("unattach"),clearTimeout(r);try{o.onload=null}catch(t){}o.onerror=null},u=function(){a("cleanup"),o&&(l(),setTimeout((function(){o&&o.parentNode.removeChild(o),o=null}),0),n.unloadDel(i))},h=function(t){a("onerror",t),o&&(u(),e(t))},c=function(t,e){a("post",t,e),setTimeout((function(){try{o&&o.contentWindow&&o.contentWindow.postMessage(t,e)}catch(t){}}),0)};return o.src=t,o.style.display="none",o.style.position="absolute",o.onerror=function(){h("onerror")},o.onload=function(){a("onload"),clearTimeout(r),r=setTimeout((function(){h("onload timeout")}),2e3)},s.document.body.appendChild(o),r=setTimeout((function(){h("timeout")}),15e3),i=n.unloadAdd(u),{post:c,cleanup:u,loaded:l}},createHtmlfile:function(t,r){var i,o,l,u=["Active"].concat("Object").join("X"),h=new s[u]("htmlfile"),c=function(){clearTimeout(i),l.onerror=null},d=function(){h&&(c(),n.unloadDel(o),l.parentNode.removeChild(l),l=h=null,CollectGarbage())},p=function(t){a("onerror",t),h&&(d(),r(t))},f=function(t,e){try{setTimeout((function(){l&&l.contentWindow&&l.contentWindow.postMessage(t,e)}),0)}catch(t){}};h.open(),h.write('<html><script>document.domain="'+s.document.domain+'";<\/script></html>'),h.close(),h.parentWindow[e.exports.WPrefix]=s[e.exports.WPrefix];var m=h.createElement("div");return h.body.appendChild(m),l=h.createElement("iframe"),m.appendChild(l),l.src=t,l.onerror=function(){p("onerror")},i=setTimeout((function(){p("timeout")}),15e3),o=n.unloadAdd(d),{post:f,cleanup:d,loaded:c}}},e.exports.iframeEnabled=!1,s.document&&(e.exports.iframeEnabled=("function"==typeof s.postMessage||"object"==typeof s.postMessage)&&!o.isKonqueror())}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./browser":44,"./event":46,debug:55,json3:58}],48:[function(t,e,s){(function(t){"use strict";var r={};["log","debug","warn"].forEach((function(e){var s;try{s=t.console&&t.console[e]&&t.console[e].apply}catch(t){}r[e]=s?function(){return t.console[e].apply(t.console,arguments)}:"log"===e?function(){}:r.log})),e.exports=r}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],49:[function(t,e,r){"use strict";e.exports={isObject:function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},extend:function(t){if(!this.isObject(t))return t;for(var e,r,s=1,n=arguments.length;s<n;s++)for(r in e=arguments[s])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}}},{}],50:[function(t,e,r){"use strict";var s=t("crypto"),n="abcdefghijklmnopqrstuvwxyz012345";e.exports={string:function(t){for(var e=n.length,r=s.randomBytes(t),i=[],o=0;o<t;o++)i.push(n.substr(r[o]%e,1));return i.join("")},number:function(t){return Math.floor(Math.random()*t)},numberString:function(t){var e=(""+(t-1)).length;return(new Array(e+1).join("0")+this.number(t)).slice(-e)}}},{crypto:43}],51:[function(t,e,r){(function(r){"use strict";var s=function(){};"production"!==r.env.NODE_ENV&&(s=t("debug")("sockjs-client:utils:transport")),e.exports=function(t){return{filterToEnabled:function(e,r){var n={main:[],facade:[]};return e?"string"==typeof e&&(e=[e]):e=[],t.forEach((function(t){t&&("websocket"!==t.transportName||!1!==r.websocket?e.length&&-1===e.indexOf(t.transportName)?s("not in whitelist",t.transportName):t.enabled(r)?(s("enabled",t.transportName),n.main.push(t),t.facadeTransport&&n.facade.push(t.facadeTransport)):s("disabled",t.transportName):s("disabled from server","websocket"))})),n}}}}).call(this,{env:{}})},{debug:55}],52:[function(t,e,r){(function(r){"use strict";var s=t("url-parse"),n=function(){};"production"!==r.env.NODE_ENV&&(n=t("debug")("sockjs-client:utils:url")),e.exports={getOrigin:function(t){if(!t)return null;var e=new s(t);if("file:"===e.protocol)return null;var r=e.port;return r||(r="https:"===e.protocol?"443":"80"),e.protocol+"//"+e.hostname+":"+r},isOriginEqual:function(t,e){var r=this.getOrigin(t)===this.getOrigin(e);return n("same",t,e,r),r},isSchemeEqual:function(t,e){return t.split(":")[0]===e.split(":")[0]},addPath:function(t,e){var r=t.split("?");return r[0]+e+(r[1]?"?"+r[1]:"")},addQuery:function(t,e){return t+(-1===t.indexOf("?")?"?"+e:"&"+e)},isLoopbackAddr:function(t){return/^127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(t)||/^\[::1\]$/.test(t)}}}).call(this,{env:{}})},{debug:55,"url-parse":61}],53:[function(t,e,r){e.exports="1.5.1"},{}],54:[function(t,e,r){var s=1e3,n=60*s,i=60*n,o=24*i,a=7*o,l=365.25*o;function u(t){if(!((t=String(t)).length>100)){var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(e){var r=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*l;case"weeks":case"week":case"w":return r*a;case"days":case"day":case"d":return r*o;case"hours":case"hour":case"hrs":case"hr":case"h":return r*i;case"minutes":case"minute":case"mins":case"min":case"m":return r*n;case"seconds":case"second":case"secs":case"sec":case"s":return r*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}function h(t){var e=Math.abs(t);return e>=o?Math.round(t/o)+"d":e>=i?Math.round(t/i)+"h":e>=n?Math.round(t/n)+"m":e>=s?Math.round(t/s)+"s":t+"ms"}function c(t){var e=Math.abs(t);return e>=o?d(t,e,o,"day"):e>=i?d(t,e,i,"hour"):e>=n?d(t,e,n,"minute"):e>=s?d(t,e,s,"second"):t+" ms"}function d(t,e,r,s){var n=e>=1.5*r;return Math.round(t/r)+" "+s+(n?"s":"")}e.exports=function(t,e){e=e||{};var r=typeof t;if("string"===r&&t.length>0)return u(t);if("number"===r&&isFinite(t))return e.long?c(t):h(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},{}],55:[function(t,e,r){(function(s){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))}function o(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),this.useColors){var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var s=0,n=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(s++,"%c"===t&&(n=s))})),t.splice(n,0,r)}}function a(){var t;return"object"===("undefined"==typeof console?"undefined":n(console))&&console.log&&(t=console).log.apply(t,arguments)}function l(t){try{t?r.storage.setItem("debug",t):r.storage.removeItem("debug")}catch(t){}}function u(){var t;try{t=r.storage.getItem("debug")}catch(t){}return!t&&void 0!==s&&"env"in s&&(t=s.env.DEBUG),t}function h(){try{return localStorage}catch(t){}}r.log=a,r.formatArgs=o,r.save=l,r.load=u,r.useColors=i,r.storage=h(),r.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=t("./common")(r),e.exports.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,{env:{}})},{"./common":56}],56:[function(t,e,r){"use strict";function s(e){function r(t){for(var e=0,r=0;r<t.length;r++)e=(e<<5)-e+t.charCodeAt(r),e|=0;return s.colors[Math.abs(e)%s.colors.length]}function s(t){var e;function o(){if(o.enabled){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];var i=o,a=Number(new Date),l=a-(e||a);i.diff=l,i.prev=e,i.curr=a,e=a,r[0]=s.coerce(r[0]),"string"!=typeof r[0]&&r.unshift("%O");var u=0;r[0]=r[0].replace(/%([a-zA-Z%])/g,(function(t,e){if("%%"===t)return t;u++;var n=s.formatters[e];if("function"==typeof n){var o=r[u];t=n.call(i,o),r.splice(u,1),u--}return t})),s.formatArgs.call(i,r),(i.log||s.log).apply(i,r)}}return o.namespace=t,o.enabled=s.enabled(t),o.useColors=s.useColors(),o.color=r(t),o.destroy=n,o.extend=i,"function"==typeof s.init&&s.init(o),s.instances.push(o),o}function n(){var t=s.instances.indexOf(this);return-1!==t&&(s.instances.splice(t,1),!0)}function i(t,e){return s(this.namespace+(void 0===e?":":e)+t)}function o(t){var e;s.save(t),s.names=[],s.skips=[];var r=("string"==typeof t?t:"").split(/[\s,]+/),n=r.length;for(e=0;e<n;e++)r[e]&&("-"===(t=r[e].replace(/\*/g,".*?"))[0]?s.skips.push(new RegExp("^"+t.substr(1)+"$")):s.names.push(new RegExp("^"+t+"$")));for(e=0;e<s.instances.length;e++){var i=s.instances[e];i.enabled=s.enabled(i.namespace)}}function a(){s.enable("")}function l(t){if("*"===t[t.length-1])return!0;var e,r;for(e=0,r=s.skips.length;e<r;e++)if(s.skips[e].test(t))return!1;for(e=0,r=s.names.length;e<r;e++)if(s.names[e].test(t))return!0;return!1}function u(t){return t instanceof Error?t.stack||t.message:t}return s.debug=s,s.default=s,s.coerce=u,s.disable=a,s.enable=o,s.enabled=l,s.humanize=t("ms"),Object.keys(e).forEach((function(t){s[t]=e[t]})),s.instances=[],s.names=[],s.skips=[],s.formatters={},s.selectColor=r,s.enable(s.load()),s}e.exports=s},{ms:54}],57:[function(t,e,r){"function"==typeof Object.create?e.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},{}],58:[function(t,e,n){(function(t){(function(){var r="function"==typeof s&&s.amd,i={function:!0,object:!0},o=i[typeof n]&&n&&!n.nodeType&&n,a=i[typeof window]&&window||this,l=o&&i[typeof e]&&e&&!e.nodeType&&"object"==typeof t&&t;function u(t,e){t||(t=a.Object()),e||(e=a.Object());var r=t.Number||a.Number,s=t.String||a.String,n=t.Object||a.Object,o=t.Date||a.Date,l=t.SyntaxError||a.SyntaxError,h=t.TypeError||a.TypeError,c=t.Math||a.Math,d=t.JSON||a.JSON;"object"==typeof d&&d&&(e.stringify=d.stringify,e.parse=d.parse);var p,f=n.prototype,m=f.toString,g=f.hasOwnProperty;function v(t,e){try{t()}catch(t){e&&e()}}var _=new o(-0xc782b5b800cec);function y(t){if(null!=y[t])return y[t];var n;if("bug-string-char-index"==t)n="a"!="a"[0];else if("json"==t)n=y("json-stringify")&&y("date-serialization")&&y("json-parse");else if("date-serialization"==t){if(n=y("json-stringify")&&_){var i=e.stringify;v((function(){n='"-271821-04-20T00:00:00.000Z"'==i(new o(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==i(new o(864e13))&&'"-000001-01-01T00:00:00.000Z"'==i(new o(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==i(new o(-1))}))}}else{var a,l='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==t){var u="function"==typeof(i=e.stringify);u&&((a=function(){return 1}).toJSON=a,v((function(){u="0"===i(0)&&"0"===i(new r)&&'""'==i(new s)&&i(m)===p&&i(p)===p&&i()===p&&"1"===i(a)&&"[1]"==i([a])&&"[null]"==i([p])&&"null"==i(null)&&"[null,null,null]"==i([p,m,null])&&i({a:[a,!0,!1,null,"\0\b\n\f\r\t"]})==l&&"1"===i(null,a)&&"[\n 1,\n 2\n]"==i([1,2],null,1)}),(function(){u=!1}))),n=u}if("json-parse"==t){var h,c=e.parse;"function"==typeof c&&v((function(){0!==c("0")||c(!1)||(a=c(l),(h=5==a.a.length&&1===a.a[0])&&(v((function(){h=!c('"\t"')})),h&&v((function(){h=1!==c("01")})),h&&v((function(){h=1!==c("1.")}))))}),(function(){h=!1})),n=h}}return y[t]=!!n}if(v((function(){_=-109252==_.getUTCFullYear()&&0===_.getUTCMonth()&&1===_.getUTCDate()&&10==_.getUTCHours()&&37==_.getUTCMinutes()&&6==_.getUTCSeconds()&&708==_.getUTCMilliseconds()})),y["bug-string-char-index"]=y["date-serialization"]=y.json=y["json-stringify"]=y["json-parse"]=null,!y("json")){var b="[object Function]",w="[object Date]",x="[object Number]",j="[object String]",E="[object Array]",T="[object Boolean]",C=y("bug-string-char-index"),A=function(t,e){var r,s,n,o=0;for(n in(r=function(){this.valueOf=0}).prototype.valueOf=0,s=new r)g.call(s,n)&&o++;return r=s=null,o?A=function(t,e){var r,s,n=m.call(t)==b;for(r in t)n&&"prototype"==r||!g.call(t,r)||(s="constructor"===r)||e(r);(s||g.call(t,r="constructor"))&&e(r)}:(s=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],A=function(t,e){var r,n,o=m.call(t)==b,a=!o&&"function"!=typeof t.constructor&&i[typeof t.hasOwnProperty]&&t.hasOwnProperty||g;for(r in t)o&&"prototype"==r||!a.call(t,r)||e(r);for(n=s.length;r=s[--n];)a.call(t,r)&&e(r)}),A(t,e)};if(!y("json-stringify")&&!y("date-serialization")){var S={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},M="000000",O=function(t,e){return(M+(e||0)).slice(-t)},L=function(t){var e,r,s,n,i,o,a,l,u;if(_)e=function(t){r=t.getUTCFullYear(),s=t.getUTCMonth(),n=t.getUTCDate(),o=t.getUTCHours(),a=t.getUTCMinutes(),l=t.getUTCSeconds(),u=t.getUTCMilliseconds()};else{var h=c.floor,d=[0,31,59,90,120,151,181,212,243,273,304,334],p=function(t,e){return d[e]+365*(t-1970)+h((t-1969+(e=+(e>1)))/4)-h((t-1901+e)/100)+h((t-1601+e)/400)};e=function(t){for(n=h(t/864e5),r=h(n/365.2425)+1970-1;p(r+1,0)<=n;r++);for(s=h((n-p(r,0))/30.42);p(r,s+1)<=n;s++);n=1+n-p(r,s),o=h((i=(t%864e5+864e5)%864e5)/36e5)%24,a=h(i/6e4)%60,l=h(i/1e3)%60,u=i%1e3}}return(L=function(t){return t>-1/0&&t<1/0?(e(t),t=(r<=0||r>=1e4?(r<0?"-":"+")+O(6,r<0?-r:r):O(4,r))+"-"+O(2,s+1)+"-"+O(2,n)+"T"+O(2,o)+":"+O(2,a)+":"+O(2,l)+"."+O(3,u)+"Z",r=s=n=o=a=l=u=null):t=null,t})(t)};if(y("json-stringify")&&!y("date-serialization")){function k(t){return L(this)}var P=e.stringify;e.stringify=function(t,e,r){var s=o.prototype.toJSON;o.prototype.toJSON=k;var n=P(t,e,r);return o.prototype.toJSON=s,n}}else{var R="\\u00",D=function(t){var e=t.charCodeAt(0),r=S[e];return r||R+O(2,e.toString(16))},N=/[\x00-\x1f\x22\x5c]/g,F=function(t){return N.lastIndex=0,'"'+(N.test(t)?t.replace(N,D):t)+'"'},q=function(t,e,r,s,n,i,a){var l,u,c,d,f,g,_,y,b;if(v((function(){l=e[t]})),"object"==typeof l&&l&&(l.getUTCFullYear&&m.call(l)==w&&l.toJSON===o.prototype.toJSON?l=L(l):"function"==typeof l.toJSON&&(l=l.toJSON(t))),r&&(l=r.call(e,t,l)),l==p)return l===p?l:"null";switch("object"==(u=typeof l)&&(c=m.call(l)),c||u){case"boolean":case T:return""+l;case"number":case x:return l>-1/0&&l<1/0?""+l:"null";case"string":case j:return F(""+l)}if("object"==typeof l){for(_=a.length;_--;)if(a[_]===l)throw h();if(a.push(l),d=[],y=i,i+=n,c==E){for(g=0,_=l.length;g<_;g++)f=q(g,l,r,s,n,i,a),d.push(f===p?"null":f);b=d.length?n?"[\n"+i+d.join(",\n"+i)+"\n"+y+"]":"["+d.join(",")+"]":"[]"}else A(s||l,(function(t){var e=q(t,l,r,s,n,i,a);e!==p&&d.push(F(t)+":"+(n?" ":"")+e)})),b=d.length?n?"{\n"+i+d.join(",\n"+i)+"\n"+y+"}":"{"+d.join(",")+"}":"{}";return a.pop(),b}};e.stringify=function(t,e,r){var s,n,o,a;if(i[typeof e]&&e)if((a=m.call(e))==b)n=e;else if(a==E){o={};for(var l,u=0,h=e.length;u<h;)l=e[u++],"[object String]"!=(a=m.call(l))&&"[object Number]"!=a||(o[l]=1)}if(r)if((a=m.call(r))==x){if((r-=r%1)>0)for(r>10&&(r=10),s="";s.length<r;)s+=" "}else a==j&&(s=r.length<=10?r:r.slice(0,10));return q("",((l={})[""]=t,l),n,o,s,"",[])}}}if(!y("json-parse")){var I,z,U=s.fromCharCode,B={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},V=function(){throw I=z=null,l()},G=function(){for(var t,e,r,s,n,i=z,o=i.length;I<o;)switch(n=i.charCodeAt(I)){case 9:case 10:case 13:case 32:I++;break;case 123:case 125:case 91:case 93:case 58:case 44:return t=C?i.charAt(I):i[I],I++,t;case 34:for(t="@",I++;I<o;)if((n=i.charCodeAt(I))<32)V();else if(92==n)switch(n=i.charCodeAt(++I)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:t+=B[n],I++;break;case 117:for(e=++I,r=I+4;I<r;I++)(n=i.charCodeAt(I))>=48&&n<=57||n>=97&&n<=102||n>=65&&n<=70||V();t+=U("0x"+i.slice(e,I));break;default:V()}else{if(34==n)break;for(n=i.charCodeAt(I),e=I;n>=32&&92!=n&&34!=n;)n=i.charCodeAt(++I);t+=i.slice(e,I)}if(34==i.charCodeAt(I))return I++,t;V();default:if(e=I,45==n&&(s=!0,n=i.charCodeAt(++I)),n>=48&&n<=57){for(48==n&&(n=i.charCodeAt(I+1))>=48&&n<=57&&V(),s=!1;I<o&&(n=i.charCodeAt(I))>=48&&n<=57;I++);if(46==i.charCodeAt(I)){for(r=++I;r<o&&!((n=i.charCodeAt(r))<48||n>57);r++);r==I&&V(),I=r}if(101==(n=i.charCodeAt(I))||69==n){for(43!=(n=i.charCodeAt(++I))&&45!=n||I++,r=I;r<o&&!((n=i.charCodeAt(r))<48||n>57);r++);r==I&&V(),I=r}return+i.slice(e,I)}s&&V();var a=i.slice(I,I+4);if("true"==a)return I+=4,!0;if("fals"==a&&101==i.charCodeAt(I+4))return I+=5,!1;if("null"==a)return I+=4,null;V()}return"$"},H=function(t){var e,r;if("$"==t&&V(),"string"==typeof t){if("@"==(C?t.charAt(0):t[0]))return t.slice(1);if("["==t){for(e=[];"]"!=(t=G());)r?","==t?"]"==(t=G())&&V():V():r=!0,","==t&&V(),e.push(H(t));return e}if("{"==t){for(e={};"}"!=(t=G());)r?","==t?"}"==(t=G())&&V():V():r=!0,","!=t&&"string"==typeof t&&"@"==(C?t.charAt(0):t[0])&&":"==G()||V(),e[t.slice(1)]=H(G());return e}V()}return t},W=function(t,e,r){var s=Y(t,e,r);s===p?delete t[e]:t[e]=s},Y=function(t,e,r){var s,n=t[e];if("object"==typeof n&&n)if(m.call(n)==E)for(s=n.length;s--;)W(m,A,n,s,r);else A(n,(function(t){W(n,t,r)}));return r.call(t,e,n)};e.parse=function(t,e){var r,s;return I=0,z=""+t,r=H(G()),"$"!=G()&&V(),I=z=null,e&&m.call(e)==b?Y(((s={})[""]=r,s),"",e):r}}}return e.runInContext=u,e}if(!l||l.global!==l&&l.window!==l&&l.self!==l||(a=l),o&&!r)u(a,o);else{var h=a.JSON,c=a.JSON3,d=!1,p=u(a,a.JSON3={noConflict:function(){return d||(d=!0,a.JSON=h,a.JSON3=c,h=c=null),p}});a.JSON={parse:p.parse,stringify:p.stringify}}r&&s((function(){return p}))}).call(this)}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],59:[function(t,e,r){"use strict";var s,n=Object.prototype.hasOwnProperty;function i(t){try{return decodeURIComponent(t.replace(/\+/g," "))}catch(t){return null}}function o(t){for(var e,r=/([^=?&]+)=?([^&]*)/g,s={};e=r.exec(t);){var n=i(e[1]),o=i(e[2]);null===n||null===o||n in s||(s[n]=o)}return s}function a(t,e){e=e||"";var r,i,o=[];for(i in"string"!=typeof e&&(e="?"),t)if(n.call(t,i)){if((r=t[i])||null!==r&&r!==s&&!isNaN(r)||(r=""),i=encodeURIComponent(i),r=encodeURIComponent(r),null===i||null===r)continue;o.push(i+"="+r)}return o.length?e+o.join("&"):""}r.stringify=a,r.parse=o},{}],60:[function(t,e,r){"use strict";e.exports=function(t,e){if(e=e.split(":")[0],!(t=+t))return!1;switch(e){case"http":case"ws":return 80!==t;case"https":case"wss":return 443!==t;case"ftp":return 21!==t;case"gopher":return 70!==t;case"file":return!1}return 0!==t}},{}],61:[function(t,e,s){(function(r){"use strict";var s=t("requires-port"),n=t("querystringify"),i=/^[A-Za-z][A-Za-z0-9+-.]*:[\\/]+/,o=/^([a-z][a-z0-9.+-]*:)?([\\/]{1,})?([\S\s]*)/i,a=new RegExp("^[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]+");function l(t){return(t||"").toString().replace(a,"")}var u=[["#","hash"],["?","query"],function(t){return t.replace("\\","/")},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d+)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],h={hash:1,query:1};function c(t){var e,s=("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:{}).location||{},n={},o=typeof(t=t||s);if("blob:"===t.protocol)n=new f(unescape(t.pathname),{});else if("string"===o)for(e in n=new f(t,{}),h)delete n[e];else if("object"===o){for(e in t)e in h||(n[e]=t[e]);void 0===n.slashes&&(n.slashes=i.test(t.href))}return n}function d(t){t=l(t);var e=o.exec(t);return{protocol:e[1]?e[1].toLowerCase():"",slashes:!!(e[2]&&e[2].length>=2),rest:e[2]&&1===e[2].length?"/"+e[3]:e[3]}}function p(t,e){if(""===t)return e;for(var r=(e||"/").split("/").slice(0,-1).concat(t.split("/")),s=r.length,n=r[s-1],i=!1,o=0;s--;)"."===r[s]?r.splice(s,1):".."===r[s]?(r.splice(s,1),o++):o&&(0===s&&(i=!0),r.splice(s,1),o--);return i&&r.unshift(""),"."!==n&&".."!==n||r.push(""),r.join("/")}function f(t,e,r){if(t=l(t),!(this instanceof f))return new f(t,e,r);var i,o,a,h,m,g,v=u.slice(),_=typeof e,y=this,b=0;for("object"!==_&&"string"!==_&&(r=e,e=null),r&&"function"!=typeof r&&(r=n.parse),e=c(e),i=!(o=d(t||"")).protocol&&!o.slashes,y.slashes=o.slashes||i&&e.slashes,y.protocol=o.protocol||e.protocol||"",t=o.rest,o.slashes||(v[3]=[/(.*)/,"pathname"]);b<v.length;b++)"function"!=typeof(h=v[b])?(a=h[0],g=h[1],a!=a?y[g]=t:"string"==typeof a?~(m=t.indexOf(a))&&("number"==typeof h[2]?(y[g]=t.slice(0,m),t=t.slice(m+h[2])):(y[g]=t.slice(m),t=t.slice(0,m))):(m=a.exec(t))&&(y[g]=m[1],t=t.slice(0,m.index)),y[g]=y[g]||i&&h[3]&&e[g]||"",h[4]&&(y[g]=y[g].toLowerCase())):t=h(t);r&&(y.query=r(y.query)),i&&e.slashes&&"/"!==y.pathname.charAt(0)&&(""!==y.pathname||""!==e.pathname)&&(y.pathname=p(y.pathname,e.pathname)),"/"!==y.pathname.charAt(0)&&y.hostname&&(y.pathname="/"+y.pathname),s(y.port,y.protocol)||(y.host=y.hostname,y.port=""),y.username=y.password="",y.auth&&(h=y.auth.split(":"),y.username=h[0]||"",y.password=h[1]||""),y.origin=y.protocol&&y.host&&"file:"!==y.protocol?y.protocol+"//"+y.host:"null",y.href=y.toString()}function m(t,e,r){var i=this;switch(t){case"query":"string"==typeof e&&e.length&&(e=(r||n.parse)(e)),i[t]=e;break;case"port":i[t]=e,s(e,i.protocol)?e&&(i.host=i.hostname+":"+e):(i.host=i.hostname,i[t]="");break;case"hostname":i[t]=e,i.port&&(e+=":"+i.port),i.host=e;break;case"host":i[t]=e,/:\d+$/.test(e)?(e=e.split(":"),i.port=e.pop(),i.hostname=e.join(":")):(i.hostname=e,i.port="");break;case"protocol":i.protocol=e.toLowerCase(),i.slashes=!r;break;case"pathname":case"hash":if(e){var o="pathname"===t?"/":"#";i[t]=e.charAt(0)!==o?o+e:e}else i[t]=e;break;default:i[t]=e}for(var a=0;a<u.length;a++){var l=u[a];l[4]&&(i[l[1]]=i[l[1]].toLowerCase())}return i.origin=i.protocol&&i.host&&"file:"!==i.protocol?i.protocol+"//"+i.host:"null",i.href=i.toString(),i}function g(t){t&&"function"==typeof t||(t=n.stringify);var e,r=this,s=r.protocol;s&&":"!==s.charAt(s.length-1)&&(s+=":");var i=s+(r.slashes?"//":"");return r.username&&(i+=r.username,r.password&&(i+=":"+r.password),i+="@"),i+=r.host+r.pathname,(e="object"==typeof r.query?t(r.query):r.query)&&(i+="?"!==e.charAt(0)?"?"+e:e),r.hash&&(i+=r.hash),i}f.prototype={set:m,toString:g},f.extractProtocol=d,f.location=c,f.trimLeft=l,f.qs=n,e.exports=f}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{querystringify:59,"requires-port":60}]},{},[1])(1)},"./node_modules/url/node_modules/punycode/punycode.js":function(t,e,r){var s;t=r.nmd(t),function(n){e&&e.nodeType,t&&t.nodeType;var i="object"==typeof r.g&&r.g;i.global!==i&&i.window!==i&&i.self;var o,a=2147483647,l=36,u=/^xn--/,h=/[^\x20-\x7E]/,c=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function m(t){throw RangeError(d[t])}function g(t,e){for(var r=t.length,s=[];r--;)s[r]=e(t[r]);return s}function v(t,e){var r=t.split("@"),s="";return r.length>1&&(s=r[0]+"@",t=r[1]),s+g((t=t.replace(c,".")).split("."),e).join(".")}function _(t){for(var e,r,s=[],n=0,i=t.length;n<i;)(e=t.charCodeAt(n++))>=55296&&e<=56319&&n<i?56320==(64512&(r=t.charCodeAt(n++)))?s.push(((1023&e)<<10)+(1023&r)+65536):(s.push(e),n--):s.push(e);return s}function y(t){return g(t,(function(t){var e="";return t>65535&&(e+=f((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=f(t)})).join("")}function b(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function w(t,e,r){var s=0;for(t=r?p(t/700):t>>1,t+=p(t/e);t>455;s+=l)t=p(t/35);return p(s+36*t/(t+38))}function x(t){var e,r,s,n,i,o,u,h,c,d,f,g=[],v=t.length,_=0,b=128,x=72;for((r=t.lastIndexOf("-"))<0&&(r=0),s=0;s<r;++s)t.charCodeAt(s)>=128&&m("not-basic"),g.push(t.charCodeAt(s));for(n=r>0?r+1:0;n<v;){for(i=_,o=1,u=l;n>=v&&m("invalid-input"),((h=(f=t.charCodeAt(n++))-48<10?f-22:f-65<26?f-65:f-97<26?f-97:l)>=l||h>p((a-_)/o))&&m("overflow"),_+=h*o,!(h<(c=u<=x?1:u>=x+26?26:u-x));u+=l)o>p(a/(d=l-c))&&m("overflow"),o*=d;x=w(_-i,e=g.length+1,0==i),p(_/e)>a-b&&m("overflow"),b+=p(_/e),_%=e,g.splice(_++,0,b)}return y(g)}function j(t){var e,r,s,n,i,o,u,h,c,d,g,v,y,x,j,E=[];for(v=(t=_(t)).length,e=128,r=0,i=72,o=0;o<v;++o)(g=t[o])<128&&E.push(f(g));for(s=n=E.length,n&&E.push("-");s<v;){for(u=a,o=0;o<v;++o)(g=t[o])>=e&&g<u&&(u=g);for(u-e>p((a-r)/(y=s+1))&&m("overflow"),r+=(u-e)*y,e=u,o=0;o<v;++o)if((g=t[o])<e&&++r>a&&m("overflow"),g==e){for(h=r,c=l;!(h<(d=c<=i?1:c>=i+26?26:c-i));c+=l)j=h-d,x=l-d,E.push(f(b(d+j%x,0))),h=p(j/x);E.push(f(b(h,0))),i=w(r,y,s==n),r=0,++s}++r,++e}return E.join("")}o={version:"1.3.2",ucs2:{decode:_,encode:y},decode:x,encode:j,toASCII:function(t){return v(t,(function(t){return h.test(t)?"xn--"+j(t):t}))},toUnicode:function(t){return v(t,(function(t){return u.test(t)?x(t.slice(4).toLowerCase()):t}))}},void 0===(s=function(){return o}.call(e,r,e,t))||(t.exports=s)}()},"./node_modules/url/url.js":(t,e,r)=>{"use strict";var s=r("./node_modules/url/node_modules/punycode/punycode.js"),n=r("./node_modules/url/util.js");function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=y,e.resolve=function(t,e){return y(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?y(t,!1,!0).resolveObject(e):e},e.format=function(t){n.isString(t)&&(t=y(t));return t instanceof i?t.format():i.prototype.format.call(t)},e.Url=i;var o=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),h=["'"].concat(u),c=["%","/","?",";","#"].concat(h),d=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},_=r("./node_modules/querystring/index.js");function y(t,e,r){if(t&&n.isObject(t)&&t instanceof i)return t;var s=new i;return s.parse(t,e,r),s}i.prototype.parse=function(t,e,r){if(!n.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var i=t.indexOf("?"),a=-1!==i&&i<t.indexOf("#")?"?":"#",u=t.split(a);u[0]=u[0].replace(/\\/g,"/");var y=t=u.join(a);if(y=y.trim(),!r&&1===t.split("#").length){var b=l.exec(y);if(b)return this.path=y,this.href=y,this.pathname=b[1],b[2]?(this.search=b[2],this.query=e?_.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var w=o.exec(y);if(w){var x=(w=w[0]).toLowerCase();this.protocol=x,y=y.substr(w.length)}if(r||w||y.match(/^\/\/[^@\/]+@[^@\/]+/)){var j="//"===y.substr(0,2);!j||w&&g[w]||(y=y.substr(2),this.slashes=!0)}if(!g[w]&&(j||w&&!v[w])){for(var E,T,C=-1,A=0;A<d.length;A++){-1!==(S=y.indexOf(d[A]))&&(-1===C||S<C)&&(C=S)}-1!==(T=-1===C?y.lastIndexOf("@"):y.lastIndexOf("@",C))&&(E=y.slice(0,T),y=y.slice(T+1),this.auth=decodeURIComponent(E)),C=-1;for(A=0;A<c.length;A++){var S;-1!==(S=y.indexOf(c[A]))&&(-1===C||S<C)&&(C=S)}-1===C&&(C=y.length),this.host=y.slice(0,C),y=y.slice(C),this.parseHost(),this.hostname=this.hostname||"";var M="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!M)for(var O=this.hostname.split(/\./),L=(A=0,O.length);A<L;A++){var k=O[A];if(k&&!k.match(p)){for(var P="",R=0,D=k.length;R<D;R++)k.charCodeAt(R)>127?P+="x":P+=k[R];if(!P.match(p)){var N=O.slice(0,A),F=O.slice(A+1),q=k.match(f);q&&(N.push(q[1]),F.unshift(q[2])),F.length&&(y="/"+F.join(".")+y),this.hostname=N.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),M||(this.hostname=s.toASCII(this.hostname));var I=this.port?":"+this.port:"",z=this.hostname||"";this.host=z+I,this.href+=this.host,M&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==y[0]&&(y="/"+y))}if(!m[x])for(A=0,L=h.length;A<L;A++){var U=h[A];if(-1!==y.indexOf(U)){var B=encodeURIComponent(U);B===U&&(B=escape(U)),y=y.split(U).join(B)}}var V=y.indexOf("#");-1!==V&&(this.hash=y.substr(V),y=y.slice(0,V));var G=y.indexOf("?");if(-1!==G?(this.search=y.substr(G),this.query=y.substr(G+1),e&&(this.query=_.parse(this.query)),y=y.slice(0,G)):e&&(this.search="",this.query={}),y&&(this.pathname=y),v[x]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){I=this.pathname||"";var H=this.search||"";this.path=I+H}return this.href=this.format(),this},i.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",r=this.pathname||"",s=this.hash||"",i=!1,o="";this.host?i=t+this.host:this.hostname&&(i=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&n.isObject(this.query)&&Object.keys(this.query).length&&(o=_.stringify(this.query));var a=this.search||o&&"?"+o||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||v[e])&&!1!==i?(i="//"+(i||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):i||(i=""),s&&"#"!==s.charAt(0)&&(s="#"+s),a&&"?"!==a.charAt(0)&&(a="?"+a),e+i+(r=r.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(a=a.replace("#","%23"))+s},i.prototype.resolve=function(t){return this.resolveObject(y(t,!1,!0)).format()},i.prototype.resolveObject=function(t){if(n.isString(t)){var e=new i;e.parse(t,!1,!0),t=e}for(var r=new i,s=Object.keys(this),o=0;o<s.length;o++){var a=s[o];r[a]=this[a]}if(r.hash=t.hash,""===t.href)return r.href=r.format(),r;if(t.slashes&&!t.protocol){for(var l=Object.keys(t),u=0;u<l.length;u++){var h=l[u];"protocol"!==h&&(r[h]=t[h])}return v[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(t.protocol&&t.protocol!==r.protocol){if(!v[t.protocol]){for(var c=Object.keys(t),d=0;d<c.length;d++){var p=c[d];r[p]=t[p]}return r.href=r.format(),r}if(r.protocol=t.protocol,t.host||g[t.protocol])r.pathname=t.pathname;else{for(var f=(t.pathname||"").split("/");f.length&&!(t.host=f.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),r.pathname=f.join("/")}if(r.search=t.search,r.query=t.query,r.host=t.host||"",r.auth=t.auth,r.hostname=t.hostname||t.host,r.port=t.port,r.pathname||r.search){var m=r.pathname||"",_=r.search||"";r.path=m+_}return r.slashes=r.slashes||t.slashes,r.href=r.format(),r}var y=r.pathname&&"/"===r.pathname.charAt(0),b=t.host||t.pathname&&"/"===t.pathname.charAt(0),w=b||y||r.host&&t.pathname,x=w,j=r.pathname&&r.pathname.split("/")||[],E=(f=t.pathname&&t.pathname.split("/")||[],r.protocol&&!v[r.protocol]);if(E&&(r.hostname="",r.port=null,r.host&&(""===j[0]?j[0]=r.host:j.unshift(r.host)),r.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===f[0]?f[0]=t.host:f.unshift(t.host)),t.host=null),w=w&&(""===f[0]||""===j[0])),b)r.host=t.host||""===t.host?t.host:r.host,r.hostname=t.hostname||""===t.hostname?t.hostname:r.hostname,r.search=t.search,r.query=t.query,j=f;else if(f.length)j||(j=[]),j.pop(),j=j.concat(f),r.search=t.search,r.query=t.query;else if(!n.isNullOrUndefined(t.search)){if(E)r.hostname=r.host=j.shift(),(M=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=M.shift(),r.host=r.hostname=M.shift());return r.search=t.search,r.query=t.query,n.isNull(r.pathname)&&n.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!j.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var T=j.slice(-1)[0],C=(r.host||t.host||j.length>1)&&("."===T||".."===T)||""===T,A=0,S=j.length;S>=0;S--)"."===(T=j[S])?j.splice(S,1):".."===T?(j.splice(S,1),A++):A&&(j.splice(S,1),A--);if(!w&&!x)for(;A--;A)j.unshift("..");!w||""===j[0]||j[0]&&"/"===j[0].charAt(0)||j.unshift(""),C&&"/"!==j.join("/").substr(-1)&&j.push("");var M,O=""===j[0]||j[0]&&"/"===j[0].charAt(0);E&&(r.hostname=r.host=O?"":j.length?j.shift():"",(M=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=M.shift(),r.host=r.hostname=M.shift()));return(w=w||r.host&&j.length)&&!O&&j.unshift(""),j.length?r.pathname=j.join("/"):(r.pathname=null,r.path=null),n.isNull(r.pathname)&&n.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=t.auth||r.auth,r.slashes=r.slashes||t.slashes,r.href=r.format(),r},i.prototype.parseHost=function(){var t=this.host,e=a.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},"./node_modules/url/util.js":t=>{"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},"./node_modules/webpack-dev-server/client/clients/BaseClient.js":t=>{"use strict";function e(t,e){for(var r=0;r<e.length;r++){var s=e[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var r,s,n;return r=t,n=[{key:"getClientPath",value:function(t){throw new Error("Client needs implementation")}}],(s=null)&&e(r.prototype,s),n&&e(r,n),t}()},"./node_modules/webpack-dev-server/client/clients/SockJSClient.js":(t,e,r)=>{"use strict";function s(t){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function n(t,e){for(var r=0;r<e.length;r++){var s=e[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}function i(t,e){return(i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function o(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,s=l(t);if(e){var n=l(this).constructor;r=Reflect.construct(s,arguments,n)}else r=s.apply(this,arguments);return a(this,r)}}function a(t,e){return!e||"object"!==s(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var u=r("./node_modules/sockjs-client/dist/sockjs.js"),h=r("./node_modules/webpack-dev-server/client/clients/BaseClient.js");t.exports=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}(l,t);var e,r,s,a=o(l);function l(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,l),(e=a.call(this)).sock=new u(t),e.sock.onerror=function(t){},e}return e=l,s=[{key:"getClientPath",value:function(t){return"./node_modules/webpack-dev-server/client/clients/SockJSClient.js"}}],(r=[{key:"onOpen",value:function(t){this.sock.onopen=t}},{key:"onClose",value:function(t){this.sock.onclose=t}},{key:"onMessage",value:function(t){this.sock.onmessage=function(e){t(e.data)}}}])&&n(e.prototype,r),s&&n(e,s),l}(h)},"./node_modules/webpack-dev-server/client/overlay.js":(t,e,r)=>{"use strict";var s=r("./node_modules/ansi-html/index.js"),n=new(0,r("./node_modules/html-entities/lib/index.js").AllHtmlEntities),i={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},o=null,a=null,l=null;function u(t){var e,r;a?t(a):(l=t,o||(e=function(){var t,e;(e=(t=o).contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",e.style.position="fixed",e.style.boxSizing="border-box",e.style.left=0,e.style.top=0,e.style.right=0,e.style.bottom=0,e.style.width="100vw",e.style.height="100vh",e.style.backgroundColor="rgba(0, 0, 0, 0.85)",e.style.color="#E8E8E8",e.style.fontFamily="Menlo, Consolas, monospace",e.style.fontSize="large",e.style.padding="2rem",e.style.lineHeight="1.2",e.style.whiteSpace="pre-wrap",e.style.overflow="auto",t.contentDocument.body.appendChild(e),l(a=e)},(r=document.createElement("iframe")).id="webpack-dev-server-client-overlay",r.src="about:blank",r.style.position="fixed",r.style.left=0,r.style.top=0,r.style.right=0,r.style.bottom=0,r.style.width="100vw",r.style.height="100vh",r.style.border="none",r.style.zIndex=9999999999,r.onload=e,o=r,document.body.appendChild(o)))}s.setColors(i),t.exports={clear:function(){a&&(document.body.removeChild(o),a=null,o=null,l=null)},showMessage:function(t){u((function(e){e.innerHTML='<span style="color: #'.concat(i.red,'">Failed to compile.</span><br><br>').concat(s(n.encode(t[0])))}))}}},"./node_modules/webpack-dev-server/client/socket.js":(t,e,r)=>{"use strict";var s=r("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),n=void 0!==s?s:r("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),i=0,o=null,a=function(t,e){(o=new n(t)).onOpen((function(){i=0})),o.onClose((function(){if(0===i&&e.close(),o=null,i<=10){var r=1e3*Math.pow(2,i)+100*Math.random();i+=1,setTimeout((function(){a(t,e)}),r)}})),o.onMessage((function(t){var r=JSON.parse(t);e[r.type]&&e[r.type](r.data)}))};t.exports=a},"./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":(t,e,r)=>{"use strict";var s=r("./node_modules/url/url.js"),n=r("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");t.exports=function(t,e){var r;if("string"==typeof t&&""!==t)r=s.parse(t.substr(1).replace("&","?"),!0);else{var i=n();r=s.parse(i||"/",!0,!0)}return function(t,e){var r=t.auth,n=t.query,i=t.hostname,o=t.protocol,a=t.port;a&&"0"!==a||(a=e.port);"0.0.0.0"!==i&&"::"!==i||!e.hostname||0!==e.protocol.indexOf("http")||(i=e.hostname);!i||"127.0.0.1"===i||"https:"!==e.protocol&&"0.0.0.0"!==t.hostname||(o=e.protocol);var l=n.sockHost||i,u=n.sockPath||"/sockjs-node",h=n.sockPort||a;"location"===h&&(h=e.port);return s.format({protocol:o,auth:r,hostname:l,port:h,pathname:u})}(r,e="string"==typeof e&&""!==e?s.parse(e):self.location)}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":t=>{"use strict";t.exports=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var t=document.scripts||[],e=t[t.length-1];if(e)return e.getAttribute("src");throw new Error("[WDS] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(t,e,r)=>{"use strict";var s=r("./node_modules/loglevel/lib/loglevel.js").getLogger("webpack-dev-server"),n="info";s.setDefaultLevel(n),t.exports={log:s,setLogLevel:function(t){switch(t){case n:case"warn":case"error":case"debug":case"trace":s.setLevel(t);break;case"warning":s.setLevel("warn");break;case"none":case"silent":s.disableAll();break;default:s.error("[WDS] Unknown clientLogLevel '".concat(t,"'"))}}}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(t,e,r)=>{"use strict";var s=r("./node_modules/webpack-dev-server/client/utils/log.js").log;t.exports=function(t,e){var n=t.hotReload,i=t.hot,o=t.liveReload,a=e.isUnloading,l=e.currentHash;if(!a&&n)if(i)s.info("[WDS] App hot update..."),r("./node_modules/webpack/hot/emitter.js").emit("webpackHotUpdate",l),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(l),"*");else if(o)var u=self,h=self.setInterval((function(){("about:"!==u.location.protocol||(u=u.parent).parent===u)&&c(u,h)}));function c(t,e){clearInterval(e),s.info("[WDS] App updated. Reloading..."),t.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":t=>{"use strict";t.exports=function(t,e){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(t),data:e},"*")}},"./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js":t=>{"use strict";t.exports=function(){return/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g}},"./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js":(t,e,r)=>{"use strict";var s=r("./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js")();t.exports=function(t){return"string"==typeof t?t.replace(s,""):t}},"./node_modules/webpack/hot/emitter.js":(t,e,r)=>{var s=r("./node_modules/events/events.js");t.exports=new s},"./node_modules/webpack/hot/log.js":t=>{var e="info";function r(){}function s(t){return"info"===e&&"info"===t||["info","warning"].indexOf(e)>=0&&"warning"===t||["info","warning","error"].indexOf(e)>=0&&"error"===t}function n(t){return function(e,r){s(e)&&t(r)}}t.exports=function(t,e){s(t)&&("info"===t?console.log(e):"warning"===t?console.warn(e):"error"===t&&console.error(e))};var i=console.group||r,o=console.groupCollapsed||r,a=console.groupEnd||r;t.exports.group=n(i),t.exports.groupCollapsed=n(o),t.exports.groupEnd=n(a),t.exports.setLogLevel=function(t){e=t},t.exports.formatError=function(t){var e=t.message,r=t.stack;return r?r.indexOf(e)<0?e+"\n"+r:r:e}},"./app/shaders/home-fragment.glsl":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a *= uAlpha;\n}\n"},"./app/shaders/home-vertex.glsl":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>s});const s="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform float uSpeed;\nuniform vec2 uViewportSizes;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying float speed;\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n  newPosition.z += (sin(newPosition.y / uViewportSizes.y * PI + PI / 2.0)) * uSpeed;\n\n  gl_Position = projectionMatrix * newPosition;\n}\n"},"./app/shaders/plane-fragment.glsl":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/plane-vertex.glsl":(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>s});const s="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"},"./node_modules/webpack/hot sync ^\\.\\/log$":(t,e,r)=>{var s={"./log":"./node_modules/webpack/hot/log.js"};function n(t){var e=i(t);return r(e)}function i(t){if(!r.o(s,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return s[t]}n.keys=function(){return Object.keys(s)},n.resolve=i,t.exports=n,n.id="./node_modules/webpack/hot sync ^\\.\\/log$"}},e={};function r(s){var n=e[s];if(void 0!==n)return n.exports;var i=e[s]={id:s,loaded:!1,exports:{}};return t[s].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var s in e)r.o(e,s)&&!r.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";r.r({});var t=r("./node_modules/normalize-wheel/index.js"),e=r.n(t),s=r("./node_modules/lodash/each.js"),n=r.n(s),i=r("./app/components/Canvas/index.js"),o=r("./app/components/Navigation.js"),a=r("./app/components/Preloader.js"),l=r("./app/components/Transition.js"),u=r("./app/pages/About/index.js"),h=r("./app/pages/Home/index.js");new class{constructor(){this.template=window.location.pathname,this.createCanvas(),this.createPreloader(),this.createTransition(),this.createNavigation(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.onResize(),this.update()}createNavigation(){this.navigation=new o.default({template:this.template})}createPreloader(){this.preloader=new a.default({canvas:this.canvas}),this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new i.default({template:this.template})}createTransition(){this.transition=new l.default}createPages(){this.about=new u.default,this.home=new h.default,this.pages={"/":this.home,"/about":this.about},this.page=this.pages[this.template]}onPreloaded(){this.onResize(),this.canvas.onPreloaded(),this.page.show()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}async onChange({url:t,push:e=!0}){t=t.replace(window.location.origin,"");const r=this.pages[t];await this.transition.show({color:r.element.getAttribute("data-color")}),e&&window.history.pushState({},"",t),this.template=window.location.pathname,this.page.hide(),this.navigation.onChange(this.template),this.canvas.onChange(this.template),this.page=r,this.page.show(),this.onResize(),this.transition.hide()}onResize(){this.page&&this.page.onResize&&this.page.onResize(),window.requestAnimationFrame((t=>{this.canvas&&this.canvas.onResize&&this.canvas.onResize()}))}onTouchDown(t){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(t),this.page&&this.page.onTouchDown&&this.page.onTouchDown(t)}onTouchMove(t){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(t),this.page&&this.page.onTouchDown&&this.page.onTouchMove(t)}onTouchUp(t){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(t),this.page&&this.page.onTouchDown&&this.page.onTouchUp(t)}onWheel(t){const r=e()(t);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(r),this.page&&this.page.onWheel&&this.page.onWheel(r)}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("popstate",this.onPopState.bind(this)),window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const t=document.querySelectorAll("a");n()(t,(t=>{const e=t.href.indexOf(window.location.origin)>-1,r=-1===t.href.indexOf("mailto"),s=-1===t.href.indexOf("tel");e?(t.onclick=e=>{e.preventDefault(),this.onChange({url:t.href})},t.onmouseenter=e=>this.onLinkMouseEnter(t),t.onmouseleave=e=>this.onLinkMouseLeave(t)):r&&s&&(t.rel="noopener",t.target="_blank")}))}}})(),(()=>{"use strict";r.r({})})(),(()=>{"use strict";var t=r("./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js"),e=r("./node_modules/webpack-dev-server/client/socket.js"),s=r("./node_modules/webpack-dev-server/client/overlay.js"),n=r("./node_modules/webpack-dev-server/client/utils/log.js"),i=n.log,o=n.setLogLevel,a=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),l=r("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),u=r("./node_modules/webpack-dev-server/client/utils/createSocketUrl.js"),h={isUnloading:!1,currentHash:""},c={hot:!1,hotReload:!0,liveReload:!1,initial:!0,useWarningOverlay:!1,useErrorOverlay:!1,useProgress:!1},d=u("?http://localhost:8080");if(self.addEventListener("beforeunload",(function(){h.isUnloading=!0})),"undefined"!=typeof window){var p=window.location.search.toLowerCase();c.hotReload=-1===p.indexOf("hotreload=false")}e(d,{hot:function(){c.hot=!0,i.info("[WDS] Hot Module Replacement enabled.")},liveReload:function(){c.liveReload=!0,i.info("[WDS] Live Reloading enabled.")},invalid:function(){i.info("[WDS] App updated. Recompiling..."),(c.useWarningOverlay||c.useErrorOverlay)&&s.clear(),a("Invalid")},hash:function(t){h.currentHash=t},"still-ok":function(){i.info("[WDS] Nothing changed."),(c.useWarningOverlay||c.useErrorOverlay)&&s.clear(),a("StillOk")},"log-level":function(t){var e=r("./node_modules/webpack/hot sync ^\\.\\/log$");-1!==e.keys().indexOf("./log")&&e("./log").setLogLevel(t),o(t)},overlay:function(t){"undefined"!=typeof document&&("boolean"==typeof t?(c.useWarningOverlay=!1,c.useErrorOverlay=t):t&&(c.useWarningOverlay=t.warnings,c.useErrorOverlay=t.errors))},progress:function(t){"undefined"!=typeof document&&(c.useProgress=t)},"progress-update":function(t){c.useProgress&&i.info("[WDS] ".concat(t.percent,"% - ").concat(t.msg,".")),a("Progress",t)},ok:function(){if(a("Ok"),(c.useWarningOverlay||c.useErrorOverlay)&&s.clear(),c.initial)return c.initial=!1;l(c,h)},"content-changed":function(){i.info("[WDS] Content base changed. Reloading..."),self.location.reload()},warnings:function(e){i.warn("[WDS] Warnings while compiling.");var r=e.map((function(e){return t(e)}));a("Warnings",r);for(var n=0;n<r.length;n++)i.warn(r[n]);if(c.useWarningOverlay&&s.showMessage(e),c.initial)return c.initial=!1;l(c,h)},errors:function(e){i.error("[WDS] Errors while compiling. Reload prevented.");var r=e.map((function(e){return t(e)}));a("Errors",r);for(var n=0;n<r.length;n++)i.error(r[n]);c.useErrorOverlay&&s.showMessage(e),c.initial=!1},error:function(t){i.error(t)},close:function(){i.error("[WDS] Disconnected!"),a("Close")}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,